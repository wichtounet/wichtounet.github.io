The next version of eddic will see an <strong>improved compiler architecture</strong>. There are two new main changes in this version:

<ol>
	<li>A better separation between the front end and the back end</li>
	<li>A new intermediate representation to improve and ease code generation</li>
</ol>

<h3>Front end and Back End</h3>

First, the front and back ends have been clearly separated. The general compiler architecture is currently something like that:

<a href="http://www.baptiste-wicht.com/2012/05/compiler-architecture-refinements-eddic/general-architecture/" rel="attachment wp-att-1973"><img class="aligncenter size-full wp-image-1973" title="EDDI Compiler General Architecture" src="/wp-content/uploads/2012/05/general-architecture.svg" alt="EDDI Compiler General Architecture"></a>

The first part didn't change, but the Compiler was part was clearly separated between front and back ends:

<a href="http://www.baptiste-wicht.com/2012/05/compiler-architecture-refinements-eddic/compiler-architecture/" rel="attachment wp-att-1976"><img class="aligncenter size-full wp-image-1976" title="EDDI Compiler Architecture" src="/wp-content/uploads/2012/05/compiler-architecture.svg" alt="EDDI Compiler Architecture"></a>

The backend has no information about the source language. It only sees the intermediate representation provided by the front-end, named: Medium-Level Three Address Code (MTAC).

There are several advantages to this model. The main one is that it is easy to add support for a new programming language to the compiler. Only the front end needs to be changed. The same can be achieved if a new output is necessary, for example output ARM assembly instead of Intel assembly.

<h3>New intermediate representation</h3>

In the previous versions of the compiler, the code generators were fairly complex. Indeed, they had to transform the MTAC intermediate representation directly into assembly. This process involves several things:

<ul>
	<li>instruction selection</li>
	<li>register allocation</li>
	<li>low-level optimization (replace a  mov rax, 0 with xor rax, rax for example)</li>
	<li>handle basic blocks management</li>
</ul>

In this version, I decided to change it to a better architecture. This architecture uses a new intermediate representation: Low-Level Three Address Code (LTAC). As its name states, it is a low-level representation, close to assembly. In this  representation there are addresses, registers and abstracted instructions. This representation is platform independent (the differences between 32 and 64 bits are moved to the code generators). There are no more basic blocks here, only functions containing statements.

The next figure presents the structure of the backend:

<a href="http://www.baptiste-wicht.com/2012/05/compiler-architecture-refinements-eddic/backend-architecture/" rel="attachment wp-att-1977"><img class="aligncenter size-full wp-image-1977" title="EDDI Compiler Backend architecture" src="/wp-content/uploads/2012/05/backend-architecture.svg" alt="EDDI Compiler Backend architecture"></a>

The compiler is responsible for transforming the MTAC Representation in LTAC Representation. It does not do any low-level optimization. The instruction selection is easier as it is platform independent. The peephole optimizer is responsible for the low-levels optimizations. In the 1.0 release, there would be only few things done at this level. In the future, I will try to invest some time to complete it to generate better assembly code. The optimizations are far simpler than the one done in the MTAC optimization engine. Indeed, a peephole optimizer is generally working only in a small window of instructions, like three or four instructions at a time. And finally, the code generators performs the instruction selection process and address resolving. It also has to translate symbolic registers into physical ones.

<h3>Conclusion</h3>

I hope that these refinements in the compiler architecture will allow the compiler to produce better code.

The 1.0 version of the compiler will include another new features:

<ul>
	<li>Basic support for custom structures</li>
	<li>Global optimizations</li>
	<li>Some bug fixes found with the new set of unit tests</li>
</ul>

As always, feel free to comment on the new architecture, the compiler itself, the project or whatever