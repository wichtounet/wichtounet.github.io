I'm proud to announce a new release of EDDIC, the version 0.7.

Most of the changes are internal to the compiler. I read a new book : <em>Compilers: Principles, Techniques, and Tools</em> and applied some of the advices of the author. The biggest change is the use of a new intermediate representation : Three-Address-Code statements. This representation is easy, all the statements are basically of the form a = b + c with + being any operator of the language. The big advantage of this representation is that we can easily run optimization on it. Another advantage is that this representation is complete enough to represent most of the programming languages, so, we can imagine compiling several different source languages into the TAC language and then compiling them the same way.

Once the Three-Address-Code representation is generated and separated into basic blocks, it is compiled into X86 assembly using a code generator. I've made a lot of improvements on the generated assembly. For example, I'm using several new instructions (neg, inc, dec, xor, ...) to generate more efficient code. Moreover, I'm doing a better use of registers with keeping variables into registers as long as possible.

<h3>Better optimization engine</h3>

Here is the list of what the optimizer do at the TAC level:

<ul>
	<li>Simplify arithmetic identities : a = b + 0 =&gt; a = b</li>
	<li>Reduce in strength : a = b * 2 =&gt; a = b + b</li>
	<li>Constant folding : a = 2 + 2 =&gt; a = 4</li>
	<li>Constant propagation : when a constant is assigned to a, reuse the constant as long as no other assignment is made to a</li>
	<li>Remove overridden assign</li>
	<li>Remove dead basic blocks : when a condition is known at compile time we can know the path it will take and remove basic blocks that will never be taken</li>
	<li>Remove needless jumps : After the other optimization have been done it is possible that a goto is directly targeting the next basic block so we can remove it</li>
	<li>Merge basic blocks : After some statements have been replaced or removed it is possible that we can merge some basic blocks together</li>
</ul>

The optimizer is running the different optimization technique as long as one of them as an effect on the code. At the present time, the optimization techniques are used locally (within a basic block) so the generated assembly is not perfect, but for what I tested so far, it's a good start.

<h3>Other changes</h3>

Moreover, the language itself also had some improvements:
<ul>
	<li>The minus and plus unary operators have been added to the grammar</li>
	<li>The local and global variables can be const</li>
	<li>A source file can now includes another source or a file from the standard library (very little for now, but a little start)</li>
</ul>

The project itself has also been improved
<ul>
	<li>Most of the classes and files are now documented using Doxygen</li>
	<li>The unit tests are now testing compilation and execution of some samples, that helped me finding some bugs in the code base and in the new changes</li>
</ul>

<h3>Download</h3>

You can find the compiler sources on the Github repository : <a title="EDDI Compiler Repository" href="http://github.com/wichtounet/eddic">https://github.com/wichtounet/eddic</a>.

The exact version I refer to is the v0.7 available in the github tags or directly as the release branch.