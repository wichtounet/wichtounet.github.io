<html><body><p>In this post, we'll develop a simple Hello World application with <strong>OSGi</strong>. We will use <strong>Felix</strong> as <strong>OSGi container</strong>. In the next post, we'll continue with this application and use <strong>Spring Dynamic Modules</strong> to improve it. 

To make the development interesting, we will create two bundles :

</p><ul>
	<li>A bundle providing a service of HelloWorld</li>
	<li>A bundle consuming the service to print hello at regular interval time.</li>
</ul>

<!--more-->

So let's start with the first bundle. What we need first is a very simple service providing a simple print in the console :

[java]package com.bw.osgi.provider.able;

public interface HelloWorldService {
    void hello();
}[/java]

[java]package com.bw.osgi.provider.impl;

import com.bw.osgi.provider.able.HelloWorldService;

public class HelloWorldServiceImpl implements HelloWorldService {
    @Override
    public void hello(){
        System.out.println("Hello World !");
    }
}[/java]

We cannot make easier. Then, we need to export the Service using an activator : 

[java]package com.bw.osgi.provider;

import org.osgi.framework.BundleActivator;

import org.osgi.framework.BundleContext;

import org.osgi.framework.ServiceRegistration;

import com.bw.osgi.provider.able.HelloWorldService;

import com.bw.osgi.provider.impl.HelloWorldServiceImpl;

public class ProviderActivator implements BundleActivator {
    private ServiceRegistration registration;

    @Override
    public void start(BundleContext bundleContext) throws Exception {
        registration = bundleContext.registerService(
                HelloWorldService.class.getName(),
                new HelloWorldServiceImpl(),
                null);
    }

    @Override
    public void stop(BundleContext bundleContext) throws Exception {
        registration.unregister();
    }
}[/java]

A lot more code here. For those who aren't confident with OSGi, some explanations. The start method will be called when the module is started and the stop when it's stopped. In the start method, we register our service in the bundle context using the name of the interface as the name of the exported service. The third parameter, null, indicate that we doesn't give any configuration for this service. In the stop method, we just unregister the service. 

Now, our first bundle is ready. We can build it. For that we'll use Maven and the maven-bundle-plugin to build the OSGi Bundle directly. Here is the pom.xml file for the project. 

[xml]&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;OSGiDmHelloWorldProvider&lt;/groupId&gt;
    &lt;artifactId&gt;OSGiDmHelloWorldProvider&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
    
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
            &lt;artifactId&gt;org.osgi.core&lt;/artifactId&gt;
            &lt;version&gt;1.4.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.0.2&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.6&lt;/source&gt;
                    &lt;target&gt;1.6&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
                &lt;artifactId&gt;maven-bundle-plugin&lt;/artifactId&gt;
                &lt;extensions&gt;true&lt;/extensions&gt;
                &lt;configuration&gt;
                    &lt;instructions&gt;
                        &lt;Bundle-SymbolicName&gt;OSGiDmHelloWorldProvider&lt;/Bundle-SymbolicName&gt;
                        &lt;Export-Package&gt;com.bw.osgi.provider.able&lt;/Export-Package&gt;
                        &lt;Bundle-Activator&gt;com.bw.osgi.provider.ProviderActivator&lt;/Bundle-Activator&gt;
                        &lt;Bundle-Vendor&gt;Baptiste Wicht&lt;/Bundle-Vendor&gt;
                    &lt;/instructions&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt; 
&lt;/project&gt;[/xml]

And then, use mvn install to build it. 

We'll work in a folder called osgi, so we'll copy this new bundle in the osgi folder. 

We can already test it in the OSGi container. If you dont' have already Felix, let's download it <a href="http://felix.apache.org/site/downloads.html">here</a>. You have to choose the "Felix Distribution". 

Then extract it to the osgi folder we created before. You must now have this folder structure : 

<pre>osgi
  - felix 
  - OSGiDmHelloWorldProvider-1.0.jar</pre>

So we can go in the felix folder and launch Felix : 

<pre>wichtounet@Linux-Desktop:~/Desktop/osgi/felix$ java -jar bin/felix.jar 

_______________

Welcome to Apache Felix Gogo

g! </pre>

And install our bundle : 

<pre>g! install file:../OSGiDmHelloWorldProvider-1.0.jar         

Bundle ID: 5</pre>

The install is good installed, we can try to start it and see its status : 

<pre>g! start 5

g! bundle 5

Location             file:../OSGiDmHelloWorldProvider-1.0.jar

State                32

Version              1.0.0

LastModified         1279124741320

Headers              [Tool=Bnd-0.0.357, Bundle-Activator=com.bw.osgi.provider.ProviderActivator, Export-Package=com.bw.osgi.provider.able, Build-Jdk=1.6.0_20, Bundle-Version=1.0.0, Created-By=Apache Maven Bundle Plugin, Bundle-ManifestVersion=2, Manifest-Version=1.0, Bundle-Vendor=Baptiste Wicht, Bnd-LastModified=1279124686551, Bundle-Name=Unnamed - OSGiDmHelloWorldProvider:OSGiDmHelloWorldProvider:bundle:1.0, Built-By=wichtounet, Bundle-SymbolicName=OSGiDmHelloWorldProvider, Import-Package=com.bw.osgi.provider.able,org.osgi.framework;version="1.5"]

BundleContext        org.apache.felix.framework.BundleContextImpl@2353f67e

BundleId             5

SymbolicName         OSGiDmHelloWorldProvider

RegisteredServices   [HelloWorldService]

ServicesInUse        null</pre>

All is fine. Our service is good registered :)

Now we'll try to consume this service in our second bundle. Our consumer class will be very simple : 

[java]package com.bw.osgi.consumer;

import javax.swing.Timer;

import java.awt.event.ActionEvent;

import java.awt.event.ActionListener;

import com.bw.osgi.provider.able.HelloWorldService;

public class HelloWorldConsumer implements ActionListener {
    private final HelloWorldService service;
    private final Timer timer;

    public HelloWorldConsumer(HelloWorldService service) {
        super();

        this.service = service;

        timer = new Timer(1000, this);
    }

    public void startTimer(){
        timer.start();
    }

    public void stopTimer() {
        timer.stop();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        service.hello();
    }
}[/java]

And now, we must create the activator to get the service and then give it to the consumer. That will give use something like this : 

[java]package com.bw.osgi.consumer;

import org.osgi.framework.BundleActivator;

import org.osgi.framework.BundleContext;

import org.osgi.framework.ServiceReference;

import com.bw.osgi.provider.able.HelloWorldService;

public class HelloWorldActivator implements BundleActivator {
    private HelloWorldConsumer consumer;

    @Override
    public void start(BundleContext bundleContext) throws Exception {
        ServiceReference reference = bundleContext.getServiceReference(HelloWorldService.class.getName());

        consumer = new HelloWorldConsumer((HelloWorldService) bundleContext.getService(reference));
        consumer.startTimer();
    }

    @Override
    public void stop(BundleContext bundleContext) throws Exception {
        consumer.stopTimer();
    }
}[/java]

We get a service reference from the bundle context using the name of the class. After that, we get the service instance from the bundle context. 

We create also a little pom.xml file to build the bundle : 

[xml]&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;OSGiDmHelloWorldConsumer&lt;/groupId&gt;
    &lt;artifactId&gt;OSGiDmHelloWorldConsumer&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
    &lt;packaging&gt;bundle&lt;/packaging&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
            &lt;artifactId&gt;org.osgi.core&lt;/artifactId&gt;
            &lt;version&gt;1.0.0&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;OSGiDmHelloWorldProvider&lt;/groupId&gt;
            &lt;artifactId&gt;OSGiDmHelloWorldProvider&lt;/artifactId&gt;
            &lt;version&gt;1.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.0.2&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.6&lt;/source&gt;
                    &lt;target&gt;1.6&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;

            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
                &lt;artifactId&gt;maven-bundle-plugin&lt;/artifactId&gt;
                &lt;extensions&gt;true&lt;/extensions&gt;
                &lt;configuration&gt;
                    &lt;instructions&gt;
                        &lt;Bundle-SymbolicName&gt;OSGiDmHelloWorldConsumer&lt;/Bundle-SymbolicName&gt;
                        &lt;Bundle-Activator&gt;com.bw.osgi.consumer.HelloWorldActivator&lt;/Bundle-Activator&gt;
                        &lt;Bundle-Vendor&gt;Baptiste Wicht&lt;/Bundle-Vendor&gt;
                    &lt;/instructions&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;[/xml]

Then, we use mvn install to create the bundle and we install it in the container : 

<pre>g! start 6

g! Hello World !

Hello World !

Hello World !

Hello World !

Hello World !

Hello World !

Hello World !

Hello World !

Hello World !

Hello World !

Hello World !

Hello World !

Hello World !

Hello World !

g! stop 6</pre>

And here we are :) We've created our first application using OSGi. With that technology you can build modules really independant. 

In the next post about OSGi, we'll see how to use Spring to make the OSGi development easier and to concentrate our effort on the application not OSGi.  

The sources of the two bundles are available here : 

<ul>
	<li><a href="/wp-content/uploads/2010/07/OSGiDmHelloWorldProvider.tar.gz">OSGiDmHelloWorldProvider sources</a></li>
	<li><a href="/wp-content/uploads/2010/07/OSGiDmHelloWorldConsumer.tar.gz">OSGiDmHelloWorldConsumer</a></li>
</ul></body></html>