<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>@Blog("Baptiste Wicht")</title><link>http://baptiste-wicht.com/</link><description>Website about vtechnologies Java, Spring, OSGi, Hardware,...</description><language>en</language><lastBuildDate>Mon, 13 Oct 2014 11:44:26 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>SonarQube inspections for C++ projects</title><link>http://baptiste-wicht.com/posts/2014/10/sonarqube-inspections-for-cpp-projects.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;Back in the days, when I used to develop in Java (I hadn't discovered the
wonders of C++ :) ), I used Sonar a lot for my projects. Sonar is a great tool
for quality inspections of a project. Sonar has been made for Java and is mostly
free and opensource (some plugins are commercial) to inspect Java projects.
Unfortunately, this is not the case for C++ inspection. Indeed, the C++ plugin
cost 7000 euros (more than 8500$). As I mostly work on C++ for opensource and
school projects, I'm definitely not able to buy it. I wanted for a long time to
test the commercial C++ plugin. For this article, sonarsource provided me with a
short (very short) time license for the C++ plugin.&lt;/p&gt;
&lt;p&gt;There is also another option for C++ which is the C++ community plugin:
&lt;a class="reference external" href="https://github.com/wenns/sonar-cxx"&gt;https://github.com/wenns/sonar-cxx&lt;/a&gt;. I have tested it some time ago, but I was
not satisfied with it, I had several errors and had to use a dev version to make
it work a bit. Moreover, the C++11 support is inexistant and management of
parsing error is not really satisfying. But maybe it is good for you. This
article will only focus on the commercial plugin.&lt;/p&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;For each project that you want to analyze with Sonar, you have to create a
sonar-project.properties files describing some basic information about your
project.&lt;/p&gt;
&lt;p&gt;Then, there are two ways to inspect a C++ project. The first one and recommended
one is to use the &lt;em&gt;build-wrapper&lt;/em&gt; executable. It is a sub project that you have
to download and install alongside Sonar. It works by wrapping the commands to
your build systems:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
build-wrapper make all
&lt;/pre&gt;
&lt;p&gt;and this should generate enough informations for not having to fill each field
in the project configuration. The, you have to use the &lt;em&gt;sonar-runner&lt;/em&gt; program to
upload to Sonar.&lt;/p&gt;
&lt;p&gt;I tried it on several projects and there seems to be a problem with the
includes. It didn't include the header files in the Sonar inspections.&lt;/p&gt;
&lt;p&gt;I finally ended up using manual configuration of the Sonar project and the
header files were included correctly. However, you normally have to include many
information in the configuration including all macros for instance. For now, I
haven't bothered generating them and it doesn't seem to impact too much the
results.&lt;/p&gt;
&lt;p&gt;When I look in the log, it seems that there are still a lot of parsing errors.
They seem mostly related to some compiler macro, especially the __has_feature__
macro of clang. This is the same problem with the build-wrapper. When I don't
use the build-wrapper I also have other problems with macros for unit testing.&lt;/p&gt;
&lt;p&gt;I also have other errors coming during the inspection, for instance:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
error directive: This file requires compiler and library support for the ISO C++
2011 standard. This support is currently experimental, and must be enabled with
the -std=c++11 or -std=gnu++11 compiler options
&lt;/pre&gt;
&lt;p&gt;I think it comes from the fact that I compile with std=c++1y and that Sonar
does not support C++14.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inspections"&gt;
&lt;h2&gt;Inspections&lt;/h2&gt;
&lt;p&gt;Here is the results of inspection on my ETL project:&lt;/p&gt;
&lt;img alt="/images/etl_dashboard.png" src="http://baptiste-wicht.com/images/etl_dashboard.png"&gt;
&lt;p&gt;I really like the web interface of Sonar, it really sums well all the
information and the various plugins play quite nice with each other. Moreover,
when you check issues, you can see directly the source code very clearly. I
really think this is the strong point of Sonar.&lt;/p&gt;
&lt;p&gt;Here is the Hotspots view for instance:&lt;/p&gt;
&lt;img alt="/images/etl_dashboard.png" src="http://baptiste-wicht.com/images/etl_dashboard.png"&gt;
&lt;p&gt;Or the Time Machine view:&lt;/p&gt;
&lt;img alt="/images/etl_dashboard.png" src="http://baptiste-wicht.com/images/etl_dashboard.png"&gt;
&lt;p&gt;The issues that are reported by Sonar are quite good. On this project there is a
lot of them related to naming conventions because I don't follow the conventions
configured by default. However, you can easily configure the inspections to give
your own naming regex or simple enable/disable some inspections.&lt;/p&gt;
&lt;p&gt;There are some good inspections:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some missing explicit keyword&lt;/li&gt;
&lt;li&gt;Some commented block of code that can be removed&lt;/li&gt;
&lt;li&gt;An if-elseif construct that should have had a else&lt;/li&gt;
&lt;li&gt;Files with too high complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, there are also some important false positives. For instance:&lt;/p&gt;
&lt;img alt="/images/etl_false_positive_1.png" src="http://baptiste-wicht.com/images/etl_false_positive_1.png"&gt;
&lt;p&gt;In here, there are no reasons to output this issue since the operator is
deleted. It proves that the C++11 support is rather incomplete. I have other
false positives of the same kind for &lt;em&gt;= default&lt;/em&gt; operators and constructors.
Here is another example:&lt;/p&gt;
&lt;img alt="/images/etl_false_positive_2.png" src="http://baptiste-wicht.com/images/etl_false_positive_2.png"&gt;
&lt;p&gt;In this case, the varadic template support is mixed with the old ellipsis
notation, making it again a lack of C++11 support. There are also other false
positives for instance because of lambdas, but all of them were related to
C++11.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="various"&gt;
&lt;h2&gt;Various&lt;/h2&gt;
&lt;p&gt;If you don't think you have enough quality rules, you can also include the one
from cppcheck simply by givin the path to cppcheck in sonar-project.properties.
I think this is great, since it works all by itself. You can also create your
own rule, but you'll have to use XPath for path.&lt;/p&gt;
&lt;p&gt;If you want, you can also include unit test reports inside Sonar. I haven't
tested this support since they only support cppunit test reports and I use only
Catch for my unit tests. It would have been great if JUnit format would have
been supported since many tool support it.&lt;/p&gt;
&lt;p&gt;The last option that is supported by this plugin is the support of GCOV reports
for code coverage information. I haven't been able to make it work, I had errors
indicating that the source files were not found. I didn't figure this out. It
may come from the fact that I used llvm and clang to generate the GCOV reports
and not G++.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;First, here are some pros and cons for the C++ support in SonarQube.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Good default inspections&lt;/li&gt;
&lt;li&gt;Great web interface.&lt;/li&gt;
&lt;li&gt;cppcheck very well integrated&lt;/li&gt;
&lt;li&gt;Issues are easily configurable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;C++11 support is incomplete and no C++14 support&lt;/li&gt;
&lt;li&gt;build-wrapper support seems instable. It should be integrated directly into
sonar.&lt;/li&gt;
&lt;li&gt;Unit tests support is limited to cppunit&lt;/li&gt;
&lt;li&gt;Haven't been able to make Code Coverage work&lt;/li&gt;
&lt;li&gt;Macro support not flexible enough&lt;/li&gt;
&lt;li&gt;Too expensive&lt;/li&gt;
&lt;li&gt;Quite complicated&lt;/li&gt;
&lt;li&gt;No support for other static analyzer than cppcheck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The general web interface feeling is quite good, everything looks great and the
report are really useful. However, the usage of the tool does not feel very
professional. I had a lot more problems than I expected to use it. I was also
really disappointed by the C++11. The syntax seems to be supported but not the
language feature in the inspections, making the C++11 support completely
useless. This is weird since they cite C+11 as supported. Moreover, there not
yet any C++14 support, but this is less dramatic. It is also a bit sad that they
limit the import to cppcheck and no other static analyzers and the same stands
for cppunit.&lt;/p&gt;
&lt;p&gt;In my opinion, it is really an inferior product compared to the Java support.
I was expecting more from a 8500 dollars product.&lt;/p&gt;
&lt;p&gt;For now, I won't probably use it anymore on my projects since all of them use at
least C++11, but I will probably retry Sonar for C++ in the future hoping that
it will become as the Sonar Java support.&lt;/p&gt;
&lt;/div&gt;</description><category>C++</category><category>Review</category><category>Sonar</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2014/10/sonarqube-inspections-for-cpp-projects.html</guid><pubDate>Sun, 05 Oct 2014 12:55:46 GMT</pubDate></item><item><title>Linux tip: Force systemd networkd to wait for DHCP</title><link>http://baptiste-wicht.com/posts/2014/10/linux-tip-force-systemd-networkd-to-wait-for-dhcp.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;Recently, I started using systemd-networkd to manage my network. It works really
good for static address configuration, but I experienced some problem with DHCP.
There is DHCP client support integrated into systemd, so I wanted to use this
instead of using another DHCP client.&lt;/p&gt;
&lt;p&gt;(If you are not familiar with systemd-networkd, you can have a look at the last
section of this article)&lt;/p&gt;
&lt;p&gt;The problem with that is that services are not waiting for DHCP leases to be
obtained. Most services (sshd for instance), are waiting for network.target,
however, network.target does not wait for the DHCP lease to be obtained from the
server. If you configured ssh on a specific IP and this IP is obtained with
DHCP, it will fail at startup. The same is true for NFS mounts for instance.&lt;/p&gt;
&lt;div class="section" id="force-services-to-wait-for-the-network-to-be-configured"&gt;
&lt;h2&gt;Force services to wait for the network to be configured&lt;/h2&gt;
&lt;p&gt;The solution is to make services like sshd waits for network-online.target
instead of network.target. There is a simple way in systemd to override default
service files. For a X.service, systemd will also parse all the
/etc/systemd/X.service.d/*.conf files.&lt;/p&gt;
&lt;p&gt;For instance, to make sshd be started only after DHCP is finished&lt;/p&gt;
&lt;p&gt;/etc/systemd/systemd/sshd.service.d/network.conf:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[Unit]
Wants=network-online.target
After=network-online.target
&lt;/pre&gt;
&lt;p&gt;However, by default, network-online.target does not wait for anything. You'll
have to enable another service to make it work:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
systemctl enable systemd-networkd-wait-online
&lt;/pre&gt;
&lt;p&gt;And another note, at least on Gentoo, I had to use systemd-216 for it to work:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
emerge -a "=sys-apps/systemd-216"
&lt;/pre&gt;
&lt;p&gt;And after this, it worked like a charm at startup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="force-nfs-mounts-to-wait-for-the-network"&gt;
&lt;h2&gt;Force NFS mounts to wait for the network&lt;/h2&gt;
&lt;p&gt;There is no service file for nfs mounts, but there is a target remote-fs.target
that groups the remote file systems mounts. You can override its configuration
in the same as a service:&lt;/p&gt;
&lt;p&gt;/etc/systemd/systemd/remote-fs.target.d/network.conf:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[Unit]
Wants=network-online.target
After=network-online.target
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here we are, I hope this tip will be useful to some of you ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="appendix-configure-interface-with-dhcp-with-systemd"&gt;
&lt;h2&gt;Appendix. Configure interface with DHCP with systemd&lt;/h2&gt;
&lt;p&gt;To configure an interface with DHCP, you have to create a .network file in
/etc/systemd/network/. For instance, here is my
/etc/systemd/network/local.network file:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[Match]
Name=enp3s0

[Network]
DHCP=v4
&lt;/pre&gt;
&lt;p&gt;and you have to enable systemd-networkd:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
systemctl enable systemd-networkd
&lt;/pre&gt;
&lt;/div&gt;</description><category>Gentoo</category><category>Linux</category><category>Network</category><category>Tips</category><category>systemd</category><guid>http://baptiste-wicht.com/posts/2014/10/linux-tip-force-systemd-networkd-to-wait-for-dhcp.html</guid><pubDate>Wed, 01 Oct 2014 18:18:55 GMT</pubDate></item><item><title>budgetwarrior 0.4.1 - Expense templates and year projection</title><link>http://baptiste-wicht.com/posts/2014/09/budgetwarrior-041-expense-templates-and-year-projection.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;I've been able to finish the version 0.4.1 of budgetwarrior before I though :)&lt;/p&gt;
&lt;div class="section" id="expense-templates"&gt;
&lt;h2&gt;Expense templates&lt;/h2&gt;
&lt;p&gt;The "most useful" new feature of this release is the ability to create template
for expenses.&lt;/p&gt;
&lt;p&gt;For that, you can give an extra parameter to budget expense add:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
budget expense add template name
&lt;/pre&gt;
&lt;p&gt;This will works exactly the same as creating a new expense expect that it will
be saved as a template. Then, the next time you do:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
budget expense add template name
&lt;/pre&gt;
&lt;p&gt;A new expense will be created with the date of the day and with the name and
amount saved into the template. You can create as many templates as you want as
long as they have different names. You can see all the templates you have by
using 'budget expense template'. A template can be deleted the exact same as an
expense with 'budget expense delete id'.&lt;/p&gt;
&lt;p&gt;I think this is very useful for expense that are made several times a month, for
instance a coffee at your workplace. The price should not change a lot and it is
faster to just use the template name rather than entering all the information
again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="year-prediction"&gt;
&lt;h2&gt;Year prediction&lt;/h2&gt;
&lt;p&gt;You can now see what would be next year if you changed a bit your expenses. For
instance, how much would you still have at the end of the year if you increased
your house expenses by 20% and reduced your insurances by 5% ?&lt;/p&gt;
&lt;p&gt;The 'budget predict' can be used for that purpose. You can enter a multiplier
for each account in your budget and a new year will be "predicted" based on
the expenses of the current year multiplied by the specified multiplier:&lt;/p&gt;
&lt;img alt="/images/budget_041_prediction.png" src="http://baptiste-wicht.com/images/budget_041_prediction.png"&gt;
&lt;p&gt;I think that this feature can be very useful if you want to estimate how your
budget will be for moving to a more expensive house or another insurance for
instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="various-changes"&gt;
&lt;h2&gt;Various changes&lt;/h2&gt;
&lt;p&gt;Two accounts can be merged together with the 'budget account migrate' command.
This command will move all expenses from an account to another and adapt the
amount of the target account. The source account will be deleted. This supports
migrated accounts.&lt;/p&gt;
&lt;p&gt;The 'budget wish list' command will now display the mean accuracy of your
predictions.&lt;/p&gt;
&lt;p&gt;You don't need Boost anymore for this project. The only remaining dependency is
libuuid. I will perhaps remove it in the next version since the UUID are not
used in the application for now.&lt;/p&gt;
&lt;p&gt;The command 'budget gc' will clean the IDs of all your data in order to fill the
holes and make all the IDs contiguous. It is mostly a feature for order-freaks
like me who do not like to have holes in a sequence of identifiers ;)&lt;/p&gt;
&lt;p&gt;There was a bug in the monthly report causing the scale to be displayed
completely moved, it is now fixed:&lt;/p&gt;
&lt;img alt="https://raw.githubusercontent.com/wichtounet/budgetwarrior/develop/screenshots/budget_report.png" src="https://raw.githubusercontent.com/wichtounet/budgetwarrior/develop/screenshots/budget_report.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;If you are on Gentoo, you can install it using layman:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
layman -a wichtounet
emerge -a budgetwarrior
&lt;/pre&gt;
&lt;p&gt;If you are on Arch Linux, you can use this &lt;a class="reference external" href="https://github.com/StreakyCobra/aur"&gt;AUR repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For other systems, you'll have to install from sources:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone git://github.com/wichtounet/budgetwarrior.git
cd budgetwarrior
make
sudo make install
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you are interested by the sources, you can download them on Github:
&lt;a class="reference external" href="https://github.com/wichtounet/budgetwarrior"&gt;budgetwarrior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have a suggestion for a new features or you found a bug, please post an
issue on Github, I'd be glad to help you.&lt;/p&gt;
&lt;p&gt;If you have any comment, don't hesitate to contact me, either by letting a
comment on this post or by email.&lt;/p&gt;
&lt;/div&gt;</description><category>C++</category><category>Gentoo</category><category>Linux</category><category>Releases</category><category>budgetwarrior</category><guid>http://baptiste-wicht.com/posts/2014/09/budgetwarrior-041-expense-templates-and-year-projection.html</guid><pubDate>Sun, 21 Sep 2014 18:53:53 GMT</pubDate></item><item><title>Short introduction to deep learning</title><link>http://baptiste-wicht.com/posts/2014/09/short-introduction-to-deep-learning.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;At my school, I gave a short presentation about Deep Learning and the
implementation I made in C++.&lt;/p&gt;
&lt;p&gt;It is nothing fancy, but it could be interesting to someone.&lt;/p&gt;
&lt;div style="text-align:center;"&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/39024941" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;Don't hesitate if you have any comments or questions about the presentation ;)&lt;/p&gt;
&lt;p&gt;The implementation is here: &lt;a class="reference external" href="https://github.com/wichtounet/dll"&gt;https://github.com/wichtounet/dll&lt;/a&gt;&lt;/p&gt;</description><category>dbn</category><category>deep learning</category><category>dll</category><category>rbm</category><guid>http://baptiste-wicht.com/posts/2014/09/short-introduction-to-deep-learning.html</guid><pubDate>Fri, 12 Sep 2014 18:41:58 GMT</pubDate></item><item><title>A Mutt journey: Search mails with notmuch</title><link>http://baptiste-wicht.com/posts/2014/08/a-mutt-journey-search-mails-with-notmuch.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;In the previous installment in the Mutt series, &lt;a class="reference external" href="http://baptiste-wicht.com/posts/2014/07/a-mutt-journey-my-mutt-configuration.html"&gt;I've talked about my Mutt
configuration&lt;/a&gt;.
In this post, I'll talk about notmuch and how to use it to search through mails.&lt;/p&gt;
&lt;p&gt;By default, you can search mails in Mutt by using the / key. By doing that, you
can only search in the current folder. This is very fast, but this is not always
what you want. When you don't know in which folder the mail you are looking for
is, you don't want to test each folder. By default, there are no feature to
achieve global searching in Mutt.&lt;/p&gt;
&lt;p&gt;That is where notmuch comes to the rescue. notmuch is a very simple tool that
allows you to search through your mail. As its name indicates, it does not do
much. It doesn't download your mails, you have to have them locally, which is
perfect &lt;a class="reference external" href="http://baptiste-wicht.com/posts/2014/07/a-mutt-journey-download-mails-with-offlineimap.html"&gt;if you use offlineimap&lt;/a&gt;.
It does not provide a user interface, but you can query it from the command line
and it can be used from other tools. It should be available in most of the
distributions.&lt;/p&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The configuration of notmuch is fairly simple. You can write your
&lt;code&gt;.notmuch-config&lt;/code&gt; directly or run &lt;code&gt;notmuch setup&lt;/code&gt; that will
interactively help you to fill the configuration.&lt;/p&gt;
&lt;p&gt;Here is my configuration:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[database]
path=/data/oi/Gmail/

[user]
name=Baptiste Wicht
primary_email=baptiste.wicht@gmail.com

[new]
tags=inbox
ignore=

[search]
exclude_tags=deleted;

[maildir]
synchronize_flags=true
&lt;/pre&gt;
&lt;p&gt;It needs of cours the place where your mails are stored. Then, some information
about you. The next section is to specify which tags you want to add to new
mails. Here, I specified that each new mail must be tagged with &lt;cite&gt;inbox&lt;/cite&gt;. You can
add several tags to new mails. In the &lt;cite&gt;[search]&lt;/cite&gt; section, the excluded tags are
specified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Once you have configured notmuch, you can run &lt;cite&gt;notmuch new&lt;/cite&gt; to process all
existing mails. The first run may take some time (in minutes, it is still quite
fast), but the subsequent runs will be very fast. You should run notmuch after
each offlineimap run. I personally run it in a shell script that is run by cron.
You could also use one of the hooks of offlineimap to run notmuch.&lt;/p&gt;
&lt;p&gt;Once indexing has been done, you can start searching your mails. The first
option to search mail is simply to use &lt;cite&gt;notmuch search &amp;lt;query&amp;gt;&lt;/cite&gt; from the command
line. This will directly displays the results. Search is instant on my mails.&lt;/p&gt;
&lt;p&gt;If you use mutt-kz like me, notmuch support is directly integrated. You can type
X, and then type your query like &lt;code&gt;notmuch://?query=X&lt;/code&gt; and the results will
be displayed as a normal Mutt folder. You can open mails directly from here and
you can also edit the mails as if you were in their source folders. This is
really practical.&lt;/p&gt;
&lt;p&gt;If you use mutt, you can have the same experience, by using the &lt;cite&gt;notmuch-mutt&lt;/cite&gt;
patch (&lt;cite&gt;here &amp;lt;http://notmuchmail.org/notmuch-mutt/&amp;gt;&lt;/cite&gt;). In several distributions,
there is an option to build it with this support or another package to add the
feature.&lt;/p&gt;
&lt;p&gt;Another feature of notmuch is its ability to tag mails. It automatically tags
new mails and deleted mails. But you can also explicitely tag messages by using
&lt;code&gt;notmuch tag&lt;/code&gt;. For instance, to tag all messages from the notmuch mailing
list:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
notmuch tag +notmuch -- tag:new and to:notmuch@notmuchmail.org
&lt;/pre&gt;
&lt;p&gt;I personally don't use this feature since I use imapfilter and IMAP folders to
sort my mail, but it can be very useful. You can run these commands in the
cronjob and always have you tags up to date. Tags can then be used in notmuch to
search or to create virtual folder in Mutt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That is already more or less everything that there is to know about notmuch. It
does not do a lot of thing, but it does them really well.&lt;/p&gt;
&lt;p&gt;That concludes the series of posts on Mutt. If you have any question on my Mutt
configuration, I'd be glad to extend on the comments.&lt;/p&gt;
&lt;/div&gt;</description><category>Gentoo</category><category>Gmail</category><category>Linux</category><category>Mutt</category><guid>http://baptiste-wicht.com/posts/2014/08/a-mutt-journey-search-mails-with-notmuch.html</guid><pubDate>Sat, 02 Aug 2014 15:24:12 GMT</pubDate></item><item><title>Catch: A powerful yet simple C++ test framework</title><link>http://baptiste-wicht.com/posts/2014/07/catch-powerful-yet-simple-cpp-test-framework.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;Recently, I came accross a new test framework for C++ program: Catch.&lt;/p&gt;
&lt;p&gt;Until I found Catch, I was using Boost Test Framework. It is working quite well,
but the problem is that you need to build Boost and link to the Boost Test
Framework, which is not highly convenient. I wanter something lighter and easier
to integrate.&lt;/p&gt;
&lt;p&gt;Catch is header only, you only have to include one header for each test file.
Moreover, it is very easy to combine several source files without linking
problems.&lt;/p&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;The usage is really simple. Here is a basic example:&lt;/p&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="cp"&gt;#define CATCH_CONFIG_MAIN
#include "catch.hpp"
&lt;/span&gt;
&lt;span class="n"&gt;TEST_CASE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"stupid/1=2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Prove that one equals 2"&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;REQUIRE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The define is made to ensure that Catch will generate a main for you. This
should only defined in one of your tests files if you have several. You define a
new test case using the &lt;code&gt;TEST_CASE&lt;/code&gt; macro. There are two parameters, the
first one is the name of the test case, you can use any name, you don't have to
use a valid C++ name. The second parameter is a longer description of the test
case.&lt;/p&gt;
&lt;p&gt;You then use &lt;code&gt;REQUIRE&lt;/code&gt; to verify a condition. You can also use
&lt;code&gt;CHECK&lt;/code&gt; to verify a condition, the difference being that it does not stop
if the condition is not true. &lt;code&gt;CHECK&lt;/code&gt; is a good tool to put together some
conditions that are related. There also exists &lt;code&gt;REQUIRE_FALSE&lt;/code&gt; and
&lt;code&gt;CHECK_FALSE&lt;/code&gt; versions.&lt;/p&gt;
&lt;p&gt;As you can see, there are no &lt;code&gt;REQUIRE_EQUALS&lt;/code&gt; or things like that, you can
use any comparison operator you want in the &lt;code&gt;REQUIRE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This produces an executable that will, by default, run every test contained in
the executable. You can also configure the output report to be XML or JUnit if
you want or run a subset of your tests. Take a look at the command line usage by
running the executable with the -h option if you want more information.&lt;/p&gt;
&lt;p&gt;Here is the result of the previous test:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
catch_test_1 is a Catch v1.0 b52 host application.
Run with -? for options

-------------------------------------------------------------------------------
stupid/1=2
-------------------------------------------------------------------------------
src/catch/test1.cpp:4
...............................................................................

src/catch/test1.cpp:6: FAILED:
  REQUIRE( one == 2 )
with expansion:
  1 == 2

===============================================================================
test cases: 1 | 1 failed
assertions: 1 | 1 failed
&lt;/pre&gt;
&lt;p&gt;For each failed condition, the source location is printed as well as some
information on the test that failed. What is also interesting is the "with
expansion" information that shows LHS and RHS of the comparison operator.&lt;/p&gt;
&lt;p&gt;You can also check for exceptions with several macros:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;REQUIRE_THROWS(expression)&lt;/code&gt; and &lt;code&gt;CHECK_THROWS(expression)&lt;/code&gt;
verify that an exception is thrown when the given expresssion is evaluated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REQUIRE_THROWS_AS(expression, exception_type)&lt;/code&gt; and
&lt;code&gt;CHECK_THROWS_AS(expression, exception_type)&lt;/code&gt; verify the the given
exception is thrown.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REQUIRE_NOTHROW(expression)&lt;/code&gt; and &lt;code&gt;CHECK_NOTHROW(expression)&lt;/code&gt;
verify that no exception is thrown.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I have only covered the most basic features, there is more that you can do with
Catch: fixtures, logging and BDD-style test cases for instance. For more
information you can read the &lt;a class="reference external" href="https://github.com/philsquared/Catch/blob/master/docs/reference-index.md"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm really satisfied with this framework. It also can be used for Objective-C if
you are interested. You can download Catch &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want more examples, you can take a look at the &lt;a class="reference external" href="https://github.com/wichtounet/etl/tree/master/test"&gt;ETL&lt;/a&gt; tests that are all
made with Catch.&lt;/p&gt;
&lt;/div&gt;</description><guid>http://baptiste-wicht.com/posts/2014/07/catch-powerful-yet-simple-cpp-test-framework.html</guid><pubDate>Mon, 28 Jul 2014 11:21:49 GMT</pubDate></item><item><title>ETL - C++ library for vector and matrix computations</title><link>http://baptiste-wicht.com/posts/2014/07/etl-cpp-library-for-vector-and-matrix-computations.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;When working on Machine Learning algorithms, I was in need of a simple library
to ease working with vectors and matrix. This is the reason why I started
developing ETL (Expression Template Library).&lt;/p&gt;
&lt;p&gt;ETL is a small header only library for C++ that provides vector and matrix
classes with support for Expression Templates to perform very efficient
operations on them.&lt;/p&gt;
&lt;p&gt;The library supports statically sized and dynamically sized vector and matrix
structures with efficient element-wise operations. All the operations are
implemented lazily with Expression Templates, they are only implemented once the
expression is assigned to a concrete structure.&lt;/p&gt;
&lt;div class="section" id="data-structures"&gt;
&lt;h2&gt;Data structures&lt;/h2&gt;
&lt;p&gt;Several structures are available:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;fast_vector&amp;lt;T, Rows&amp;gt;&lt;/code&gt;: A vector of size Rows with elements of type T. This must
be used when you know the size of the vector at compile-time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dyn_vector&amp;lt;T&amp;gt;&lt;/code&gt;: A vector with element of type T. The size of the vector can be
set at runtime.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fast_matrix&amp;lt;T, Rows,Columns&amp;gt;&lt;/code&gt;: A matrix of size Rows x Columns with elements of
type T. This must be used when you know the size of the matrix at
compile-time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dyn_matrix&amp;lt;T&amp;gt;&lt;/code&gt;: A matrix with element of type T. The size of the matrix can be
set at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the structures are size-invariant, once set they cannot be grown or
shrinked.&lt;/p&gt;
&lt;p&gt;In every operations that involves fast version of the structures, all the sizes
are known at compile-time, this gives the compiler a lot of opportunities for
optimization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="element-wise-operations"&gt;
&lt;h2&gt;Element-wise operations&lt;/h2&gt;
&lt;p&gt;Classic element-wise operations can be done on vector and matrix as if it was
done on scalars. Matrices and vectors can also be added, subtracted, divided,
...  by scalars.&lt;/p&gt;
&lt;p&gt;Here is an example of what can be done:&lt;/p&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="n"&gt;etl&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dyn_vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;etl&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dyn_vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="n"&gt;etl&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dyn_vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;All the operations are only executed once the expression is evaluated to
construct the dyn_vector. No temporaries are involved. This is as efficient as
if a single for loop was used and each element was computed directly.&lt;/p&gt;
&lt;p&gt;You can easily assign the same value to a structure by using the operator = on
it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unary-operators"&gt;
&lt;h2&gt;Unary operators&lt;/h2&gt;
&lt;p&gt;Several unary operators are available. Each operation is performed on every
element of the vector or the matrix.&lt;/p&gt;
&lt;p&gt;Available operators:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sign&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max/min&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sigmoid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noise&lt;/code&gt;: Add standard normal noise to each element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logistic_noise&lt;/code&gt;: Add normal noise of mean zero and variance sigmoid(x) to each
element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;softplus&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bernoulli&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Several transformations are also available:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;hflip&lt;/code&gt;: Flip the vector or the matrix horizontally&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vflip&lt;/code&gt;: Flip the vector or the matrix vertically&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fflip&lt;/code&gt;: Flip the vector or the matrix horizontally and vertically. It is the
equivalent of &lt;code&gt;hflip(vflip(x))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dim/row/col&lt;/code&gt;: Return a vector representing a sub part of a matrix (a row or a
col)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reshape&lt;/code&gt;: Interpret a vector as a matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, all these operations are performed lazily, they are only executed when the
expression is assigned to something.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lazy-evaluation"&gt;
&lt;h2&gt;Lazy evaluation&lt;/h2&gt;
&lt;p&gt;All binary and unary operations are applied lazily, only when they are assigned
to a concrete vector or matrix class.&lt;/p&gt;
&lt;p&gt;The expression can be evaluated using the &lt;code&gt;s(x)&lt;/code&gt; function that returns a
concrete class (fast_vector,fast_matrix,dyn_vector,dyn_matrix) based on the
expression.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reduction"&gt;
&lt;h2&gt;Reduction&lt;/h2&gt;
&lt;p&gt;Several reduction functions are available:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sum: Return the sum of a vector or matrix&lt;/li&gt;
&lt;li&gt;mean: Return the sum of a vector or matrix&lt;/li&gt;
&lt;li&gt;dot: Return the dot product of two vector or matrices&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="functions"&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;The header &lt;em&gt;convolution.hpp&lt;/em&gt; provides several convolution operations both in 1D
(vector) and 2D (matrix). All the convolution are available in valid, full and
same versions.&lt;/p&gt;
&lt;p&gt;The header &lt;em&gt;mutiplication.hpp&lt;/em&gt; provides the matrix multiplication operation
(&lt;code&gt;mmult&lt;/code&gt;). For now on, only the naive algorithm is available. I'll
probably add support for Strassen algorithm in the near future.&lt;/p&gt;
&lt;p&gt;It is possible to pass an expression rather than an data structure to functions.
You have to keep in mind that expression are lazy, therefore if you pass a + b
to a matrix multiplication, an addition will be run each time an element is
accessed (n^3 times), therefore, it is rarely efficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="examples"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;Here are some examples of these operators (taken from my Machine Learning
Library):&lt;/p&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="n"&gt;h_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sigmoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_visible&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;h_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bernoulli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="n"&gt;h_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_visible&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;h_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ranged_noise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="n"&gt;exp_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_visible&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="n"&gt;h_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_visible&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;exp_sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;max_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;h_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="n"&gt;h_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;h_s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This library is available on Github: &lt;a class="reference external" href="https://github.com/wichtounet/etl"&gt;etl&lt;/a&gt;.
It is licensed under MIT license.&lt;/p&gt;
&lt;p&gt;It is header-only, therefore you don't have to build it. However, it uses some
recent C++14 stuff, you'll need a recent version of Clang or G++ to be able to
use it.&lt;/p&gt;
&lt;p&gt;If you find an issue or have an idea to improve it, just post it on Github or
as a comment here and I'll do my best to work on that. If you have any question
on the usage of the library, I'd be glad to answer them.&lt;/p&gt;
&lt;/div&gt;</description><category>C++11</category><category>C++14</category><category>C++</category><category>Libraries</category><guid>http://baptiste-wicht.com/posts/2014/07/etl-cpp-library-for-vector-and-matrix-computations.html</guid><pubDate>Fri, 25 Jul 2014 08:46:33 GMT</pubDate></item><item><title>A Mutt journey: Mutt configuration</title><link>http://baptiste-wicht.com/posts/2014/07/a-mutt-journey-my-mutt-configuration.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;If you've followed my Mutt posts, you'll know that I'm &lt;a class="reference external" href="http://baptiste-wicht.com/posts/2014/07/a-mutt-journey-filter-mails-with-imapfilter.html"&gt;filtering my mails with
imapfilter&lt;/a&gt; and
&lt;a class="reference external" href="http://baptiste-wicht.com/posts/2014/07/a-mutt-journey-download-mails-with-offlineimap.html"&gt;downloading them with offlineimap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post, I'll share my Mutt configuration. I'm not using Mutt directly, but
mutt-kz which is a fork with good notmuch integration. For this post, it won't
change anything.&lt;/p&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The complete configuration is made in the .muttrc file. Mutt configuration
supports the source command so that you can put some of your settings in another
files and source them from the .muttrc file. You'll see that the configuration
can soon grow large and therefore, splitting it in several files will save you a
lot of maintenance issues ;)&lt;/p&gt;
&lt;p&gt;First, let's tell Mutt who we are:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set from = "baptiste.wicht@gmail.com"
set realname = "Baptiste Wicht"
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="receive-mail"&gt;
&lt;h2&gt;Receive mail&lt;/h2&gt;
&lt;p&gt;As I'm using offlineimap to get my mails, there is no IMAP settings in my
configuration. But you need to tell Mutt where the mails are:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set folder = /data/oi/

set spoolfile = "+Gmail/INBOX"
set postponed = "+Gmail/drafts"

source ~/.mutt/mailboxes
&lt;/pre&gt;
&lt;p&gt;The spoolfile and postponed are specifying the inbox and draft mailboxes. The
.mutt/mailboxes file is generated by offlineimap.&lt;/p&gt;
&lt;p&gt;By default, Mutt will ask you to move read messages from INBOX to another
mailbox (set by mbox). I personally let my read messages in my inbox and move
them myself in a folder. For that, you have to disable the move:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set move = no
&lt;/pre&gt;
&lt;p&gt;If you move a mail from a mailbox to another, Mutt will ask for confirmation,
you can disable this confirmation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set confirmappend = no
&lt;/pre&gt;
&lt;p&gt;If you use Mutt, you want to read plaintext messages rather than monstruous
HTML. You can tell Mutt to always open text plain if any:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
alternative_order text/plain text/html
&lt;/pre&gt;
&lt;p&gt;If the mail has no text/plain part, you can manage to read HTML in Mutt in an
almost sane format. First, you need to tell Mutt to open html messages:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
auto_view text/html
&lt;/pre&gt;
&lt;p&gt;And then, you need to tell it how to open it. Mutt reads a mailcap file to know
how to open content. You can tell Mutt where it is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set mailcap_path = ~/.mailcap
&lt;/pre&gt;
&lt;p&gt;And then, you have to edit the .mailcap file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
text/html; w3m -I %{charset} -T text/html; copiousoutput;
&lt;/pre&gt;
&lt;p&gt;That will use w3m to output the message inside Mutt. It works quite well. You
can also use linx if you prefer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="send-mail"&gt;
&lt;h2&gt;Send mail&lt;/h2&gt;
&lt;p&gt;You need to indicate Mutt how to send mail:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set smtp_url = "smtp://baptistewicht@smtp.gmail.com:587/"
set smtp_pass = "SECRET"
&lt;/pre&gt;
&lt;p&gt;Some people prefer to use another SMTP client instead of Mutt builtin SMTP
support, you can also do that by setting sendmail to the mailer program.&lt;/p&gt;
&lt;p&gt;It is generally a good idea to enforce the charset of sent mail:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set send_charset="utf-8"
&lt;/pre&gt;
&lt;p&gt;You can choose another charset if you prefer ;)&lt;/p&gt;
&lt;p&gt;You need to configure vim to correctly handle mail editing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set editor='vim + -c "set textwidth=72" -c "set wrap" -c "set spell spelllang=en"'
&lt;/pre&gt;
&lt;p&gt;It sets the width of the text, enable wrap and configure spelling.&lt;/p&gt;
&lt;p&gt;By default, Mutt will ask you if you want to include the body of the message you
reply to in your answer and the reply subject. You can make that faster by using
these two lines:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set include=yes
set fast_reply
&lt;/pre&gt;
&lt;p&gt;Once mail are sent, they are copied in your outgoing mailbox. If you use GMail,
the STMP server already does that for you, therefore you should disable this
behavior:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set copy = no
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="appearance"&gt;
&lt;h2&gt;Appearance&lt;/h2&gt;
&lt;p&gt;Many things can also be configured in the appearance of Mutt. If you like the
threaded view of GMail, you want to configure Mutt in a similar way:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set sort = 'threads'
set sort_aux = 'reverse-last-date-received'
&lt;/pre&gt;
&lt;p&gt;It is not as good as the GMail view, but it does the job :)&lt;/p&gt;
&lt;p&gt;You can make reading mail more comfortable using smart wrapping:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set smart_wrap
&lt;/pre&gt;
&lt;p&gt;A mail has many many headers and you don't want to see them all:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ignore *
unignore From To Reply-To Cc Bcc Subject Date Organization X-Label X-Mailer User-Agent
&lt;/pre&gt;
&lt;p&gt;With that, you just configure which headers you're interested in.&lt;/p&gt;
&lt;p&gt;If you're using the sidebar patch (and you should be ;), you can configure the
sidebar:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set sidebar_visible = yes
set sidebar_width = 35
set sort_sidebar = desc

color sidebar_new yellow default
&lt;/pre&gt;
&lt;p&gt;It makes the sidebar always visible with a width of 35 and sort the mailboxes.
The last line makes yellow the mailboxes that have unread mails.&lt;/p&gt;
&lt;p&gt;The index_format allows you to set what will shown for every mail in the index
view:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set index_format = "%4C %Z %{%b %d} %-15.15L %?M?(#%03M)&amp;amp;(%4l)? %?y?{%.20y}? %?g?{%.20g} ?%s (%c)"
&lt;/pre&gt;
&lt;p&gt;This is a classical example that display the sender, the flags, the date, the
subject, the size of the mail and so on. You will need to look at the &lt;a class="reference external" href="http://www.mutt.org/doc/manual/manual-6.html"&gt;Reference&lt;/a&gt; to have more information on
what you can do with the format variables. There are plenty of information that
can be shown.&lt;/p&gt;
&lt;p&gt;You can also configure the text that is present on the status bar:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set status_chars  = " *%A"
set status_format = "───[ Folder: %f ]───[%r%m messages%?n? (%n new)?%?d? (%d to delete)?%?t? (%t tagged)? ]───%&amp;gt;─%?p?( %p postponed )?───"
&lt;/pre&gt;
&lt;p&gt;The example here displays the current folder, the number of mails in it with
some details on deleted and unread mails and finally the number of postponed
mail. Again, if you want more information, you can read the reference.&lt;/p&gt;
&lt;p&gt;You can configure Mutt so that the index view is always visible when you read
mails. For instance, to always show 8 mails in the index:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set pager_index_lines=8
&lt;/pre&gt;
&lt;p&gt;Another important thing you can configure is the colors of Mutt. I'm not gonna
cover everything, since Mutt is very powerful on this part. For instance, here
are some examples from my configuration:&lt;/p&gt;
&lt;p&gt;color index         red             white           "~v~(~F)!~N"                # collapsed thread with flagged, no unread
color index         yellow          white           "~v~(~F~N)"                 # collapsed thread with some unread &amp;amp; flagged
color index_subject brightred       default         "~z &amp;gt;100K"
color header        blue            default         "^(Subject)"&lt;/p&gt;
&lt;p&gt;Unless you are really wanting to spend time on this part, I recommend to pick an
existing theme. I took a Solarized theme &lt;a class="reference external" href="https://github.com/altercation/mutt-colors-solarized"&gt;here&lt;/a&gt;. It looks quite good
and works well. There other themes available, you'll surely find the one that
looks best for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bindings"&gt;
&lt;h2&gt;Bindings&lt;/h2&gt;
&lt;p&gt;Bindings are always very important. If like me, you're a vim aficionado, you'll
want your Mutt bindings to be as close as possible to vim. The default settings
are quite good, but not always close to vim.&lt;/p&gt;
&lt;p&gt;Something that is important to know when you configure Mutt bindings is that
they are relative to the current view open (index, pager,browser,attach, ...).
You can bind a keystroke to a different action in each view. You can also select
several views in which the keystroke is valid.&lt;/p&gt;
&lt;p&gt;If you are using the sidebar patch (and again, you should ;) ), you'll want to
configure fast bindings for it. Here are mine:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bind index,pager \Ck sidebar-prev
bind index,pager \Cj sidebar-next
bind index,pager \Cl sidebar-open
bind index,pager \Cn sidebar-scroll-up
bind index,pager \Cv sidebar-scroll-down
bind index,pager \Ct sidebar-toggle
&lt;/pre&gt;
&lt;p&gt;I use Ctrl+j,k to move inside the sidebar. I use Ctrl+l to open a folder and
Ctrl+n,v to scroll up and down. The last one is to toggle between multiple
sidebars for instance if you use notmuch.&lt;/p&gt;
&lt;p&gt;I find l very good to open messages in the index too:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bind index l display-message
bind index gg first-entry
bind index G last-entry
bind index h noop               # Disable h
&lt;/pre&gt;
&lt;p&gt;gg and G are used to go to the first and last element. Here I disabled h which
had a not often used command.&lt;/p&gt;
&lt;p&gt;The pager is the view where you read mail:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bind pager h exit
bind pager gg top
bind pager G bottom
bind pager J next-line
bind pager K previous-line
&lt;/pre&gt;
&lt;p&gt;In this view, I use h to get out of the pager, gg and G as usual. As I always
let the index open, I already use j and k to move in the index, so I chose J and
K to move in the pager.&lt;/p&gt;
&lt;p&gt;The browser is the view where you select folders for instance:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bind browser l select-entry
bind browser L view-file
bind browser gg first-entry
bind browser G last-entry
bind browser h exit
&lt;/pre&gt;
&lt;p&gt;Again, I use l and h to go back and forth and gg and G to go first and last. j
and k are already used here to go up and down.&lt;/p&gt;
&lt;p&gt;In the attach view:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bind attach h exit
bind attach e edit-type # Edit MIME Types
bind attach l view-attach
&lt;/pre&gt;
&lt;p&gt;I use h to exit and l to view an attachment.&lt;/p&gt;
&lt;p&gt;That is it for my bindings, but you configure a lot more of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is the end of this post. I have covered my complete Mutt configuration
here. My .muttrc is available &lt;a class="reference external" href="https://github.com/wichtounet/dotfiles/blob/master/.muttrc"&gt;online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have comments on my configuration, you're welcome to let a comment on
this post ;)&lt;/p&gt;
&lt;p&gt;In the next blog post about my "Mutt journey", I'll talk about notmuch and this
will likely be the last post on this series.&lt;/p&gt;
&lt;/div&gt;</description><category>Gentoo</category><category>Gmail</category><category>Linux</category><category>Mutt</category><guid>http://baptiste-wicht.com/posts/2014/07/a-mutt-journey-my-mutt-configuration.html</guid><pubDate>Tue, 22 Jul 2014 20:14:32 GMT</pubDate></item><item><title>pm 0.1.1 - A simple workspace manager for Git projects</title><link>http://baptiste-wicht.com/posts/2014/07/pm-011-a-simple-workspace-manager-for-git-projects.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;In the last month, I've developped a very simple tool in Python: &lt;em&gt;pm&lt;/em&gt;. This tool
allows to check the status of all the Git repositories inside a repository. I've
just released the first version of this tool: pm-0.1.1&lt;/p&gt;
&lt;p&gt;Those who are following this blog will perhaps wonder why Python and not C++ :)
The reason is quite simple, I wanted to improve my skills in Python. And what is
better than to develop a project from scratch.&lt;/p&gt;
&lt;div class="section" id="features"&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;p&gt;The main feature of this application is to show the status of every projects in
a directory. The status of your projects can be queried by using &lt;code&gt;pm
status&lt;/code&gt;. On my computer this gives something like that:&lt;/p&gt;
&lt;img alt="/images/pm_status.png" src="http://baptiste-wicht.com/images/pm_status.png"&gt;
&lt;p&gt;The state of each branch of each project is shown. There different possible
status (they are cumulative):
* Behind remote: Commits are available on the remote repository
* Ahead of remote: Some local commits are no pushed
* Diverged: Behind and Ahead
* Uncomitted changes: Some changes are not committed
* Clean: Indicates that everything is committed, pushed and pull.&lt;/p&gt;
&lt;p&gt;By default, the directory is ~/dev/ but you can change it by passing the
repository to the command, if you pass a relative directory, it will be relative
to home. For instance, here is the status of my doc repositories:&lt;/p&gt;
&lt;img alt="/images/pm_status_2.png" src="http://baptiste-wicht.com/images/pm_status_2.png"&gt;
&lt;p&gt;Another feature that can be useful is that it is able to check the status of
submodules with the -s option:&lt;/p&gt;
&lt;img alt="/images/pm_status_sm.png" src="http://baptiste-wicht.com/images/pm_status_sm.png"&gt;
&lt;p&gt;As you can see it supports recursive submodules. For each submodule it will
indicate if there are new commits available or not.&lt;/p&gt;
&lt;p&gt;pm is not only able to show status of the projects, it can also fetch the status
of branches from remote by using &lt;code&gt;pm fetch&lt;/code&gt;. All the remote branches are
fetched from remote. It can also automatically update the projects that are
behind remote (equivalent of git pull) with &lt;code&gt;pm update&lt;/code&gt;. Only projects
that can be fast-forwarded are updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;em&gt;pip&lt;/em&gt;, installation of pm is quite simple:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install pm
&lt;/pre&gt;
&lt;p&gt;If you don't want to use pip, you can install it by hand:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
wget https://github.com/wichtounet/pm/archive/0.1.1.tar.gz
tar xf 0.1.1.tar.gz
cd 0.1.1
python setup.py install
&lt;/pre&gt;
&lt;p&gt;For those interested, source code is available &lt;a class="reference external" href="https://github.com/wichtounet/pm"&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any suggestion for the tool or on the source code, post a comment to
this post ;)&lt;/p&gt;
&lt;/div&gt;</description><category>Git</category><category>Linux</category><category>Python</category><category>Releases</category><guid>http://baptiste-wicht.com/posts/2014/07/pm-011-a-simple-workspace-manager-for-git-projects.html</guid><pubDate>Sun, 20 Jul 2014 18:52:18 GMT</pubDate></item><item><title>A Mutt Journey: Download mails with offlineimap</title><link>http://baptiste-wicht.com/posts/2014/07/a-mutt-journey-download-mails-with-offlineimap.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;In the series of posts about Mutt, I recently presented how I was &lt;a class="reference external" href="http://baptiste-wicht.com/posts/2014/07/a-mutt-journey-filter-mails-with-imapfilter.html"&gt;filtering my email&lt;/a&gt;. In this
post, I'll show how I download my emails locally using offlineimap. This is the
perfect companion for Mutt.&lt;/p&gt;
&lt;p&gt;With Mutt, you can easily directly query an IMAP server and keep the views up to
date with it. There are a few problem with this approach:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First, you wont' be able to read your mails when you'are offline. It is
rarely an issue in these days, but it can be useful.&lt;/li&gt;
&lt;li&gt;Opening an IMAP folder with a large number of mails (&amp;gt;1000) can be quite
slow. I've several large folders and it was a pain opening them.&lt;/li&gt;
&lt;li&gt;When Mutt synchronizes with the state of the IMAP server, you'll encounter a
freeze. If you want to synchronize often, it is quite boring.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having your mails offline on your computers solves all these problems. Moreover,
it is also a good way to have a backup of your mails. I'm gonna talk here about
the usage for Mutt, but you can use offlineimap just for backup or for migration
reasons. The downside is that you have to store it locally. My mails takes
around 5GB on my computer.&lt;/p&gt;
&lt;p&gt;offlineimap is a very simple tool to synchronize emails from IMAP servers. It
only supports IMAP, but in those days it is not a limitation. The
synchronization is made both ways, it will upload your local changes to the IMAP
server. It is very powerful when paired with a MUA such as Mutt.&lt;/p&gt;
&lt;p&gt;To use offlineimap, you have to put your configuration in the ~/.offlineimaprc.
You can synchronize several accounts at once, in this post, we'll focus on one,
but the process is the same for several accounts. I'll focus on Gmail too, but
again it is the same with a bit different parameters for other mail accounts.&lt;/p&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;First, we have to declare the account:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[general]
accounts = Gmail

[Account Gmail]
localrepository = Gmail-Local
remoterepository = Gmail-Remote
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;accounts&lt;/strong&gt; is the list of accounts that we have, here only one. Then, in
account, repositories are just names of the repositories we'll declare now.&lt;/p&gt;
&lt;p&gt;The local repository has to be configured:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[Repository Gmail-Local]
type = Maildir
localfolders = /data/oi/Gmail/
sep = /
&lt;/pre&gt;
&lt;p&gt;The first important point is &lt;strong&gt;localfolders&lt;/strong&gt; that sets where the mail will be
put on your computer. &lt;strong&gt;sep&lt;/strong&gt; defines the separator used for nested IMAP
folders. I recommend / since Mutt will nest them automatically if / is used as
separator.&lt;/p&gt;
&lt;p&gt;Then, the remote repository has to be configured:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[Repository Gmail-Remote]
type = Gmail
remoteuser = USER
remotepass = PASSWORD
realdelete = no
folderfilter = lambda folder: folder not in ['[Gmail]/All Mail',
                                             '[Gmail]/Important',
                                             '[Gmail]/Starred',
                                             ]
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;remotepass&lt;/strong&gt; and &lt;strong&gt;remoteuser&lt;/strong&gt; are your user names and password. You can also
use &lt;strong&gt;remotepassfile&lt;/strong&gt; to read the password from a file. &lt;strong&gt;realdelete=no&lt;/strong&gt;
indicates that we only want to remove all the labels of deleted mails. For
Gmail, it means that the mail will still be in the All Mail folder. The last
line (sslcacertfile) is mandatory for recent versions of offlineimap. The
&lt;strong&gt;folderfilter&lt;/strong&gt; is a function that filters some folders. In my case, I do not
want to get the "All Mail", "Important" and "Starred" of my Gmail account
because it is only a duplicata of the mails in other labels. What is pretty cool
with offlineimap is that you can write Python directly in it for some of the
configuration options. Here is rule for filter is plain Python, so you can
complicated filtering if you want.&lt;/p&gt;
&lt;p&gt;Last, but not least, offlineimap can generates a list of mailboxes (one for each
folder in every account). It is pretty useful since Mutt can then read this file
and you'll find your mailboxes directly configured in Mutt :)&lt;/p&gt;
&lt;p&gt;This code will generate a file ~/.mutt/mailboxes that you can source in your
Mutt configuration and get the complete list of available mailboxes. This will
be kept up to date if you add new IMAP folders on the server for instance.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[mbnames]
enabled = yes
filename = ~/.mutt/mailboxes
header = "mailboxes "
peritem = "+%(accountname)s/%(foldername)s"
sep = " "
footer = "\n"
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="translate-names"&gt;
&lt;h2&gt;Translate names&lt;/h2&gt;
&lt;p&gt;You may have seen in the previous section some weird folder name like
"[Gmail]/All mail", this is how Gmail names folders that are not labels. This is
quite ugly and will create odd looking folders on your computer. You can
configure offlineimap to rename these names to better ones. For that, you'll
need to rule (in Python ;) ), one to translate from remote to local and one to
do the reverse.&lt;/p&gt;
&lt;p&gt;Here is what I did:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[Repository Gmail-Local]
nametrans = lambda folder: {'drafts':   '[Gmail]/Drafts',
                            'sent':     '[Gmail]/Sent Mail',
                            'important':'[Gmail]/Important',
                            'spam':     '[Gmail]/Spam',
                            'starred':  '[Gmail]/Starred',
                            'trash':    '[Gmail]/Trash',
                            'archive':  '[Gmail]/All Mail',
                            }.get(folder, folder)

[Repository Gmail-Remote]
nametrans = lambda folder: {'[Gmail]/Drafts':    'drafts',
                            '[Gmail]/Sent Mail': 'sent',
                            '[Gmail]/Starred':   'flagged',
                            '[Gmail]/Important':   'important',
                            '[Gmail]/Spam':   'spam',
                            '[Gmail]/Trash':     'trash',
                            '[Gmail]/All Mail':  'archive',
                            }.get(folder, folder)
&lt;/pre&gt;
&lt;p&gt;I simply renamed all "[Gmail]" folders into something more readable and that
makes more sense to me. It is not limited to special Gmail folders of course,
this can also be applied to rename a folder X into a folder Y in the same. As it
is Python, you can do sophisticated stuff if necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="speed-up-things"&gt;
&lt;h2&gt;Speed up things&lt;/h2&gt;
&lt;p&gt;If you happen to sync your mails often, you may want to speed things up. There
are several ways to do that.&lt;/p&gt;
&lt;p&gt;The first thing you can do is use several connections to the server. You can set
maxconnections to a number higher than 1 in the remote repository configuration.
I tested several values and for Gmail 2 was the fastest choice. You can try some
values with your server to see what value is good.&lt;/p&gt;
&lt;p&gt;Instead of plain old text files for the status of the mails, offlineimap can use
a sqlite backend. This is much faster since the complete file is not rewritten
for each update of the flags. For that behaviour, you have to set
&lt;strong&gt;status_backend = sqlite&lt;/strong&gt; in the Account configuration.&lt;/p&gt;
&lt;p&gt;Another thing you can do is reduce the I/O involved during sync by setting
general.fsync to false. With that, offlineimap won't have to wait for disk
operation completion after each operation.&lt;/p&gt;
&lt;p&gt;You can run offlineimap in quick mode with -q option. With this option, change
in flags of remote messages will not be updated locally. Changes on the local
side will be uploaded corectly. It is generally a good idea is to run
offlineimap in quick mode often (every X minutes) and run it in normal mode once
or twice a day.&lt;/p&gt;
&lt;p&gt;You can also specify which folder to sync with the -f option. Sometimes it is
enough to sync INBOX for instance. It may be much faster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now that you have fully configured offlineimap, you can make it run by hand or
in a cron job. I personally run it every 5 minutes, you can choose your
favourite frequency according to your workflow. I think I'll reduce the
frequency further, it is more comfortable to get mails only by batch and not
too much of them.&lt;/p&gt;
&lt;p&gt;If you're interested, you can take a look at &lt;a class="reference external" href="https://github.com/wichtounet/dotfiles/blob/master/.offlineimaprc"&gt;my .offlineimaprc configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want more information about this awesome tool, you can take a look at the
&lt;a class="reference external" href="http://docs.offlineimap.org/en/latest/"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is it for this part of this series. In the next post, I'll present my Mutt
configuration and how I use it.&lt;/p&gt;
&lt;/div&gt;</description><category>Gentoo</category><category>Gmail</category><category>Linux</category><category>Mutt</category><category>Python</category><guid>http://baptiste-wicht.com/posts/2014/07/a-mutt-journey-download-mails-with-offlineimap.html</guid><pubDate>Wed, 16 Jul 2014 17:54:40 GMT</pubDate></item></channel></rss>