<html><body><p>The title is not really clear but I didn't found a better one. The example will be clearer (I hope). In EDDI, I had this little function : 

[cpp]template&lt;typename Visitor, typename Visitable&gt;

void visit(Visitor&amp; visitor, Visitable&amp; visitable){
    visitor(visitable);
}[/cpp]

For the record, this function is only invoking a specific operator of a visitor. The problem was that I wanted this function to handle also non-void visitors. The visitor in question has a <strong>result_type</strong> typedef indicating the return type of the visit. The naive version cannot work : 

[cpp]template&lt;typename Visitor, typename Visitable&gt;

typename Visitor::result_type visit(Visitor&amp; visitor, Visitable&amp; visitable){
    return visitor(visitable);
}

template&lt;typename Visitor, typename Visitable&gt;

void visit(Visitor&amp; visitor, Visitable&amp; visitable){
    visitor(visitable);
}[/cpp]

The problem here is that there are ambiguities for overload resolution because the return type is not considered in this resolution. What we want is that the overload resolution does not consider the function returning something (the first one). And that's here that Boost can help, specifically the <strong>Boost enable_if</strong> library. This function allows to enable of disable some function template of function class based on a boolean condition. In our case, we want to disable the function is the return type is void. So, we will use the <strong>boost::disable_if</strong> template to disable it. This template has to parameter B and T. When B is true, the template is evaluated to T, otherwise there is an error used for SFINAE (Substitution failure is not an error) To test if the return type is void, we will use Boost type_traits, specifically the <strong>boost::is_void</strong> template. 

Here is the version using disable_if : 

[cpp]template&lt;typename Visitor, typename Visitable&gt;

typename boost::disable_if&lt;boost::is_void&lt;typename Visitor::result_type&gt;, typename Visitor::result_type&gt;::type

visit(Visitor&amp; visitor, Visitable&amp; visitable){
    return visitor(visitable);
}

template&lt;typename Visitor, typename Visitable&gt;

void visit(Visitor&amp; visitor, Visitable&amp; visitable){
    visitor(visitable);
}[/cpp]

With that, you can call the visitor with a void return type. However, it's not enough. Indeed, the call is still ambiguous when the return type is not void. So we have to enable the second function only if the return type is void : 

[cpp]template&lt;typename Visitor, typename Visitable&gt;

typename boost::disable_if&lt;boost::is_void&lt;typename Visitor::result_type&gt;, typename Visitor::result_type&gt;::type

visit(Visitor&amp; visitor, Visitable&amp; visitable){
    return visitor(visitable);
}

template&lt;typename Visitor, typename Visitable&gt;

typename boost::enable_if&lt;boost::is_void&lt;typename Visitor::result_type&gt;, typename Visitor::result_type&gt;::type

visit(Visitor&amp; visitor, Visitable&amp; visitable){
    visitor(visitable);
}[/cpp]

With that, you can call the function with both visitors and the good function will be chosen depending on the result type of the visitor. 

I hope this example of using Boost enable_if will help you when you face similar problems. </p></body></html>