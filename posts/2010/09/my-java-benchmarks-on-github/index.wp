I've created a new github repository for my <strong>Java Benchmarks</strong> : <a title="java-benchmarks github repository" href="http://github.com/wichtounet/java-benchmarks" target="_blank">java-benchmarks</a>

From now all my benchmarks will be pushed to this repository. This is more simple for me to manage and more secure also.

At this time, there is seven benchmarks on the repository :

<ol>
	<li>Closest Pair Search Benchmark : A benchmark to test two closest pair point search algorithms : the naive one and the <strong>sweeping plane</strong> one. <a title="Closest Pair Search Benchmark Results" href="http://www.baptiste-wicht.com/2010/04/closest-pair-of-point-plane-sweep-algorithm/" target="_blank">Results</a>.</li>
	<li>File Copy Benchmark : A benchmark on the different ways to make <strong>file copy</strong> in Java. <a title="Java File Copy Benchmark Results" href="http://www.baptiste-wicht.com/2010/08/file-copy-in-java-benchmark/" target="_blank">Results</a>.</li>
	<li>Iteration Remove Benchmark : A simple benchmark to test if it's interesting to remove the read elements from a list when we make several iterations over the list.</li>
	<li>Reflection Benchmark : A little benchmark to test the performances of <strong>reflection</strong> versus switch cases and direct invocations.</li>
	<li>Short Indexes Loop Benchmark : A benchmark to test which <strong>primitive type</strong> is the most performing using as iteration index. <a title="Short Indexes Loop Benchmark Results" href="http://www.baptiste-wicht.com/2010/01/dont-use-shorts-in-loop/" target="_blank">Results</a>.</li>
	<li>Synchronization Benchmark : A benchmark to test the performances of the different <strong>synchronization mechanisms</strong> available in Java to provide mutual exclusion. <a title="Synchronization Benchmark Results" href="http://www.baptiste-wicht.com/2010/09/java-synchronization-mutual-exclusion-benchmark/" target="_blank">Results</a>.</li>
	<li>Unmodifiable Benchmark : A benchmark to test the performances of <strong>unmodifiable collection</strong> versus creating a copy of the list.</li>
</ol>

I hope you'll find these sources interesting. If you found errors or improvements, don't hesitate to comment to tell me what.