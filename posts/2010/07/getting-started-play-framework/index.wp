It's time for me to test the <strong>Play Framework</strong> and I'll try to make some posts during my tests about this web framework. 

Play Framework is a framework to create web applications in Java. The main goals of this framework are (according to the official site) : 

</p><ul>
	<li><strong>Hot reload</strong> : You can edit your java files and html files and you just have to refresh the browser to see the results</li>
	<li><strong>Stateless model</strong> : Play is ready for REST, it can be scaled running multiple instances of the same applications on several servers</li>
	<li><strong>Efficient Template System</strong> : The template system is really easy to use, based on Groovy.</li>
	<li><strong>Resolve errors quickly</strong> : When an error occurs, Play displays directly the code source in the browser and the location of the error</li>
	<li><strong>Integration</strong> : Play provide integration for Hibernate, OpenID, MemCached and others popular frameworks</li>
	<li><strong>Pure Java</strong> : You make only Java and HTML, no other things to learn and easy integration in IDE. </li>
	<li><strong>Fast</strong> : The startup of application is really fast the rendering of the pages also very fast.</li>
</ul>

In this post, we'll see how to install the Play Framework and how to write our first Hello World. 

<!-- TEASER_END -->

<h3>Install Play Framework</h3>

Before installing Play Framework, you need Java 5.0 or later. Then, you can download a release of Play : http://download.playframework.org/releases/. The latest when I wrote this post is the 1.0.3 version. So let's download this version. After that, just unzip the given archive where you want to install the framework. After that, you just have to add the play command to the path. 

In Ubuntu 10.04, I had to do the following : 

<pre>PLAY_HOME=/usr/share/apps/play/

PATH=$PATH:$PLAY_HOME

chmod +x PLAY_HOME/play</pre>

Depending on your configuration, you perhaps have to use sudo for the chmod command. For other systems (Windows and Mac), you also have to add play (play.bat for Windows) to path using the system configuration. 

And normally, after that, you can execute the play command : 

<pre>wichtounet@Linux-Desktop:~$ play

~        _            _ 
~  _ __ | | __ _ _  _| |
~ | '_ \| |/ _' | || |_|
~ |  __/|_|\____|\__ (_)
~ |_|            |__/   

~ play! 1.0.3, http://www.playframework.org

~ Usage: play cmd [app_path] [--options]

~ with,  new      Create a new application
~        run      Run the application in the current shell
~        help     Show play help

wichtounet@Linux-Desktop:~$ </pre>

<h3>Creating a new application</h3>

To create a new application, you just have to use the command  

play new app_name

You must be in a folder where a folder with the name app_name can be created. For example, let's create a new application "hello" : 

<pre>wichtounet@Linux-Desktop:~/dev/play$ play new hello

~        _            _ 
~  _ __ | | __ _ _  _| |
~ | '_ \| |/ _' | || |_|
~ |  __/|_|\____|\__ (_)
~ |_|            |__/   
~
~ play! 1.0.3, http://www.playframework.org

~ The new application will be created in /home/wichtounet/dev/play/hello

~ What is the application name? Hello World

~ OK, the application is created.
~ Start it with : play run hello
~ Have fun!

wichtounet@Linux-Desktop:~/dev/play$ </pre>

During the creation, Play will ask you for the name of the application. Here I put "Hello World" as the name of the application. If you go into the new created application folder, you will see the given folders : 

<ul>
	<li><strong>app</strong> : The applications itself, Java classes and HTML files</li>
	<li><strong>conf</strong> : The configuration of the application</li>
	<li><strong>lib</strong> : Contains the Java libraries that the application needs</li>
	<li><strong>public</strong> : Contains the public files, images, CSS, JS</li>
	<li><strong>test</strong> : Contains the tests (JUnit or Selenium) file</li>
</ul>

You can launch your application, with the command : 

<pre>wichtounet@Linux-Desktop:~/dev/play$ play run hello

~        _            _ 
~  _ __ | | __ _ _  _| |
~ | '_ \| |/ _' | || |_|
~ |  __/|_|\____|\__ (_)
~ |_|            |__/   
~
~ play! 1.0.3, http://www.playframework.org

~ Ctrl+C to stop

Listening for transport dt_socket at address: 8000
17:49:56,395 INFO  ~ Starting /home/wichtounet/dev/play/hello
17:49:56,889 WARN  ~ You're running Play! in DEV mode
17:49:56,958 INFO  ~ Listening for HTTP on port 9000 (Waiting a first request to start) ...
17:50:01,670 INFO  ~ Application 'Hello World' is now started !</pre>

And you can browse your application at the URL http://localhost:9000/. You will normally see a sample page : 

<a href="/wp-content/uploads/2010/07/HelloWorld1.png"><img src="/wp-content/uploads/2010/07/HelloWorld1-300x295.png" alt="Play Framework sample page" title="Play Framework sample page" width="300" height="295" class="size-medium wp-image-668"></a>

<h3>How does it works ?</h3>

So now, let's study why this work. If you open the file conf/routes, you will see that line : 

<pre>GET     /                                       Application.index</pre>

That indicates that the index of the project will be serviced from the index method of the Application class. And if you open the app/controllers/Application.java file, you will see : 

```java
package controllers;

import play.mvc.*;

public class Application extends Controller {
    public static void index() {
        render();
    }
}
```

So at this time, the index() only renders the default template. This template is app/views/Application/index.html (like the name of the method and the class) : 

```html
#{extends 'main.html' /}
#{set title:'Home' /}
#{welcome /}
```

We can see that this template extends the main.html template. It sets the title to home and display the welcome prompt. These tags are tags from the Play Framework. Lets change this template to : 

```html
#{extends 'main.html' /}
#{set title:'Hello World' /}
<h3>Hello the world !</h3>
```

And refresh the application page. You will see now only the message "Hello the world". If you want to see something when the controllers is called, just add a System.out.println in the Application.index : 

```java
public static void index() {
    System.out.println("render()");
    render();
}
```

And you will see logs in the console when you refresh the pages : 

<pre>17:50:01,670 INFO  ~ Application 'Hello World' is now started !
render()
render()
render()
render()
render()</pre>

<h3>Add a simple new page</h3>

To do a little more in this post, let's add a new page : http://localhost:9000/bye. Let's start adding a new route in conf/routes : 

<pre>GET     /bye                                     Application.bye</pre>

So we have to add a method bye in the Application class : 

```java
package controllers;

import play.mvc.*;

public class Application extends Controller {
    public static void index() {
		render();
	}

    public static void bye() {
		render();
	}
}
```

And then, we just need to add a new template bye.html in app/views/Application/ folder : 

```html
#{extends 'main.html' /}
#{set title:'Bye' /}
<h3>Bye bye !</h3>
```

And now, if you go to http://localhost:9000/bye you will see our new page : 

<a href="/wp-content/uploads/2010/07/Bye.png"><img src="/wp-content/uploads/2010/07/Bye-300x76.png" alt="A Bye page in Play Framework" title="A Bye page in Play Framework" width="300" height="76" class="size-medium wp-image-670"></a>

<h3>Conclusion</h3>

Here we are ! With this framework, it's extremely easy to create web applications. And we've only see a very small part of the facilities this framework offers to create web applications. I'll try to write others posts on the subject.