2 days ago, Oracle pushed a first version of the closures implementation. We can see the evolving syntax in the test cases they made for the Java compiler. You can see these test cases <a href="http://hg.openjdk.java.net/lambda/lambda/langtools/file/7704dcd17e0b/test/tools/javac/lambda/" target="_blank">here</a>.

This revision supports the following features (copied from revision) :

<ul>
	<li>Function types syntax</li>
	<li>Function types subtyping</li>
	<li>Full support for lambda expression of type 1 and 2</li>
	<li>Inference of thrown types/return type in a lambda</li>
	<li>Lambda conversion using rules specified in v0.1.5 draft</li>
	<li>Support references to 'this' (both explicit and implicit)</li>
	<li>Translation using method handles</li>
</ul>

The function types aren't enabled by default, so you have to use  -XDallowFunctionTypes to enable it.

Here are some examples of lambda expression of type 1 taken from the test cases : 

```java
int i1 = #()(3).(); //i1 = 3
Integer i2 = #()(3).(); //i2 = 3
int i3 = #(int x)( x + 1 ).(3); //i3 = 4
int i4 = #(Number x)(x.intValue()).(new Float(3.0f)); //i4 = 3
```

And with type 2 : 

```java
int i1 = #(){ return 3; }.(); //i1 = 3
Integer i2 = #(){ return 3; }.(); //i2 = 3
int i3 = #(int x){ return x + 1; }.(3); //i3 = 4
int i4 = #(Number x){ return x.intValue(); }.(new Float(3.0f)); //i4 = 3
```

For those who didn't understand the syntax, #(int x)( x + 1 ) declares a lambda expression that takes a int and return this int plus 1. And the . (dot) is used to invoke the lambda expression. So #(int x)( x + 1 ).(3) declares the lambda expression and invoke it with 3 as parameter. 

This syntax is a little bit shocking, but I think we'll get used.