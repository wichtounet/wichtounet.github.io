<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Blog blog("Baptiste Wicht"); (Posts about Modular)</title><link>http://baptiste-wicht.com/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://baptiste-wicht.com/categories/modular.xml"></atom:link><language>en</language><lastBuildDate>Sun, 04 Jun 2017 20:17:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>JTheque Core 2.1.0 released !</title><link>http://baptiste-wicht.com/posts/2010/10/jtheque-core-2-1-0-released.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;It's my pleasure to announce that I've finally released &lt;strong&gt;JTheque Core 2.1.0&lt;/strong&gt; !&lt;/p&gt;
&lt;p&gt;The different services of the core are now separated using &lt;strong&gt;OSGi&lt;/strong&gt;. With this separation, I've improved a lot the design of the core and the orthogonality of the different services. Each service is now an OSGi bundle. I've also refactored the implementation of all services. Several services have been completely rewritten. The majority of the bundles are now thread-safe.&lt;/p&gt;
&lt;p&gt;Now, to create modules for a JTheque application, you have to write an OSGi bundle representing the module. Then, you only have to use Spring to launch the module. This is done using &lt;strong&gt;Spring Dynamic Modules&lt;/strong&gt;. The used OSGi container is &lt;strong&gt;Felix&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now that this version of the core is finalized, I'll updates the applications. First of all, JTheque Movies with the new version of the core.&lt;/p&gt;
&lt;p&gt;Fore more informations and to download JTheque Core, you can go on &lt;a href="http://www.jtheque.com/jtheque-core"&gt;the description page&lt;/a&gt;. If you want to try developing a module (or see how it is done), you can consult &lt;a href="http://www.jtheque.com/jtheque-core/guides/develop-modular-application-jtheque-core-2-1-0"&gt;this starter guide&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JTheque</category><category>Modular</category><category>OSGi</category><category>Releases</category><category>Spring</category><guid>http://baptiste-wicht.com/posts/2010/10/jtheque-core-2-1-0-released.html</guid><pubDate>Wed, 20 Oct 2010 05:12:33 GMT</pubDate></item><item><title>Modular Java – Book Review</title><link>http://baptiste-wicht.com/posts/2010/07/modular-java-book-review.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;Some weeks ago, I finished "Modular Java - Creating Flexible Applications With OSGi and Spring", it's time to do a little review now.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://baptiste-wicht.com/wp-content/uploads/2010/07/1934356409.01.LZZZZZZZ-e1278244106418.jpg"&gt;&lt;img class="size-full wp-image-690" title="Modular Java" src="http://baptiste-wicht.com/wp-content/uploads/2010/07/1934356409.01.LZZZZZZZ-e1278244106418.jpg" alt="Modular Java" width="150" height="182"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This book is an excellent introduction to the creation of modular applications in Java. It introduces all the main concepts of the OSGi technology, Spring Dynamic Modules and tools making easier the development of OSGi applications.&lt;/p&gt;
&lt;p&gt;The first chapter introduce the concept of modularity and explain how OSGi solve the problem. The main characteristics of the technology are also described.&lt;/p&gt;
&lt;p&gt;The next chapter lists the main OSGi containers and we create the first Hello World using OSGi. Next we improve this simple program using an OSGi service.&lt;/p&gt;
&lt;p&gt;After that the third chapter introduce the application "Dude, Where is my Jar ?". This application is a simple web program allowing a develop to search for a Jar file in Maven repositories. This application is used in all the next chapters. More than this introduction, the chapter also shows how the Pax tools can make easier the development of OSGi applications.&lt;/p&gt;
&lt;p&gt;In the next chapter, we create the first bundle of the application. With that bundle we see how to work with non-bundle dependencies. And in the next one, we create the services of the application and see how to publish and consume services.&lt;/p&gt;
&lt;p&gt;After that, it's time to use Spring Dynamic Modules with the next chapter. We see how to publish and consume services with Spring.&lt;/p&gt;
&lt;p&gt;In the seventh chapter, we develop the web bundle. Fort hat, we include Tomcat or Jetty in the form of OSGi Bundles. We also see the differences between a simple bundle (Jar) and a web bundle (War).&lt;/p&gt;
&lt;p&gt;In the next, we see how to extend OSGi bundle using fragment. With that, we see how to separate the JSP part of the application.&lt;/p&gt;
&lt;p&gt;The last two chapters are about the deployment in production of an OSGi application and the services offered by the OSGi standard (logging, admin, console, ...).&lt;/p&gt;
&lt;p&gt;In conclusion, this book will allows you to start developing application using OSGi. It's really comfortable to follow the development of a simple applications during the entire book. And improve it with each concept of the technology. But I think it's not a very good idea to use that log the Pax Tools. We quickly loose OSGi with Pax. It's quite interesting to know how to use Pax (I use it everyday), but when we start, it's better to see the basic concepts further.&lt;/p&gt;
&lt;p&gt;And more, the Maven output, is almost entirely displayed. This not really useful to see that every time when it's not errors, warning or important informations. But nevertheless, the reading of the book is really comfortable and fluid.&lt;/p&gt;&lt;/div&gt;</description><category>Books</category><category>Java</category><category>Modular</category><category>OSGi</category><guid>http://baptiste-wicht.com/posts/2010/07/modular-java-book-review.html</guid><pubDate>Thu, 08 Jul 2010 05:12:43 GMT</pubDate></item><item><title>Develop a modular application - The loading</title><link>http://baptiste-wicht.com/posts/2010/05/modular-application-loading-modules.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;Now that we've seen &lt;a href="http://www.baptiste-wicht.com/2010/05/develop-a-modular-application-implementation/"&gt;how to describe a module in Java&lt;/a&gt;, we'll see how to load it dynamically in our application.&lt;/p&gt;
&lt;p&gt;In Java, all the classes are loaded using several ClassLoader.In this article, we'll develop a loader for our modules and watch the problems that arrive when working with custom ClassLoaders.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/05/modular-application-loading-modules.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Conception</category><category>Java</category><category>Modular</category><guid>http://baptiste-wicht.com/posts/2010/05/modular-application-loading-modules.html</guid><pubDate>Fri, 14 May 2010 04:33:40 GMT</pubDate></item><item><title>Develop a modular application – Implementation</title><link>http://baptiste-wicht.com/posts/2010/05/develop-a-modular-application-implementation.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;Now that we saw in details &lt;a href="http://www.baptiste-wicht.com/2010/05/modular-application-modules/"&gt;the characteristics of the modules&lt;/a&gt;, we'll see how to implement a module.&lt;/p&gt;
&lt;p&gt;We need a simple container for our module to load it after with a loader from the modular application.&lt;/p&gt;
&lt;p&gt;In this post, we'll only see what will be a module in Java, we'll the loading of the modules in the next (and last) post.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/05/develop-a-modular-application-implementation.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Conception</category><category>Java</category><category>Modular</category><guid>http://baptiste-wicht.com/posts/2010/05/develop-a-modular-application-implementation.html</guid><pubDate>Wed, 12 May 2010 04:29:23 GMT</pubDate></item><item><title>Develop a modular application – The modules</title><link>http://baptiste-wicht.com/posts/2010/05/modular-application-modules.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;After &lt;a href="http://www.baptiste-wicht.com/2010/05/develop-a-modular-application-bases/"&gt;explaining what's a modular application&lt;/a&gt;, I'll now explain with more details the concept of modules.&lt;/p&gt;
&lt;p&gt;We said that a module add features to the application. But before writing any code, we've to define exactly what are the modules, what they can do if there is several types of modules, ...&lt;/p&gt;
&lt;p&gt;This is what we'll see in this post.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/05/modular-application-modules.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Conception</category><category>Java</category><category>Modular</category><guid>http://baptiste-wicht.com/posts/2010/05/modular-application-modules.html</guid><pubDate>Mon, 10 May 2010 04:24:29 GMT</pubDate></item><item><title>Develop a modular application – Bases</title><link>http://baptiste-wicht.com/posts/2010/05/develop-a-modular-application-bases.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;This is the first post of four posts about modular applications.&lt;/p&gt;
&lt;p&gt;I'll try to explain all the things we must think of when we develop a modular application. I'm developing a generic core for modular applications, JTheque. So what I'm saying in this posts are taken from my experience developing this framework. &lt;/p&gt;
&lt;p&gt;In this post, i'll start talking of the bases of the conception of modular application. So what's a modular application, a module and what give to the developer and the user to have a modular application ? In the next posts, I'll describe the problems we could found relating to modules and loading. The examples will be in Java, but all the concepts can be applied to every language. I'll not talk about OSGi, this is more an introduction to modular programming without specific framework, but of course, OSGi is a very good solution to modular programming.&lt;/p&gt;
&lt;p&gt;Of course, I don't think i'm a professional in modular programming and what I'll say in this post, is nothing else than my point of view. If you think there is better solutions than what I present, don't hesitate to say that in comments.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/05/develop-a-modular-application-bases.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Conception</category><category>Java</category><category>Modular</category><guid>http://baptiste-wicht.com/posts/2010/05/develop-a-modular-application-bases.html</guid><pubDate>Thu, 06 May 2010 04:28:38 GMT</pubDate></item><item><title>JTheque is going to OSGi</title><link>http://baptiste-wicht.com/posts/2010/03/jtheque-is-going-to-osgi.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;Just a little post to inform you that i'm currently migrating JTheque Core to OSGI / Spring Dynamic Modules. The core will be fractioned into several bundles. The JTheque Modules will also be OSGi bundles.&lt;/p&gt;
&lt;p&gt;It will increase the modularity of the different services of the Core. And it will also be a more standard way to develop modules. And last but not least, it's an opportunity for me to learn OSGi and Spring Dm.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JTheque</category><category>Modular</category><category>OSGi</category><category>Spring</category><guid>http://baptiste-wicht.com/posts/2010/03/jtheque-is-going-to-osgi.html</guid><pubDate>Tue, 02 Mar 2010 12:35:52 GMT</pubDate></item><item><title>Develop a modular application with JTheque Core 2.0.3</title><link>http://baptiste-wicht.com/posts/2010/02/modular-application-jtheque-core-2-0-3.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;h4&gt;1. Introduction&lt;/h4&gt;

&lt;p&gt;This article will teach you how to develop a first application with JTheque Core.&lt;/p&gt;
&lt;p&gt;We will develop a basic modular application, like an hello world. This little program will be composed of :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;A JTheque application&lt;/li&gt;
    &lt;li&gt;A JTheque module who display an Hello World on the main view&lt;/li&gt;
    &lt;li&gt;A module who will add an option menu to display one more time "Hello World"&lt;/li&gt;
&lt;/ul&gt;

&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/02/modular-application-jtheque-core-2-0-3.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Conception</category><category>Java</category><category>JTheque</category><category>Modular</category><guid>http://baptiste-wicht.com/posts/2010/02/modular-application-jtheque-core-2-0-3.html</guid><pubDate>Sun, 07 Feb 2010 04:38:45 GMT</pubDate></item></channel></rss>