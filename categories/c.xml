<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>@Blog("Baptiste Wicht") (C++)</title><link>http://wichtounet.github.io/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://wichtounet.github.io/categories/c.xml"></atom:link><language>en</language><lastBuildDate>Mon, 17 Mar 2014 17:44:44 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>budgetwarrior 0.3.0 - Objective and wish management</title><link>http://wichtounet.github.io/posts/2014/02/budgetwarrior-0-3-0-objective-wish-management.html</link><description>&lt;div&gt;&lt;p&gt;Hi, &lt;/p&gt;
&lt;p&gt;I'm pleased to announce the release of another budgetwarrior release, the version 0.3.0.&lt;/p&gt;
&lt;h3&gt;Changes&lt;/h3&gt;
&lt;p&gt;This version contains several important changes.&lt;/p&gt;
&lt;p&gt;The first one is the addition of a new module to manage objectives. You can add objective with &lt;em&gt;budget objective add). &lt;/em&gt;For instance, you can add an objective saying you want to save 10000$ a year or 200$ a month. When you set your objectives, budget warrior computes how well you complete them. For instance, here is the status of my objectives:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113057-e1391337197470.png"&gt;&lt;img alt="Objective Status" src="http://wichtounet.github.io/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113057-e1391337197470-300x83.png" title="Objective Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another module has been added to manage wishes. You can add wishes to budgetwarrrior (&lt;em&gt;budget wish add&lt;/em&gt;) and then budgetwarrior will tell you if it is a good time to buy them. Here is an example of wish status:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113814.png"&gt;&lt;img class="size-medium wp-image-2665" alt="Wish Status" src="http://wichtounet.github.io/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113814-e1391337576857-300x96.png" width="300" height="96"&gt;&lt;/a&gt; Wish Status&lt;/p&gt;
&lt;p&gt;The diagnostics tells you where the money will be taken: On savings, on year savings or on month savings (ideal case). It also checks the objectives to see if the payment doesn't break the fulfillment of some of them.&lt;/p&gt;
&lt;p&gt;For complete diagnostics, it is necessary to you register your fortune (&lt;em&gt;budget fortune check&lt;/em&gt;), ideally once a month.&lt;/p&gt;
&lt;p&gt;Of course, this is only a tool, you should not only use that to decide when to buy something, but it may have a good point of view ;)&lt;/p&gt;
&lt;p&gt;Moreover, the version also have other smaller changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you make an error when creating a new item (expense, earning, ...), the tool now lets you retry without losing what you typed before.&lt;/li&gt;
&lt;li&gt;Confirmation messages are now shown after each modification command (delete, add and edit).&lt;/li&gt;
&lt;li&gt;The license has been changed from Boost to MIT. The sense is almost the same, but the MIT is more well known and I thought it would be easier for people to know what this means.&lt;/li&gt;
&lt;li&gt;There have several changes to the code base, but that doesn't impact the usage of the tool.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;I hope you'll found these changes interesting :)&lt;/p&gt;
&lt;p&gt;If you are interested by the tool, you can download it on Github: &lt;a title="budgetwarrior repository" href="https://github.com/wichtounet/budgetwarrior"&gt;budgetwarrior&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is now Gentoo and Arch Linux installation packages available for ease of installation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have a suggestion or you found a bug, please post an issue on the github project: &lt;a title="https://github.com/wichtounet/budgetwarrior" href="https://github.com/wichtounet/budgetwarrior"&gt;https://github.com/wichtounet/budgetwarrior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any comment, don't hesitate to contact me, either by letting a comment on this post or by email.&lt;/p&gt;&lt;/div&gt;</description><category>budgetwarrior</category><category>C++</category><category>C++</category><category>Linux</category><category>Linux</category><category>projects</category><guid>http://wichtounet.github.io/posts/2014/02/budgetwarrior-0-3-0-objective-wish-management.html</guid><pubDate>Mon, 03 Feb 2014 09:21:29 GMT</pubDate></item><item><title>Thor OS: Boot Process</title><link>http://wichtounet.github.io/posts/2013/12/thor-os-boot-process.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Some time ago, I started a hobby project: &lt;a title="New hobby project: Thor-OS, 64bit Operating System in C++" href="http://www.baptiste-wicht.com/2013/12/new-hobby-project-thor-os-64bit-operating-system-c/"&gt;writing a new operating system&lt;/a&gt;. I'm not trying to create a concurrent to Linux, I'm just trying to learn some more stuff about operating systems. I'm gonna try to write some posts about this kernel on this blog.&lt;/p&gt;
&lt;p&gt;In this post, I'll describe the boot process I've written for this operating system.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Bootloader Step&lt;/h3&gt;
&lt;p&gt;The first step is of course the bootloader. The bootloader is in the MBR and is loaded by the system at 0x7C00.&lt;/p&gt;
&lt;p&gt;I'm doing the bootloading in two stages. The first stage (one sector) print some messages and then load the second stage (one sector) from floppy at 0x900. The goal of doing it in two stages is just to be able to overwrite the bootloader memory by the stage. The second stage loads the kernel into memory from floppy. The kernel is loaded at 0x1000 and then run directly.&lt;/p&gt;
&lt;p&gt;The bootloader stages are written in assembly.&lt;/p&gt;
&lt;h3&gt;Real mode&lt;/h3&gt;

&lt;p&gt;When the processor, it boots in real mode (16 bits) and you have to setup plenty of things before you can go into long mode (64 bits). So the first steps of the kernel are running in 16 bits. The kernel is mostly written in C++ with some inline assembly.&lt;/p&gt;
&lt;p&gt;Here are all the things that are done in this mode:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;The memory is inspected using BIOS E820 function. It is necessary to do that at this point since BIOS function calls are not available after going to protected mode. This function gives a map of the available memory. The map is used later by the dynamic memory allocator.&lt;/li&gt;
    &lt;li&gt;The interrupts are disabled and a fake Interrupt Descriptor Table is configured to make sure no interrupt are thrown in protected mode&lt;/li&gt;
    &lt;li&gt;The Global Descriptor Table is setup. This table describes the different portion of the memory and what each process can do with each portion of the memory. I have three descriptors: a 32bit code segment, a data segment and a 64bit code segment.&lt;/li&gt;
    &lt;li&gt;Protected mode is activated by setting PE bit of CR0 control register.&lt;/li&gt;
    &lt;li&gt;Disable paging&lt;/li&gt;
    &lt;li&gt;Jump to the next step. It is necessary to use a far jump so that the code segment is changed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Protected Mode&lt;/h3&gt;

&lt;p&gt;At this point, the processor is running in protected mode (32 bits). BIOS interrupts are not available anymore.&lt;/p&gt;
&lt;p&gt;Again, several steps are necessary:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;To be able to use all memory, Physical Address Extensions are activated.&lt;/li&gt;
    &lt;li&gt;Long Mode is enabled by setting the EFER.LME bit.&lt;/li&gt;
    &lt;li&gt;Paging is setup, the first MiB of memory is mapped to the exact same virtual addresses.&lt;/li&gt;
    &lt;li&gt;The address of the Page-Map Level 4 Table is set in the CR0 register.&lt;/li&gt;
    &lt;li&gt;Finally paging is activated.&lt;/li&gt;
    &lt;li&gt;Jump to the real mode kernel, again by using a far jump to change code segment.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Real Mode&lt;/h3&gt;

&lt;p&gt;The kernel finally runs in 64 bits.&lt;/p&gt;
&lt;p&gt;There are still some initialization steps that needs to be done:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;SSE extensions are enabled.&lt;/li&gt;
    &lt;li&gt;The final Interrupt Descriptor Table is setup.&lt;/li&gt;
    &lt;li&gt;ISRs are created for each possible processor exception&lt;/li&gt;
    &lt;li&gt;The IRQs are installed in the IDT&lt;/li&gt;
    &lt;li&gt;Interrupts are enabled&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, is kernel is fully loaded and starts initialization stuff like loading drivers, preparing memory, setting up timers...&lt;/p&gt;
&lt;p&gt;If you want more information about this process, you can read the different source files involved (stage1.asm, stage2.asm, boot_16.cpp, boot_32.cpp and kernel.cpp) and if you have any question, you can comment on this post.&lt;/p&gt;&lt;/div&gt;</description><category>Assembly</category><category>C++</category><category>Operating Systems</category><category>osdev</category><category>thor</category><guid>http://wichtounet.github.io/posts/2013/12/thor-os-boot-process.html</guid><pubDate>Mon, 23 Dec 2013 09:18:01 GMT</pubDate></item><item><title>New hobby project: Thor-OS, 64bit Operating System in C++</title><link>http://wichtounet.github.io/posts/2013/12/new-hobby-project-thor-os-64bit-operating-system-c.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;It's been a long time since I haven't posted on this blog about a project. A bit more than two months ago, I started a new project: thor-os&lt;/p&gt;
&lt;p&gt;This project is a simple 64bit operating system, written in C++. After having written a compiler, I decided it could be fun to try with an operating system. And it is fun indeed :) It is a really exciting project and there are plenty of things to do in every directions.&lt;/p&gt;
&lt;p&gt;I've also written the bootloader myself, but it is a very simple one. It just reads the kernel from the floppy. loads it in memory and then jumps to it and nothing else.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Features&lt;/h4&gt;
&lt;p&gt;Right now, the project is fairly modest. Here are the features of the kernel:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Serial Text Console&lt;/li&gt;
    &lt;li&gt;Keyboard driver&lt;/li&gt;
    &lt;li&gt;Timer driver (PIT)&lt;/li&gt;
    &lt;li&gt;Dynamic Memory Allocation&lt;/li&gt;
    &lt;li&gt;ATA driver&lt;/li&gt;
    &lt;li&gt;FAT32 driver (Work In progress)&lt;/li&gt;
    &lt;li&gt;Draft of an ACPI support (only for shutdown)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the commands are accessible with a simple shell integrated directly in the kernel.&lt;/p&gt;
&lt;h4&gt;Testing&lt;/h4&gt;

&lt;p&gt;All the testing is made in Bochs and Qemu. I don't have any other computer available to test in real right now but that is something I really want to do. But for now, my bootloader only supports floppy, so it will need to be improved to load the kernel from a disk, since it is not likely that I will have a floppy disk to test :D&lt;/p&gt;
&lt;p&gt;Here is a screenshot of the OS in action:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2013/12/Screenshot-from-2013-12-17-085810-e1387267703665.png"&gt;&lt;img class="size-medium wp-image-2628" alt="Thor OS Screenshot" src="http://wichtounet.github.io/wp-content/uploads/2013/12/Screenshot-from-2013-12-17-085810-e1387267703665-300x204.png" width="300" height="204"&gt;&lt;/a&gt; Thor OS Screenshot&lt;/p&gt;
&lt;h4&gt;Future&lt;/h4&gt;

&lt;p&gt;The next thing that I will improve is the FAT32 driver to have a complete implementation including creating and writing to files.&lt;/p&gt;
&lt;p&gt;After that, I still don't know whether I will try to implement a simple Framebuffer or start implement user space.&lt;/p&gt;
&lt;p&gt;As for all my projects, you can find the complete source code on Github: https://github.com/wichtounet/thor-os&lt;/p&gt;
&lt;p&gt;Don't hesitate to comment if you have any question or suggestion for this project ;) I will try to write some posts about it on the future, again if you have idea of subject for these posts, don't hesitate. The first will probably be about the boot process.&lt;/p&gt;&lt;/div&gt;</description><category>Assembly</category><category>C++</category><category>Operating Systems</category><category>osdev</category><category>thor</category><guid>http://wichtounet.github.io/posts/2013/12/new-hobby-project-thor-os-64bit-operating-system-c.html</guid><pubDate>Tue, 17 Dec 2013 03:20:16 GMT</pubDate></item><item><title>budgetwarrior 0.2 - Visual reports, fortune status and expenses aggregates</title><link>http://wichtounet.github.io/posts/2013/10/budgetwarrior-0-2-visual-reports-fortune-status-expenses-aggregates.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I've released a new version of budgetwarrior the version 0.2.&lt;/p&gt;
&lt;p&gt;I've several new features to the tool. First, I've added a graph of the expenses/earnings/balances of each month for a given year in the form of a bar plot. You can see an example in practice here:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2013/10/Screenshot-from-2013-10-25-215839.png"&gt;&lt;img class="size-medium wp-image-2617" alt="budgetwarrior monthly report" src="http://wichtounet.github.io/wp-content/uploads/2013/10/Screenshot-from-2013-10-25-215839-300x266.png" width="300" height="266"&gt;&lt;/a&gt; budgetwarrior monthly report&lt;/p&gt;
&lt;p&gt;Nothing fancy, but it gives a good overview of the current state of your budget.&lt;/p&gt;
&lt;p&gt;I've added a new module, called fortune, that lets you enter your total fortune and then computes the difference between the entered fortune statuses. For now, it doesn't do anything else with this data. But in the future, I want to correlate this data with the balances to check the difference between the filled expenses and earnings and the fortune evolution.&lt;/p&gt;
&lt;p&gt;I've also added a more convenient way of creating expenses and earnings. Just type "budget expense add" and you'll be able to fill all the fields one by one. Of course, the command line commands are still available.&lt;/p&gt;
&lt;p&gt;The last new feature I've added is an aggregate report (budget overview aggregate). This view simply groups all the expenses with the same name of a year together. If you always use the same expense title for your groceries, you'll see the total you spent in groceries for a year. You can also name your expenses with the format "Category/Expenses" and all the expenses with the same category will be grouped together in the aggregate view. That allows you to still have enough details in the monthly overview but to logically groups your expenses together in the aggregate view.&lt;/p&gt;
&lt;p&gt;The other changes are minor. I've improved the monthly overview to sort the expenses and earnings by date. To facilitate the storage of the files in a service like Dropbox, the data and configuration files are now only written if they have been modified. The mean in the current overview has been changed to reflect only the months up to the current month and not the future (which was just ruining the means).&lt;/p&gt;
&lt;p&gt;If you are interested by the tool, you can download it on Github: &lt;a title="budgetwarrior repository" href="https://github.com/wichtounet/budgetwarrior"&gt;budgetwarrior&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope this tool will be useful to some people. If you've any question, just let a comment on this post or contact me directly by email. I'll be glad to help.&lt;/p&gt;&lt;/div&gt;</description><category>budgetwarrior</category><category>C++</category><category>Others</category><category>projects</category><guid>http://wichtounet.github.io/posts/2013/10/budgetwarrior-0-2-visual-reports-fortune-status-expenses-aggregates.html</guid><pubDate>Fri, 25 Oct 2013 16:10:50 GMT</pubDate></item><item><title>budgetwarrior 0.1.0 - command-line personal budgeting tool</title><link>http://wichtounet.github.io/posts/2013/08/budgetwarrior-command-line-personal-budgeting.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Being bored by using Google spreadsheets for my personal budgeting, I decided to write an application to do that. Being a huge fan of taskwarrior, I decided to write a kind of similar application for my personal budget, budgetwarrior was born. I use it since two months and I thought that it could be useful for other persons. The application is developed in C++. More information is available on Github: &lt;a title="https://github.com/wichtounet/budgetwarrior" href="https://github.com/wichtounet/budgetwarrior"&gt;https://github.com/wichtounet/budgetwarrior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;budgetwarrior 0.1.0 is a command-line only tool. It works on this principle: you create a set of accounts with a certain limit and then you declare your expenses in each of these accounts. You can also manage earnings that are not each month in each account. You can also keeps track of your debts via this application. It also supports automatic creation of recurring expenses, for instance when you pay the rent (for now, only monthly expenses are supported).&lt;/p&gt;
&lt;p&gt;Once you've put all your data in the application, it provides you report on the state of your budget by month or by year. For instance, here is my current monthly report:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2013/08/Screenshot-from-2013-08-23-145358.png"&gt;&lt;img class="size-medium wp-image-2601" title="Monthly Report" alt="Monthly Report" src="http://wichtounet.github.io/wp-content/uploads/2013/08/Screenshot-from-2013-08-23-145358-300x95.png" width="300" height="95"&gt;&lt;/a&gt; Monthly Report&lt;/p&gt;
&lt;p&gt;You can see directly which accounts are in a good shape and which are not.&lt;/p&gt;
&lt;p&gt;Here is the current yearly report:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2013/08/Screenshot-from-2013-08-23-145911.png"&gt;&lt;img class="size-medium wp-image-2602" alt="Yearly report" src="http://wichtounet.github.io/wp-content/uploads/2013/08/Screenshot-from-2013-08-23-145911-300x252.png" width="300" height="252"&gt;&lt;/a&gt; Yearly report&lt;/p&gt;
&lt;p&gt;In this view, you can see directly how your accounts evolve during the year and where are your biggest expenses and earnings.&lt;/p&gt;
&lt;p&gt;As everything is displayed horizontally, the more accounts you have the larger the view become. With the 7 accounts I have, it takes about 1600 pixels of width to display it. I will try to improve that in the future if some people are interested in making it work on smaller screens.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;You can install budgetwarrior directly from the sources:&lt;/p&gt;
&lt;p&gt;[code]git clone -b master git://github.com/wichtounet/budgetwarrior.git&lt;/p&gt;
&lt;p&gt;cd budgetwarrior&lt;/p&gt;
&lt;p&gt;cmake .&lt;/p&gt;
&lt;p&gt;make&lt;/p&gt;
&lt;p&gt;sudo make install[/code]&lt;/p&gt;
&lt;p&gt;After that, you can use budgetwarrior by using the command &lt;em&gt;budget&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The usage is fairly simple, you can use &lt;em&gt;budget help&lt;/em&gt; to have the list of the commands that you have to use to create expenses and earnings and display overviews.&lt;/p&gt;
&lt;h4&gt;The project&lt;/h4&gt;

&lt;p&gt;If you have any question on the project, don't hesitate to contact me or to post a comment to this post. If there are people interested, I can write a more complete help.&lt;/p&gt;
&lt;p&gt;If you have a suggestion or you found a bug, please post an issue on the github project: &lt;a title="https://github.com/wichtounet/budgetwarrior" href="https://github.com/wichtounet/budgetwarrior"&gt;https://github.com/wichtounet/budgetwarrior&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>budgetwarrior</category><category>C++</category><category>C++</category><category>projects</category><guid>http://wichtounet.github.io/posts/2013/08/budgetwarrior-command-line-personal-budgeting.html</guid><pubDate>Mon, 26 Aug 2013 08:41:03 GMT</pubDate></item><item><title>Some news</title><link>http://wichtounet.github.io/posts/2013/06/some-news.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;No, I'm not dead ;)&lt;/p&gt;
&lt;p&gt;After having finished my Master thesis in March, I took a break from my personal projects including this project. I then started a job in my school, waiting for a Ph.D thesis. I'm now working on a very interesting Machine Learning project about Speech, unfortunately in Java ;)&lt;/p&gt;
&lt;p&gt;I just started again working on eddic this week. I'm gonna try to improve as much as possible the performances of the parser. I will also try to post again some articles on this blog, although I don't know about what. &lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>EDDI</category><category>Java</category><category>Machine Learning</category><category>Others</category><guid>http://wichtounet.github.io/posts/2013/06/some-news.html</guid><pubDate>Tue, 04 Jun 2013 23:52:24 GMT</pubDate></item><item><title>eddic 1.2.0 - Single inheritance, copy construction</title><link>http://wichtounet.github.io/posts/2012/12/eddic-1-2-0-single-inheritance-copy-constructor.html</link><description>&lt;div&gt;&lt;p&gt;I'm happy to release the &lt;strong&gt;version 1.2.0 of the EDDI Compiler (eddic)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This new version introduces several major changes to the language. &lt;/p&gt;
&lt;p&gt;First of all, structures can now inherits from another structure. When it is done, the structure can use the members of the parent class. Below is an example of single inheritance in EDDI: &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init_a&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;55.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;test_a&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init_b&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;init_a&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;test_b&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;test_a&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For now, the support remains basic, but it will be improved over time. I will probably add support for virtual functions in the future. &lt;/p&gt;
&lt;p&gt;Another major improvement to the language is that variable of a custom type can now be assignment, resulting in a call to the copy constructor. If no copy constructor is defined in a structure, it is automatically generated by the compiler. Another improvement to structures is that structures can now contains arrays. Moreover, the members of a structure (fields, constructors, functions, ...) can now be present in any order. &lt;/p&gt;
&lt;p&gt;A major change has been made to pointers. The conversions from variables to pointers is no more implicit, it is necessary to use the new &amp;amp; operator to take the address of a variable. I found that this implicit conversions was not really making any sense.&lt;/p&gt;
&lt;p&gt;A function can now return a structure by value. And, member functions can be called from any valid left value. For instance: &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is now valid code.  &lt;/p&gt;
&lt;p&gt;Finally, the switch construct can be used with strings too. This uses the str_equals functions to test which case is valid. &lt;/p&gt;
&lt;p&gt;There are no big changes in the optimization engine. A new optimization pass has been added performing loop unrolling for loop with known iteration count. The pointer propagation has been fixed to handle pointers on structures resulting in much better code for several samples. The last improvement here is that conditions can be propagated into branches when necessary. &lt;/p&gt;
&lt;p&gt;The loop analysis has been improved to directly calculate the number of iterations of each loop and store this result. The list of induction variables is only calculated once now. &lt;/p&gt;
&lt;p&gt;The code generation has been slightly improved by saving fewer registers when calling another function. &lt;/p&gt;
&lt;p&gt;Finally, there are also some internal changes. The template instantiation depth limit can now configured. Before, infinite template recursion would just fail. The time spent in each optimization can now be computed with the new --timing option. There have been great improvements on the side of the Abstract Syntax Tree. A good part of the expression grammar has been rewritten. With these changes, the grammar is much more powerful than before. &lt;/p&gt;
&lt;p&gt;Don't hesitate to comment or to contact me if you have any suggestion (or other) about this release or for the future versions of eddic. &lt;/p&gt;
&lt;p&gt;I'd also like to thank &lt;a href="https://github.com/TyRoXx" title="TyRoXx"&gt;TyRoXx&lt;/a&gt; who has made some improvements in the assembly generation module. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Future Work&lt;/h4&gt;
&lt;p&gt;The next version of the EDDI compiler (eddic) will be the version 1.2.1. This version will specifically focus on two points. First the usage of strings will be improved with a string class adding features to literal string. The second point will be the performances of the compiler. At this point, the optimization engine is clearly too slow. I will try to make it faster. The list of issues is available &lt;a href="https://github.com/wichtounet/eddic/issues?milestone=2&amp;amp;state=open" title="eddic version 1.2.1"&gt;on Github&lt;/a&gt;.  &lt;/p&gt;
&lt;h4&gt;Download&lt;/h4&gt;

&lt;p&gt;You can find the EDDI Compiler sources on the Github repository: &lt;a title="Github repository of eddic" href="https://github.com/wichtounet/eddic"&gt;https://github.com/wichtounet/eddic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The version is available in the &lt;em&gt;v1.2.0&lt;/em&gt; tag available in the GitHub or directly in the &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Compilers</category><category>EDDI</category><category>EDDI</category><category>Releases</category><guid>http://wichtounet.github.io/posts/2012/12/eddic-1-2-0-single-inheritance-copy-constructor.html</guid><pubDate>Mon, 17 Dec 2012 09:20:10 GMT</pubDate></item><item><title>C++ Benchmark - std::list VS boost::intrusive::list</title><link>http://wichtounet.github.io/posts/2012/12/cpp-benchmark-std-list-boost-intrusive-list.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Recently, we saw that the &lt;a title="C++ benchmark – std::vector VS std::list VS std::deque" href="http://www.baptiste-wicht.com/2012/12/cpp-benchmark-vector-list-deque/"&gt;std::list performance was not really good&lt;/a&gt; when it comes to searching it or iterating through it.In this post, we will see an alternative to the std::list: the boost::intrusive::list from the Boost C++ libraries. It is not a well known library but it can be useful in some specific cases. I will focus on how this implementation performs compared to an std::list.&lt;/p&gt;
&lt;p&gt;An intrusive list does not store copies of the object but the objects itself. Because it stores the objects, it is necessary to add information to the object data structure directly to link them together, that is why it is called an intrusive list. This has a big advantage, the list does not have to allocate any memory at all to insert objects. In a std::list if you insert an object, a node object will be created containing a copy of the object, but not in an intrusive list where only the pointers to the next and to the previous element of the inserted object are updated. Another advantage is that if you have a reference to an object you can directly obtain an iterator to this object in O(1), an operation that would be in O(n) with a std::list. Iteration is faster because it needs less memory accesses.&lt;/p&gt;
&lt;p&gt;On the other hand, an intrusive list has also several drawbacks. First of all, it is intrusive. It means that you have to change the definition of the type that is stored inside the intrusive list. Then, and it be very complicated, it is up to the developer to manage the life time of the objects. It means that it is up to you to allocate and deallocate memory for each objects that you want to put in your collection. For instance, if you store an object into an intrusive list and later delete this object without removing it from the list, you will have broken you list. It is also less safe because the container can be modified from outside simply by modifying the pointers directly inside the objects.&lt;/p&gt;
&lt;p&gt;This article is not a tutorial for Boost intrusive collections, I will just focus on the performance aspect, if you want to learn how to use them, you can consult &lt;a href="http://www.boost.org/doc/libs/1_52_0/doc/html/intrusive.html" title="Boost Intrusive 1.52"&gt;the official documentation&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;A boost::intrusive::list can be configured in three mode:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ol&gt;
    &lt;li&gt;Normal mode: No special features&lt;/li&gt;
    &lt;li&gt;Safe mode: The hook is initialized to a default safe state and the container check this state before inserting a value. The state of a removed node is also updated correctly. It can be used to detect programming errors. It implies a small performance overhead. This is the default mode.&lt;/li&gt;
    &lt;li&gt;Auto unlink mode: When an object gets destructed it is automatically removed from the container. This mode has also the properties of the safe mode.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The mode is chosen at constant time by configuring the hook of the data type. In this article, all three mode will be tested. Here are the four types that will be tested:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;list : std::list&lt;/li&gt;
    &lt;li&gt;normal_ilist : boost::intrusive::list in normal mode&lt;/li&gt;
    &lt;li&gt;safe_ilist : boost::intrusive::list in safe mode&lt;/li&gt;
    &lt;li&gt;auto_unlink_ilist : boost::intrusive::list in auto unlink mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data types are varying in size, they hold an array of longs and the size of the array varies to change the size of the data type. In each graph, the size of the data type is indicated. It is the size of the normal data type. The intrusive data types are always 16 bytes bigger than the normal data types. &lt;/p&gt;
&lt;p&gt;In the graphs and in the text, &lt;em&gt;n&lt;/em&gt; is used to refer to the number of elements of the collection.&lt;/p&gt;
&lt;p&gt;All the tests performed have been performed on an Intel Core i7 Q 820  @ 1.73GHz. The code has been compiled in 64 bits with GCC 4.7.2 with the given options: &lt;em&gt;-std=c++11 -O2 -fomit-frame-pointer -march=native&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For each graph, the vertical axis represent the amount of time necessary to perform the operations, so the lower values are the better. The horizontal axis is always the number of elements of the collection. For some graph, the logarithmic scale could be clearer, a button is available after each graph to change the vertical scale to a logarithmic scale.&lt;/p&gt;
&lt;p&gt;So let's see these data structures in practice.&lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Fill list&lt;/h3&gt;

&lt;p&gt;The first test that is performed is how long does it take to fill each data structure. For the std::list, each value is entered directly. For the intrusive list variations, the data are entered into a vector and then pushed back to the intrusive list. &lt;/p&gt;
&lt;p&gt;So, let's test them: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="fill_back - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 265, 261, 491, 2926],&lt;/p&gt;
&lt;p&gt;['200000', 534, 498, 773, 4717],&lt;/p&gt;
&lt;p&gt;['300000', 1874, 1841, 1901, 7201],&lt;/p&gt;
&lt;p&gt;['400000', 2670, 2657, 2749, 9696],&lt;/p&gt;
&lt;p&gt;['500000', 3410, 3447, 3486, 11608],&lt;/p&gt;
&lt;p&gt;['600000', 4044, 4095, 4050, 14024],&lt;/p&gt;
&lt;p&gt;['700000', 4653, 4549, 4626, 16750],&lt;/p&gt;
&lt;p&gt;['800000', 5406, 5320, 5414, 18568],&lt;/p&gt;
&lt;p&gt;['900000', 5995, 5926, 6160, 20880],&lt;/p&gt;
&lt;p&gt;['1000000', 6806, 6785, 6784, 22795],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;We can see that filling a list is about thrice slower than an intrusive version. This is quite logical because there are much less memory allocations in the case of the intrusive lists. The differences between the different intrusive versions are not very big. The normal version is the fastest, then the auto unlink and finally the safe version is the slowest. &lt;/p&gt;
&lt;p&gt;If we increase the size of the data type a bit: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="fill_back - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 850, 894, 967, 2685],&lt;/p&gt;
&lt;p&gt;['200000', 1760, 1671, 1747, 5742],&lt;/p&gt;
&lt;p&gt;['300000', 3987, 3916, 3970, 8517],&lt;/p&gt;
&lt;p&gt;['400000', 5257, 5191, 5238, 10919],&lt;/p&gt;
&lt;p&gt;['500000', 6561, 6813, 6661, 13614],&lt;/p&gt;
&lt;p&gt;['600000', 7943, 8197, 7954, 15874],&lt;/p&gt;
&lt;p&gt;['700000', 9251, 9523, 9049, 18625],&lt;/p&gt;
&lt;p&gt;['800000', 10463, 10865, 10417, 21114],&lt;/p&gt;
&lt;p&gt;['900000', 11736, 11992, 11734, 23824],&lt;/p&gt;
&lt;p&gt;['1000000', 13137, 13423, 13055, 26555],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The results remains more or less the same, but this time there is less difference between list and intrusive list. &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="fill_back - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 2131, 2109, 2923, 39337],&lt;/p&gt;
&lt;p&gt;['200000', 3834, 3830, 5792, 90984],&lt;/p&gt;
&lt;p&gt;['300000', 6454, 6508, 8604, 138087],&lt;/p&gt;
&lt;p&gt;['400000', 8499, 8926, 11614, 185607],&lt;/p&gt;
&lt;p&gt;['500000', 11068, 10874, 14455, 230798],&lt;/p&gt;
&lt;p&gt;['600000', 13009, 13052, 17307, 275473],&lt;/p&gt;
&lt;p&gt;['700000', 14965, 15008, 20593, 326638],&lt;/p&gt;
&lt;p&gt;['800000', 17082, 17186, 23109, 372022],&lt;/p&gt;
&lt;p&gt;['900000', 19283, 19476, 26182, 415426],&lt;/p&gt;
&lt;p&gt;['1000000', 21503, 21569, 29463, 463462],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;This time, the results are really different. The intrusive versions are twenty times faster than a standard list. This comes from dynamic allocations of large blocks that is very expensive. In the case of intrusive list, there are no memory allocations, just modifications of pointers, so it it is normal that for big blocks the difference is higher. &lt;/p&gt;
&lt;p&gt;We can see that for push_back operations, the intrusive are clearly faster. For small data types, they can be up to three times faster. The difference can be much higher with very big data types. There are no big differences between the different versions of the intrusive lists. The normal mode is about 10% faster than the safe mode. &lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Destruction of list&lt;/h3&gt;

&lt;p&gt;The second test is about the time necessary to destruct a collection. For a list, the list is simply allocated on the heap and destructed with delete operator. For an intrusive list, both the vector and the list are allocated on the heap. The time is computed to delete both the vector and the intrusive list. &lt;/p&gt;
&lt;p&gt;Let's take a look at the results: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="destruction - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 298, 283, 0, 2420],&lt;/p&gt;
&lt;p&gt;['200000', 588, 585, 0, 3132],&lt;/p&gt;
&lt;p&gt;['300000', 1196, 1217, 1, 4487],&lt;/p&gt;
&lt;p&gt;['400000', 2180, 2350, 1, 6478],&lt;/p&gt;
&lt;p&gt;['500000', 3169, 3098, 1, 7259],&lt;/p&gt;
&lt;p&gt;['600000', 3975, 3957, 1, 8609],&lt;/p&gt;
&lt;p&gt;['700000', 4569, 4798, 1, 10018],&lt;/p&gt;
&lt;p&gt;['800000', 5189, 5311, 1, 11501],&lt;/p&gt;
&lt;p&gt;['900000', 5927, 6022, 1, 13004],&lt;/p&gt;
&lt;p&gt;['1000000', 6616, 6592, 1, 14423],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The impressive result is that the normal mode is almost free. It is normal because the destructor of the objects does not do anything. Neither the list does anything about the state of the object after it has been removed. The other two intrusive versions performs the same and twice faster than a list. &lt;/p&gt;
&lt;p&gt;Let's increase a bit the size: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="destruction - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 515, 531, 0, 1490],&lt;/p&gt;
&lt;p&gt;['200000', 1997, 1964, 0, 3370],&lt;/p&gt;
&lt;p&gt;['300000', 4022, 3818, 1, 5585],&lt;/p&gt;
&lt;p&gt;['400000', 5219, 5456, 1, 7099],&lt;/p&gt;
&lt;p&gt;['500000', 6693, 6847, 1, 9054],&lt;/p&gt;
&lt;p&gt;['600000', 7859, 7984, 1, 11131],&lt;/p&gt;
&lt;p&gt;['700000', 9456, 9382, 1, 12248],&lt;/p&gt;
&lt;p&gt;['800000', 10637, 10493, 1, 14059],&lt;/p&gt;
&lt;p&gt;['900000', 12433, 11882, 1, 15933],&lt;/p&gt;
&lt;p&gt;['1000000', 13646, 13098, 1, 17434],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;This time, the std::list version is getting closer to the auto unlink and safe versions. The auto unlink version is a bit slower than the safe version. The normal mode is still free. &lt;/p&gt;
&lt;p&gt;Increasing it a bit again: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="destruction - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 4110, 4158, 1, 4388],&lt;/p&gt;
&lt;p&gt;['200000', 8357, 8231, 1, 8949],&lt;/p&gt;
&lt;p&gt;['300000', 12461, 11871, 1, 12417],&lt;/p&gt;
&lt;p&gt;['400000', 16097, 16064, 1, 16249],&lt;/p&gt;
&lt;p&gt;['500000', 19754, 19990, 1, 19181],&lt;/p&gt;
&lt;p&gt;['600000', 23724, 24022, 1, 22019],&lt;/p&gt;
&lt;p&gt;['700000', 28973, 28421, 2, 24928],&lt;/p&gt;
&lt;p&gt;['800000', 32638, 32793, 1, 31896],&lt;/p&gt;
&lt;p&gt;['900000', 37257, 36320, 1, 35455],&lt;/p&gt;
&lt;p&gt;['1000000', 40422, 41037, 1, 39357],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;We can see that the list is a small bit faster than the other two versions. &lt;/p&gt;
&lt;p&gt;If we push the memory to its limit: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="destruction - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 2582, 2689, 1, 5669],&lt;/p&gt;
&lt;p&gt;['200000', 10506, 10450, 1, 19719],&lt;/p&gt;
&lt;p&gt;['300000', 16490, 16429, 1, 33569],&lt;/p&gt;
&lt;p&gt;['400000', 21521, 21702, 1, 47179],&lt;/p&gt;
&lt;p&gt;['500000', 27188, 27217, 1, 59640],&lt;/p&gt;
&lt;p&gt;['600000', 32507, 32470, 1, 70116],&lt;/p&gt;
&lt;p&gt;['700000', 37288, 37344, 1, 81122],&lt;/p&gt;
&lt;p&gt;['800000', 42825, 42611, 1, 91972],&lt;/p&gt;
&lt;p&gt;['900000', 48004, 48315, 1, 104401],&lt;/p&gt;
&lt;p&gt;['1000000', 53439, 53988, 1, 114482],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;This time, the list is again slower. I'm not sure of why this happens, but it is certainly because of the memory allocator that has two allocate too many big blocks, which tends to be more costly than many small. &lt;/p&gt;
&lt;p&gt;For the destruction, the normal mode proved its high strength, being totally free to destroy. The safe and auto unlink modes are proving much more expensive during destruction, but still quite a bit faster than a standard list. &lt;/p&gt;
&lt;p&gt;It is also necessary to keep in mind that the destruction is generally not a common operation and is about 4 times faster than insertion. In practice, neither push_back nor destruction are critical in choosing a data structure. &lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Linear Search in a list&lt;/h3&gt;

&lt;p&gt;The next operation that will benchmark is the linear search. The container is filled with all the numbers in [0, n] and shuffled. Then, each number in [0, n] is searched in the container with std::find that performs a simple linear search.&lt;/p&gt;
&lt;p&gt;How do the different data structures perform: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="linear_search - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['1000', 1213, 1211, 1200, 1463],&lt;/p&gt;
&lt;p&gt;['2000', 5715, 5561, 5931, 6992],&lt;/p&gt;
&lt;p&gt;['3000', 12451, 11619, 11608, 14251],&lt;/p&gt;
&lt;p&gt;['4000', 19338, 20142, 19208, 24840],&lt;/p&gt;
&lt;p&gt;['5000', 30147, 30889, 29863, 40523],&lt;/p&gt;
&lt;p&gt;['6000', 42941, 44530, 43289, 59541],&lt;/p&gt;
&lt;p&gt;['7000', 59717, 62534, 58851, 80416],&lt;/p&gt;
&lt;p&gt;['8000', 77519, 78889, 77188, 104198],&lt;/p&gt;
&lt;p&gt;['9000', 99738, 99434, 100375, 135452],&lt;/p&gt;
&lt;p&gt;['10000', 123829, 123216, 123506, 169720],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;As expected, the intrusive list versions are faster than the standard list. The margin is about 40%. The intrusive versions have a better locality than the standard list because there is one less indirection. &lt;/p&gt;
&lt;p&gt;Increasing the data type size: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="linear_search - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['1000', 2901, 2862, 2940, 2757],&lt;/p&gt;
&lt;p&gt;['2000', 14258, 14242, 14413, 18990],&lt;/p&gt;
&lt;p&gt;['3000', 37327, 37078, 37387, 48716],&lt;/p&gt;
&lt;p&gt;['4000', 69310, 68935, 69152, 86224],&lt;/p&gt;
&lt;p&gt;['5000', 109444, 110199, 108283, 134128],&lt;/p&gt;
&lt;p&gt;['6000', 158570, 158392, 158398, 202273],&lt;/p&gt;
&lt;p&gt;['7000', 219949, 220489, 219070, 266387],&lt;/p&gt;
&lt;p&gt;['8000', 285885, 289721, 283485, 342109],&lt;/p&gt;
&lt;p&gt;['9000', 363603, 361367, 362935, 424984],&lt;/p&gt;
&lt;p&gt;['10000', 445068, 451009, 447940, 525289],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The margin has decreased a bit to about 15%. As the data object does not fit in cache we have higher cache misses rate. &lt;/p&gt;
&lt;p&gt;If we increase it to the maximum: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="linear_search - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['1000', 3517, 3818, 3487, 3570],&lt;/p&gt;
&lt;p&gt;['2000', 19342, 18999, 18875, 22972],&lt;/p&gt;
&lt;p&gt;['3000', 59722, 59728, 60953, 60749],&lt;/p&gt;
&lt;p&gt;['4000', 116755, 118256, 117172, 123127],&lt;/p&gt;
&lt;p&gt;['5000', 194630, 195522, 192977, 204278],&lt;/p&gt;
&lt;p&gt;['6000', 287911, 287099, 291353, 296178],&lt;/p&gt;
&lt;p&gt;['7000', 395506, 404527, 396043, 413398],&lt;/p&gt;
&lt;p&gt;['8000', 519636, 527051, 527183, 549713],&lt;/p&gt;
&lt;p&gt;['9000', 662320, 669371, 672484, 693154],&lt;/p&gt;
&lt;p&gt;['10000', 831052, 828032, 832995, 859092],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;Again, the margin decreased, to 3%. &lt;/p&gt;
&lt;p&gt;For linear searching, the intrusive versions are clearly faster, however, not by a high advantage and this advantage tends to get lower with bigger data types. I would really have expected a more interesting result here. We will see with the next results if it gets better. &lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Iteration over a list&lt;/h3&gt;

&lt;p&gt;This time, we will test the iteration over a whole collection. The iterate is done with the C++11 foreach loop (taking a reference) and the data is used to increment a counter (to make sure the loop is not optimized away. &lt;/p&gt;
&lt;p&gt;Let's start with our small data type: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="iterate - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 204, 202, 209, 276],&lt;/p&gt;
&lt;p&gt;['200000', 430, 404, 439, 715],&lt;/p&gt;
&lt;p&gt;['300000', 967, 956, 1086, 1969],&lt;/p&gt;
&lt;p&gt;['400000', 1837, 1826, 1870, 2672],&lt;/p&gt;
&lt;p&gt;['500000', 2705, 2668, 2699, 3130],&lt;/p&gt;
&lt;p&gt;['600000', 3176, 3110, 3217, 3815],&lt;/p&gt;
&lt;p&gt;['700000', 3856, 3678, 3575, 4363],&lt;/p&gt;
&lt;p&gt;['800000', 4209, 4090, 4095, 4860],&lt;/p&gt;
&lt;p&gt;['900000', 4778, 4334, 4433, 5511],&lt;/p&gt;
&lt;p&gt;['1000000', 4934, 4908, 4656, 5541],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The standard list is indeed slower than the other versions (by about 20%). Which is expected due to their better data locality. However, the results are not very stable (probably too fast, many things can intervene). I was expecting better results. &lt;/p&gt;
&lt;p&gt;Let's go with a higher data type: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="iterate - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 3694, 3635, 3467, 3830],&lt;/p&gt;
&lt;p&gt;['200000', 6779, 6766, 6430, 7070],&lt;/p&gt;
&lt;p&gt;['300000', 9472, 9819, 9291, 10270],&lt;/p&gt;
&lt;p&gt;['400000', 12354, 12322, 12165, 13588],&lt;/p&gt;
&lt;p&gt;['500000', 15188, 15270, 15079, 16725],&lt;/p&gt;
&lt;p&gt;['600000', 18447, 18246, 17797, 19875],&lt;/p&gt;
&lt;p&gt;['700000', 20925, 20578, 20596, 23256],&lt;/p&gt;
&lt;p&gt;['800000', 23539, 23780, 23421, 26451],&lt;/p&gt;
&lt;p&gt;['900000', 26492, 26237, 25975, 29785],&lt;/p&gt;
&lt;p&gt;['1000000', 29757, 29482, 28681, 32752],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;This time, the results look better, but there are less difference between the standard list and the intrusive versions. The intrusive versions are faster by about 10%. &lt;/p&gt;
&lt;p&gt;If we take a bigger data type: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="iterate - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 2797, 2649, 2496, 5211],&lt;/p&gt;
&lt;p&gt;['200000', 10148, 10227, 10199, 10701],&lt;/p&gt;
&lt;p&gt;['300000', 15379, 15544, 15458, 15189],&lt;/p&gt;
&lt;p&gt;['400000', 20181, 20599, 20213, 20135],&lt;/p&gt;
&lt;p&gt;['500000', 25481, 25517, 25381, 25567],&lt;/p&gt;
&lt;p&gt;['600000', 30407, 30408, 30326, 29938],&lt;/p&gt;
&lt;p&gt;['700000', 35187, 35343, 35498, 34985],&lt;/p&gt;
&lt;p&gt;['800000', 40094, 39874, 40172, 40027],&lt;/p&gt;
&lt;p&gt;['900000', 44875, 45329, 45314, 44964],&lt;/p&gt;
&lt;p&gt;['1000000', 49584, 50143, 50405, 49737],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;This time, there is no more difference between the different versions. &lt;/p&gt;
&lt;p&gt;Just like the results for linear search, the intrusive versions are faster but the difference is not huge. For very small data type, there is a gain of about 15 to 20 percent, but on very big data types, there is no more increase in performance. Again, I would have expected better results for the intrusive versions. &lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Write to elements of the list&lt;/h3&gt;

&lt;p&gt;This test is almost the same as the previous one, but this time each element of the collection is modified by incrementing one of its field. &lt;/p&gt;
&lt;p&gt;Let's see if the results are different this time. &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="write - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 267, 290, 263, 343],&lt;/p&gt;
&lt;p&gt;['200000', 579, 583, 548, 889],&lt;/p&gt;
&lt;p&gt;['300000', 1111, 1142, 1114, 2151],&lt;/p&gt;
&lt;p&gt;['400000', 2155, 2143, 2146, 3197],&lt;/p&gt;
&lt;p&gt;['500000', 3193, 3186, 3163, 4168],&lt;/p&gt;
&lt;p&gt;['600000', 4016, 3991, 3978, 5179],&lt;/p&gt;
&lt;p&gt;['700000', 4727, 4916, 4717, 6026],&lt;/p&gt;
&lt;p&gt;['800000', 5560, 5534, 5440, 6977],&lt;/p&gt;
&lt;p&gt;['900000', 6125, 6157, 6064, 7693],&lt;/p&gt;
&lt;p&gt;['1000000', 6830, 6920, 6785, 8613],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The results are more stable than before. We can see that the normal mode is leading the results by a bit less than 30%. Just like for iteration, there no real difference between the different modes. &lt;/p&gt;
&lt;p&gt;Let's increase the data size by a bit: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="write - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 505, 513, 530, 1069],&lt;/p&gt;
&lt;p&gt;['200000', 1957, 1991, 2023, 3222],&lt;/p&gt;
&lt;p&gt;['300000', 4056, 4053, 4000, 4806],&lt;/p&gt;
&lt;p&gt;['400000', 5572, 5493, 5587, 6408],&lt;/p&gt;
&lt;p&gt;['500000', 6763, 6798, 6714, 8578],&lt;/p&gt;
&lt;p&gt;['600000', 8224, 8142, 8050, 10037],&lt;/p&gt;
&lt;p&gt;['700000', 9520, 9622, 9568, 12272],&lt;/p&gt;
&lt;p&gt;['800000', 10982, 11451, 10947, 13818],&lt;/p&gt;
&lt;p&gt;['900000', 12195, 12305, 12185, 15103],&lt;/p&gt;
&lt;p&gt;['1000000', 14043, 13657, 13775, 17187],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The results are the same, still 30% better for the intrusive version. &lt;/p&gt;
&lt;p&gt;Bigger data type again: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="write - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 3263, 3415, 3172, 4444],&lt;/p&gt;
&lt;p&gt;['200000', 9467, 9434, 9513, 8855],&lt;/p&gt;
&lt;p&gt;['300000', 13996, 13888, 14227, 13379],&lt;/p&gt;
&lt;p&gt;['400000', 18181, 18458, 18255, 17684],&lt;/p&gt;
&lt;p&gt;['500000', 22751, 23292, 22956, 22067],&lt;/p&gt;
&lt;p&gt;['600000', 27371, 27511, 27329, 25995],&lt;/p&gt;
&lt;p&gt;['700000', 31236, 31389, 31404, 31164],&lt;/p&gt;
&lt;p&gt;['800000', 35749, 35970, 36132, 35224],&lt;/p&gt;
&lt;p&gt;['900000', 39972, 40684, 40549, 39786],&lt;/p&gt;
&lt;p&gt;['1000000', 45119, 45124, 44840, 43937],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;This time, the intrusive version is not faster anymore than the standard list. &lt;/p&gt;
&lt;p&gt;We have seen that when write is made to the data, intrusive list are better than list. The margin is higher than when doing only iteration. &lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Reverse the list&lt;/h3&gt;

&lt;p&gt;Let's test something more useful with a reverse operation. The reverse member function is used to reverse all the containers. &lt;/p&gt;
&lt;p&gt;Let's see how they perform: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="reverse - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 366, 410, 390, 372],&lt;/p&gt;
&lt;p&gt;['200000', 761, 892, 758, 867],&lt;/p&gt;
&lt;p&gt;['300000', 1278, 1354, 1308, 2062],&lt;/p&gt;
&lt;p&gt;['400000', 2313, 2348, 2324, 3083],&lt;/p&gt;
&lt;p&gt;['500000', 3265, 3297, 3300, 3994],&lt;/p&gt;
&lt;p&gt;['600000', 4036, 4171, 4063, 4890],&lt;/p&gt;
&lt;p&gt;['700000', 4603, 4575, 4689, 6052],&lt;/p&gt;
&lt;p&gt;['800000', 5344, 5241, 5321, 6682],&lt;/p&gt;
&lt;p&gt;['900000', 6107, 5912, 6251, 7623],&lt;/p&gt;
&lt;p&gt;['1000000', 6725, 6626, 6663, 8548],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The intrusive versions are about 25% faster than standard list. Even if reversal does not need to access the values, the pointers of the intrusive lists have a better locality than the one of a list that can be dispersed through memory. &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="reverse - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 585, 563, 601, 1057],&lt;/p&gt;
&lt;p&gt;['200000', 1903, 1902, 2011, 3043],&lt;/p&gt;
&lt;p&gt;['300000', 4121, 4041, 4049, 4671],&lt;/p&gt;
&lt;p&gt;['400000', 5291, 5352, 5275, 6504],&lt;/p&gt;
&lt;p&gt;['500000', 6831, 6711, 6584, 8273],&lt;/p&gt;
&lt;p&gt;['600000', 7980, 8113, 8105, 9900],&lt;/p&gt;
&lt;p&gt;['700000', 9366, 9216, 9426, 11612],&lt;/p&gt;
&lt;p&gt;['800000', 10680, 10622, 10602, 13377],&lt;/p&gt;
&lt;p&gt;['900000', 11917, 11908, 11915, 15140],&lt;/p&gt;
&lt;p&gt;['1000000', 13442, 13239, 13268, 16718],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The performance improved a bit, to 30% improvement for an intrusive list. &lt;/p&gt;
&lt;p&gt;Let's see if this continue: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="reverse - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 2901, 2901, 2676, 4562],&lt;/p&gt;
&lt;p&gt;['200000', 5889, 5942, 5613, 9059],&lt;/p&gt;
&lt;p&gt;['300000', 8696, 8618, 8372, 13501],&lt;/p&gt;
&lt;p&gt;['400000', 11344, 11597, 11039, 17985],&lt;/p&gt;
&lt;p&gt;['500000', 14431, 14123, 13954, 22546],&lt;/p&gt;
&lt;p&gt;['600000', 17084, 16955, 16605, 27246],&lt;/p&gt;
&lt;p&gt;['700000', 19563, 19795, 19431, 31866],&lt;/p&gt;
&lt;p&gt;['800000', 22806, 22428, 22092, 36645],&lt;/p&gt;
&lt;p&gt;['900000', 25553, 25283, 25003, 41025],&lt;/p&gt;
&lt;p&gt;['1000000', 28049, 28174, 27590, 45780],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;It did, the intrusive list is more than 40% faster than the standard list !&lt;/p&gt;
&lt;p&gt;What happens a bigger one: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="reverse - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 4723, 4823, 4585, 4373],&lt;/p&gt;
&lt;p&gt;['200000', 11566, 11566, 11842, 8704],&lt;/p&gt;
&lt;p&gt;['300000', 17471, 17377, 17587, 12985],&lt;/p&gt;
&lt;p&gt;['400000', 22778, 22867, 22866, 17452],&lt;/p&gt;
&lt;p&gt;['500000', 28548, 28434, 28837, 21357],&lt;/p&gt;
&lt;p&gt;['600000', 34005, 34089, 33913, 25907],&lt;/p&gt;
&lt;p&gt;['700000', 39189, 39235, 39284, 30398],&lt;/p&gt;
&lt;p&gt;['800000', 45186, 44900, 44838, 34632],&lt;/p&gt;
&lt;p&gt;['900000', 50337, 50529, 50677, 38540],&lt;/p&gt;
&lt;p&gt;['1000000', 56045, 56026, 56007, 42867],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The lines have been interchanged! This time the standard list is about 25% faster than the intrusive versions. This time, the better locality of the intrusive versions is not a gain but a loss. &lt;/p&gt;
&lt;p&gt;It is logical that the margin decrease with very big objects during reversal. Indeed, each element is very close one to another, but the pairs of pointers are separated by the size of the data type. The bigger the data type, the higher distance between the pointers and so the worse spatial locality for the pointers. However, I do not explain why there is this big difference... &lt;/p&gt;
&lt;p&gt;The performance of intrusive list are clearly interesting for reversing collection of small data types. However, it seems that for high data types, the standard list is faster.&lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Sort the list&lt;/h3&gt;

&lt;p&gt;Let's continue with an even more interesting operation, sorting the list. All the versions are sorted with the sort member function.&lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="sort - Normal" h_title="Number of elements" v_title="ms"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 16314, 16503, 16364, 24992],&lt;/p&gt;
&lt;p&gt;['200000', 38251, 37599, 38206, 62834],&lt;/p&gt;
&lt;p&gt;['300000', 63573, 63521, 63878, 112848],&lt;/p&gt;
&lt;p&gt;['400000', 90236, 88561, 88996, 168037],&lt;/p&gt;
&lt;p&gt;['500000', 114442, 114456, 116137, 236389],&lt;/p&gt;
&lt;p&gt;['600000', 167279, 165879, 166617, 324302],&lt;/p&gt;
&lt;p&gt;['700000', 190762, 190586, 190292, 377142],&lt;/p&gt;
&lt;p&gt;['800000', 223884, 223900, 224622, 477313],&lt;/p&gt;
&lt;p&gt;['900000', 255248, 252795, 253070, 540602],&lt;/p&gt;
&lt;p&gt;['1000000', 287262, 286842, 288404, 614163],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The intrusive versions are really interesting, being twice faster than a standard list. &lt;/p&gt;
&lt;p&gt;Let's see with a see a higher data type: &lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="sort - Normal" h_title="Number of elements" v_title="ms"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 25335, 25030, 25318, 31655],&lt;/p&gt;
&lt;p&gt;['200000', 67224, 65937, 67185, 80637],&lt;/p&gt;
&lt;p&gt;['300000', 118284, 116947, 119686, 139629],&lt;/p&gt;
&lt;p&gt;['400000', 169014, 165868, 169723, 194916],&lt;/p&gt;
&lt;p&gt;['500000', 208261, 208245, 209291, 248475],&lt;/p&gt;
&lt;p&gt;['600000', 294572, 287231, 294284, 339917],&lt;/p&gt;
&lt;p&gt;['700000', 337154, 332205, 338323, 389665],&lt;/p&gt;
&lt;p&gt;['800000', 401654, 393743, 401249, 461721],&lt;/p&gt;
&lt;p&gt;['900000', 440058, 434855, 440984, 506999],&lt;/p&gt;
&lt;p&gt;['1000000', 494861, 491360, 497710, 578176],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The difference is decreasing to about 20%. &lt;/p&gt;
&lt;p&gt;Increasing it again:&lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="sort - Normal" h_title="Number of elements" v_title="ms"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_list', 'safe_list', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['100000', 31568, 33319, 32201, 40331],&lt;/p&gt;
&lt;p&gt;['200000', 82407, 85932, 83987, 97310],&lt;/p&gt;
&lt;p&gt;['300000', 143651, 150155, 144553, 163818],&lt;/p&gt;
&lt;p&gt;['400000', 202050, 209178, 203821, 232728],&lt;/p&gt;
&lt;p&gt;['500000', 250514, 256374, 253415, 289493],&lt;/p&gt;
&lt;p&gt;['600000', 345760, 351034, 348564, 391229],&lt;/p&gt;
&lt;p&gt;['700000', 397848, 402385, 402371, 454434],&lt;/p&gt;
&lt;p&gt;['800000', 471832, 479947, 477681, 538873],&lt;/p&gt;
&lt;p&gt;['900000', 518542, 527961, 524002, 596696],&lt;/p&gt;
&lt;p&gt;['1000000', 583622, 596696, 591025, 672353],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;It decreased again to 18%. &lt;/p&gt;
&lt;p&gt;For sort operations, the intrusive versions are clearly interesting, especially for small data types. &lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Random insert into the list&lt;/h3&gt;

&lt;p&gt;The last operation that we will test is the random insert. I have to say that this test is not fair. Indeed, in an intrusive list, from an object we can directly get an iterator and insert at a random position. For a standard list, we have to find the iterator by linear search. I think that it is still important because it is not of the advantages of an intrusive container.&lt;/p&gt;
&lt;p&gt;[line_chart width="600px" height="400px" scale_button="true" title="random_insert - Normal" h_title="Number of elements" v_title="us"]&lt;/p&gt;
&lt;p&gt;['x', 'auto_unlink_ilist', 'safe_ilist', 'normal_ilist', 'list'],&lt;/p&gt;
&lt;p&gt;['10000', 42, 46, 41, 27729],&lt;/p&gt;
&lt;p&gt;['20000', 49, 66, 45, 48736],&lt;/p&gt;
&lt;p&gt;['30000', 64, 66, 47, 62440],&lt;/p&gt;
&lt;p&gt;['40000', 54, 53, 48, 75253],&lt;/p&gt;
&lt;p&gt;['50000', 59, 54, 49, 88493],&lt;/p&gt;
&lt;p&gt;['60000', 67, 49, 63, 104516],&lt;/p&gt;
&lt;p&gt;['70000', 50, 53, 50, 115514],&lt;/p&gt;
&lt;p&gt;['80000', 55, 50, 50, 128950],&lt;/p&gt;
&lt;p&gt;['90000', 51, 51, 55, 144367],&lt;/p&gt;
&lt;p&gt;['100000', 52, 52, 76, 152721],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;It is very clear that the performance are much better but it is logical because we are comparing something in O(1) versus something in O(n). &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In conclusion, intrusive lists are almost always faster than a standard list. However, on my computer and with GCC, the difference is not always very big. It can brings about 20%-30% on some workloads but most likely around 15%. Even if not negligible, it is not a huge improvement. I would have thought that intrusive lists were faster by an higher margin. On some operations like sort, it is clearly more interesting. It has a better data locality than standard list. &lt;/p&gt;
&lt;p&gt;It is also more interesting to fill the collection, because no memory allocation is involved. But of course, you need to take care of memory allocation by yourself, for example in a vector like here or by dynamically allocating the objects one after one. This has also a cost that is not counted in the benchmark. &lt;/p&gt;
&lt;p&gt;If you really have to use a linked list and performance is critical, I advice you to use Boost intrusive list. If performance is not really critical, it is not perhaps not interesting because of the increased complexity. &lt;/p&gt;
&lt;p&gt;There are situations when only intrusive lists can work. If you want the same object to be present in two different list, you can use boost intrusive list with several member hooks, which is not possible with standard list because only a copy is stored, not the object itself. The same is true for objects that are non-copyable, only intrusive list can handle them. And finally, with intrusive lists you can directly get an iterator to an object in O(1) if you have a reference to an object. For a standard list, you have to iterate through the list to find the object. Sometimes, it can be very useful. &lt;/p&gt;
&lt;p&gt;If you are interested, the Boost documentation provides also a &lt;a href="http://www.boost.org/doc/libs/1_52_0/doc/html/intrusive/performance.html" title="Boost Intrusive Performance"&gt;performance benchmark for intrusive list&lt;/a&gt;, but it is very old (GCC 4.1.2). It is interesting to see that the results are better for intrusive lists than on my benchmark. I do not know if it comes from the processor, the memory or from the compiler. &lt;/p&gt;
&lt;p&gt;I hope you found this benchmark interesting. If you have questions, comments, ideas or whatever to say about this benchmark, don't hesitate to comment. I would be glad to answer you :) The same if you find errors in this article. If you have different results, don't hesitate to comment as well. &lt;/p&gt;
&lt;p&gt;The code source of the benchmark is available online: https://github.com/wichtounet/articles/blob/master/src/intrusive_list/bench.cpp&lt;/p&gt;&lt;/div&gt;</description><category>Benchmark</category><category>Boost</category><category>C++</category><category>C++</category><category>C++11</category><category>Performances</category><guid>http://wichtounet.github.io/posts/2012/12/cpp-benchmark-std-list-boost-intrusive-list.html</guid><pubDate>Wed, 12 Dec 2012 08:53:17 GMT</pubDate></item><item><title>CMake Testing - Rerun the last failed tests with CTest</title><link>http://wichtounet.github.io/posts/2012/12/cmake-rerun-last-failed-tests-ctest.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Some time ago, we saw &lt;a href="http://www.baptiste-wicht.com/2012/10/run-boost-test-parallel-cmake/" title="Run your Boost Tests in parallel with CMake"&gt;how to use CMake to run Boost Tests in paralel&lt;/a&gt;, now it is time for another tip. &lt;/p&gt;
&lt;p&gt;A feature that I think is lacking in CMake/CTest is a way to launch only the last failed tests. As it is not possible to do that directly, I posted &lt;a href="http://stackoverflow.com/q/13547175/802362" title="How to rerun the failed tests with ctest?"&gt;the question on StackOverflow&lt;/a&gt; and got a great answer from &lt;a href="http://stackoverflow.com/users/424459/fraser" title="Fraser"&gt;Fraser&lt;/a&gt;. I wanted to share its answer. &lt;/p&gt;
&lt;p&gt;CTest has -I option to select a list of tests to run. The idea here is to convert the log of CTest in format readable by CTest. What I think is great in its answer is that the solution is a CMake script: &lt;/p&gt;
&lt;p&gt;[code]set(FailedFileName FailedTests.log)&lt;/p&gt;
&lt;p&gt;if(EXISTS "Testing/Temporary/LastTestsFailed.log")
  file(STRINGS "Testing/Temporary/LastTestsFailed.log" FailedTests)
  string(REGEX REPLACE "([0-9]+):[^;]*" "\1" FailedTests "${FailedTests}")
  list(SORT FailedTests)
  list(GET FailedTests 0 FirstTest)
  set(FailedTests "${FirstTest};${FirstTest};;${FailedTests};")
  string(REPLACE ";" "," FailedTests "${FailedTests}")
  file(WRITE ${FailedFileName} ${FailedTests})
else()
  file(WRITE ${FailedFileName} "")
endif()[/code]&lt;/p&gt;
&lt;p&gt;This test just transforms one file into another. &lt;/p&gt;
&lt;p&gt;You can then run the last failing tests using: &lt;/p&gt;
&lt;p&gt;[bash]cmake -P &amp;lt;the script&amp;gt;&lt;/p&gt;
&lt;p&gt;ctest -I FailedTests.log[/bash]&lt;/p&gt;
&lt;p&gt;Very easy, isn't it ? &lt;/p&gt;
&lt;p&gt;There is a limitation to this solution. It won't work when CTest is running in dashboard mode, but it wouldn't take too long to adapt it for that. &lt;/p&gt;
&lt;p&gt;Hope you found that tip useful. &lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>cmake</category><category>Tests</category><category>Tools</category><guid>http://wichtounet.github.io/posts/2012/12/cmake-rerun-last-failed-tests-ctest.html</guid><pubDate>Thu, 06 Dec 2012 08:47:12 GMT</pubDate></item><item><title>C++ benchmark – std::vector VS std::list VS std::deque</title><link>http://wichtounet.github.io/posts/2012/12/cpp-benchmark-vector-list-deque.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Last week, I wrote a benchmark comparing the performance of std::vector and std::list on different workloads. This previous article received a lot of comments and several suggestions to improve it. The present article is an improvement over the previous article. &lt;/p&gt;
&lt;p&gt;In this article, I will compare the performance of std::vector, std::list and std::deque on several different workloads and with different data types. In this article, when I talk about a list refers to std::list, a vector refers to std::vector and deque to std::deque.&lt;/p&gt;
&lt;p&gt;It is generally said that a list should be used when random insert and remove will be performed (performed in O(1) versus O(n) for a vector or a deque). If we look only at the complexity, the scale of linear search in both data structures should be equivalent, complexity being in O(n). When random insert/replace operations are performed on a vector or a deque, all the subsequent data needs to be moved and so each element will be copied. That is why the size of the data type is an important factor when comparing those two data structures. Because the size of the data type will play an important role on the cost of copying an element. &lt;/p&gt;
&lt;p&gt;However, in practice, there is a huge difference: the usage of the memory caches. All the data in a vector is contiguous where the std::list allocates separately memory for each element. How does that change the results in practice ? The deque is a data structure aiming at having the advantages of both data structures without their drawbacks, we will see how it perform in practice. Complexity analysis does not take the memory hierarchy into level. I believe that in practice, memory hierarchy usage is as important as complexity analysis. &lt;/p&gt;
&lt;p&gt;Keep in mind that all the tests performed are made on vector, list and deque even if other data structures could be better suited to the given workload. &lt;/p&gt;
&lt;p&gt;In the graphs and in the text, &lt;em&gt;n&lt;/em&gt; is used to refer to the number of elements of the collection. &lt;/p&gt;
&lt;p&gt;All the tests performed have been performed on an Intel Core i7 Q 820  @ 1.73GHz. The code has been compiled in 64 bits with GCC 4.7.2 with -02 and -march=native. The code has been compiled with C++11 support (-std=c++11). &lt;/p&gt;
&lt;p&gt;For each graph, the vertical axis represent the amount of time necessary to perform the operations, so the lower values are the better. The horizontal axis is always the number of elements of the collection. For some graph, the logarithmic scale could be clearer, a button is available after each graph to change the vertical scale to a logarithmic scale. &lt;/p&gt;
&lt;p&gt;The data types are varying in size, they hold an array of longs and the size of the array varies to change the size of the data type. The non-trivial data type is made of two longs and has very stupid assignment operator and copy constructor that just does some maths (totally meaningless but costly). One may argue that is not a common copy constructor neither a common assignment operator and one will be right, however, the important point here is that it is costly operators which is enough for this benchmark. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Fill&lt;/h3&gt;
&lt;p&gt;The first test that is performed is to fill the data structures by adding elements to the back of the container (using &lt;em&gt;push_back&lt;/em&gt;). Two variations of vector are used, &lt;em&gt;vector_pre&lt;/em&gt; being a std::vector using vector::reserve at the beginning, resulting in only one allocation of memory.&lt;/p&gt;
&lt;p&gt;Lets see the results with a very small data type: &lt;/p&gt;
&lt;p&gt;[line_chart title="fill_back - 8 bytes" h_title="Number of elements" v_title="us" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'list', 'vector', 'deque', 'vector_pre'],&lt;/p&gt;
&lt;p&gt;['100000', 2545, 271, 2012, 317],&lt;/p&gt;
&lt;p&gt;['200000', 4927, 552, 998, 334],&lt;/p&gt;
&lt;p&gt;['300000', 7310, 944, 1707, 595],&lt;/p&gt;
&lt;p&gt;['400000', 9463, 936, 2056, 1099],&lt;/p&gt;
&lt;p&gt;['500000', 12591, 1140, 2642, 1058],&lt;/p&gt;
&lt;p&gt;['600000', 14351, 1894, 3125, 1237],&lt;/p&gt;
&lt;p&gt;['700000', 16561, 1995, 3686, 1208],&lt;/p&gt;
&lt;p&gt;['800000', 18820, 2648, 4291, 1365],&lt;/p&gt;
&lt;p&gt;['900000', 20832, 2777, 4962, 2268],&lt;/p&gt;
&lt;p&gt;['1000000', 23430, 3015, 5396, 2585],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The pre-allocated vector is the fastest by a small margin and the list is 3 times slower than a vector. deque and vector. &lt;/p&gt;
&lt;p&gt;If we consider higher data type: &lt;/p&gt;
&lt;p&gt;[line_chart title="fill_back - 4096 bytes" h_title="Number of elements" v_title="us" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'list', 'vector', 'deque', 'vector_pre'],&lt;/p&gt;
&lt;p&gt;['100000', 104867, 55545, 66852, 21738],&lt;/p&gt;
&lt;p&gt;['200000', 226215, 108289, 136035, 42532],&lt;/p&gt;
&lt;p&gt;['300000', 340910, 198343, 153446, 60317],&lt;/p&gt;
&lt;p&gt;['400000', 445035, 217325, 269316, 80616],&lt;/p&gt;
&lt;p&gt;['500000', 559619, 236576, 189613, 101371],&lt;/p&gt;
&lt;p&gt;['600000', 688422, 391354, 303729, 122447],&lt;/p&gt;
&lt;p&gt;['700000', 799902, 405771, 426373, 138868],&lt;/p&gt;
&lt;p&gt;['800000', 921441, 415707, 537057, 160637],&lt;/p&gt;
&lt;p&gt;['900000', 1006331, 439635, 263650, 177052],&lt;/p&gt;
&lt;p&gt;['1000000', 1113690, 464416, 372000, 199434],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;This time vector and list are performing at about the same speed. The deque is a bit faster than list and vector. The pre-allocated vector is clearly the winner here. The variations in the results of deque and vector are probably coming from my system that doesn't like allocating so much memory back and forth at this speed. &lt;/p&gt;
&lt;p&gt;Finally, if we use a non-trivial data type: &lt;/p&gt;
&lt;p&gt;[line_chart title="fill_back - 16 bytes" h_title="Number of elements" v_title="us" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'list', 'vector', 'deque', 'vector_pre'],&lt;/p&gt;
&lt;p&gt;['100000', 8093, 8123, 10251, 8095],&lt;/p&gt;
&lt;p&gt;['200000', 15433, 15305, 16061, 13897],&lt;/p&gt;
&lt;p&gt;['300000', 25964, 24643, 24450, 19954],&lt;/p&gt;
&lt;p&gt;['400000', 33414, 30322, 32148, 27171],&lt;/p&gt;
&lt;p&gt;['500000', 40416, 37817, 40752, 35058],&lt;/p&gt;
&lt;p&gt;['600000', 48991, 48594, 48785, 41049],&lt;/p&gt;
&lt;p&gt;['700000', 55059, 55124, 55092, 47609],&lt;/p&gt;
&lt;p&gt;['800000', 63688, 61360, 64505, 55659],&lt;/p&gt;
&lt;p&gt;['900000', 70550, 67636, 72329, 60952],&lt;/p&gt;
&lt;p&gt;['1000000', 79271, 73533, 79522, 67787],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;All data structures are performing more or less the same, with vector_pre being the fastest. &lt;/p&gt;
&lt;p&gt;For push_back operations, pre-allocated vectors is a very good choice if the size is known in advance. The others performs more of less the same.&lt;/p&gt;
&lt;p&gt;I would have expected a better result for pre-allocated vector. If someone find an explanation for such a small margin, I'm interested. &lt;/p&gt;
&lt;h3&gt;Linear Search&lt;/h3&gt;

&lt;p&gt;The first operation is that is tested is the search. The container is filled with all the numbers in [0, N] and shuffled. Then, each number in [0,N] is searched in the container with std::find that performs a simple linear search. In theory, all the data structures should perform the same if we consider their complexity. &lt;/p&gt;
&lt;p&gt;[line_chart title="linear_search - 8 bytes" h_title="Number of elements" v_title="us" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['1000', 593, 1098, 318],&lt;/p&gt;
&lt;p&gt;['2000', 2927, 5307, 1271],&lt;/p&gt;
&lt;p&gt;['3000', 5891, 12228, 3020],&lt;/p&gt;
&lt;p&gt;['4000', 8663, 24415, 5081],&lt;/p&gt;
&lt;p&gt;['5000', 12859, 36316, 8066],&lt;/p&gt;
&lt;p&gt;['6000', 18493, 55057, 11463],&lt;/p&gt;
&lt;p&gt;['7000', 25057, 74344, 16022],&lt;/p&gt;
&lt;p&gt;['8000', 38980, 99990, 21051],&lt;/p&gt;
&lt;p&gt;['9000', 44951, 127575, 26650],&lt;/p&gt;
&lt;p&gt;['10000', 52281, 158216, 32557],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;It is clear from the graph that the list has very poor performance for searching. The growth is much worse for a list than for a vector or a deque.&lt;/p&gt;
&lt;p&gt;The only reason is the usage of the cache line. When a data is accessed, the data is fetched from the main memory to the cache. Not only the accessed data is accessed, but a whole cacheline is fetched. As the elements in a vector are contiguous, when you access an element, the next element is automatically in the cache. As the main memory is orders of magnitude slower than the cache, this makes a huge difference. In the list case, the processor spends its whole time waiting for data being fetched from memory to the cache, at each fetch, the processor fetches a lot of unnecessary data that are almost always useless. &lt;/p&gt;
&lt;p&gt;The deque is a bit slower than the vector, that is logical because here there are more cache misses due to the segmented parts. &lt;/p&gt;
&lt;p&gt;If we take a bigger data type: &lt;/p&gt;
&lt;p&gt;[line_chart title="linear_search - 128 bytes" h_title="Number of elements" v_title="us" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['1000', 1116, 2683, 776],&lt;/p&gt;
&lt;p&gt;['2000', 4983, 16675, 3537],&lt;/p&gt;
&lt;p&gt;['3000', 12255, 44379, 10874],&lt;/p&gt;
&lt;p&gt;['4000', 23212, 83026, 20189],&lt;/p&gt;
&lt;p&gt;['5000', 37392, 133353, 33609],&lt;/p&gt;
&lt;p&gt;['6000', 55295, 193428, 47636],&lt;/p&gt;
&lt;p&gt;['7000', 74877, 261314, 63911],&lt;/p&gt;
&lt;p&gt;['8000', 100903, 340157, 84647],&lt;/p&gt;
&lt;p&gt;['9000', 126299, 435816, 107922],&lt;/p&gt;
&lt;p&gt;['10000', 156386, 545160, 135680],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The list is still much slower than the others, but what is interesting is that gap between the deque and the array is decreasing. Let's try with a 4KB data type: &lt;/p&gt;
&lt;p&gt;[line_chart title="linear_search - 4096 bytes" h_title="Number of elements" v_title="us" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['1000', 4258, 7190, 4445],&lt;/p&gt;
&lt;p&gt;['2000', 20584, 38411, 19825],&lt;/p&gt;
&lt;p&gt;['3000', 48236, 113189, 55341],&lt;/p&gt;
&lt;p&gt;['4000', 87475, 223174, 118453],&lt;/p&gt;
&lt;p&gt;['5000', 136945, 362421, 191967],&lt;/p&gt;
&lt;p&gt;['6000', 197856, 530943, 281252],&lt;/p&gt;
&lt;p&gt;['7000', 273359, 726323, 387940],&lt;/p&gt;
&lt;p&gt;['8000', 351223, 954463, 511276],&lt;/p&gt;
&lt;p&gt;['9000', 447525, 1211581, 652269],&lt;/p&gt;
&lt;p&gt;['10000', 551556, 1497916, 807161],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The performance of the list are still poor but the gap is decreasing. The interesting point is that deque is now faster than vector. I'm not really sure of the reason of this result. It is possible that it comes only from this special size. One thing is sure, the bigger the data size, the more cache misses the processor will get because elements don't fit in cache lines. &lt;/p&gt;
&lt;p&gt;For search, list is clearly slow where deque and vector have about the same performance. It seems that deque is faster than a vector for very large data sizes. &lt;/p&gt;
&lt;h3&gt;Random Insert (+Linear Search)&lt;/h3&gt;

&lt;p&gt;In the case of random insert, in theory, the list should be much faster, its insert operation being in O(1) versus O(n) for a vector or a deque. &lt;/p&gt;
&lt;p&gt;The container is filled with all the numbers in [0, N] and shuffled. Then, 1000 random values are inserted at a random position in the container. The random position is found by linear search. In both cases, the complexity of the search is O(n), the only difference comes from the insert that follow the search. We saw before that the performance of the list were poor for searching, so we'll see if the fast insertion can compensate the slow search. &lt;/p&gt;
&lt;p&gt;[line_chart title="random_insert - 8 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['10000', 8, 27, 8],&lt;/p&gt;
&lt;p&gt;['20000', 15, 45, 14],&lt;/p&gt;
&lt;p&gt;['30000', 22, 63, 21],&lt;/p&gt;
&lt;p&gt;['40000', 29, 74, 27],&lt;/p&gt;
&lt;p&gt;['50000', 37, 87, 38],&lt;/p&gt;
&lt;p&gt;['60000', 43, 105, 44],&lt;/p&gt;
&lt;p&gt;['70000', 50, 114, 48],&lt;/p&gt;
&lt;p&gt;['80000', 61, 130, 55],&lt;/p&gt;
&lt;p&gt;['90000', 66, 139, 61],&lt;/p&gt;
&lt;p&gt;['100000', 70, 155, 68],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;List is clearly slower than the other two data structures that exhibit the same performance. This comes from the very slow linear search. Even if the two other data structures have to move a lot of data, the copy is cheap for small data types. &lt;/p&gt;
&lt;p&gt;Let's increase the size a bit: &lt;/p&gt;
&lt;p&gt;[line_chart title="random_insert - 32 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['10000', 21, 53, 25],&lt;/p&gt;
&lt;p&gt;['20000', 39, 80, 48],&lt;/p&gt;
&lt;p&gt;['30000', 57, 103, 68],&lt;/p&gt;
&lt;p&gt;['40000', 71, 122, 90],&lt;/p&gt;
&lt;p&gt;['50000', 88, 146, 112],&lt;/p&gt;
&lt;p&gt;['60000', 102, 165, 130],&lt;/p&gt;
&lt;p&gt;['70000', 124, 190, 152],&lt;/p&gt;
&lt;p&gt;['80000', 140, 214, 175],&lt;/p&gt;
&lt;p&gt;['90000', 157, 238, 195],&lt;/p&gt;
&lt;p&gt;['100000', 174, 268, 213],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The result are interesting. The list is still the slowest but with a smaller margin. This time deque is faster than the vector by a small margin. &lt;/p&gt;
&lt;p&gt;Again, increasing the data size: &lt;/p&gt;
&lt;p&gt;[line_chart title="random_insert - 128 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['10000', 64, 80, 89],&lt;/p&gt;
&lt;p&gt;['20000', 108, 128, 154],&lt;/p&gt;
&lt;p&gt;['30000', 158, 182, 248],&lt;/p&gt;
&lt;p&gt;['40000', 212, 248, 347],&lt;/p&gt;
&lt;p&gt;['50000', 281, 348, 469],&lt;/p&gt;
&lt;p&gt;['60000', 402, 443, 735],&lt;/p&gt;
&lt;p&gt;['70000', 569, 643, 1034],&lt;/p&gt;
&lt;p&gt;['80000', 767, 775, 1347],&lt;/p&gt;
&lt;p&gt;['90000', 978, 1002, 1614],&lt;/p&gt;
&lt;p&gt;['100000', 1190, 1202, 1962],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;This time, the vector is clearly the looser and deque and list have the same performance. We can say that with a size of 128 bytes, the time to move a lot of the elements is more expensive than searching in the list. &lt;/p&gt;
&lt;p&gt;A huge data type gives us clearer results: &lt;/p&gt;
&lt;p&gt;[line_chart title="random_insert - 4096 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['10000', 4430, 178, 8074],&lt;/p&gt;
&lt;p&gt;['20000', 7918, 311, 14121],&lt;/p&gt;
&lt;p&gt;['30000', 11043, 444, 20014],&lt;/p&gt;
&lt;p&gt;['40000', 13806, 555, 26783],&lt;/p&gt;
&lt;p&gt;['50000', 17421, 694, 33519],&lt;/p&gt;
&lt;p&gt;['60000', 20663, 904, 39175],&lt;/p&gt;
&lt;p&gt;['70000', 23599, 1147, 45111],&lt;/p&gt;
&lt;p&gt;['80000', 26736, 1470, 50887],&lt;/p&gt;
&lt;p&gt;['90000', 29524, 1940, 60139],&lt;/p&gt;
&lt;p&gt;['100000', 32005, 2534, 65098],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The list is more than 20 times faster than the vector and an order of magnitude faster than the deque ! The deque is also twice faster than the vector. &lt;/p&gt;
&lt;p&gt;The fact than the deque is faster than vector is quite simple. When an insertion is made in a deque, the elements can either moved to the end or the beginning. The closer point will be chosen. An insert in the middle is the most costly operation with O(n/2) complexity. It is always more efficient to insert elements in a deque than in vector because at least twice less elements will be moved. &lt;/p&gt;
&lt;p&gt;If we look at the non-trivial data type: &lt;/p&gt;
&lt;p&gt;[line_chart title="random_insert - 16 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['10000', 230, 41, 425],&lt;/p&gt;
&lt;p&gt;['20000', 376, 65, 705],&lt;/p&gt;
&lt;p&gt;['30000', 552, 84, 1054],&lt;/p&gt;
&lt;p&gt;['40000', 692, 101, 1345],&lt;/p&gt;
&lt;p&gt;['50000', 862, 119, 1661],&lt;/p&gt;
&lt;p&gt;['60000', 1003, 141, 1984],&lt;/p&gt;
&lt;p&gt;['70000', 1186, 155, 2277],&lt;/p&gt;
&lt;p&gt;['80000', 1358, 172, 2681],&lt;/p&gt;
&lt;p&gt;['90000', 1540, 186, 2965],&lt;/p&gt;
&lt;p&gt;['100000', 1658, 203, 3236],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The results are about the same as for the previous graph, but the data type is only 16B. The cost of the copy constructors and assignment operators is very important for vector and deque. The list doesn't care because no copy neither assignment of the existing elements is made during insertions (only the inserted element is copied). &lt;/p&gt;
&lt;h3&gt;Random Remove&lt;/h3&gt;

&lt;p&gt;In theory, random remove is the same case than random insert. Now that we've seen the results with random insert, we could expect the same behavior for random remove. &lt;/p&gt;
&lt;p&gt;The container is filled with all the numbers in [0, N] and shuffled. Then, 1000 random values are removed from a random position in the container. &lt;/p&gt;
&lt;p&gt;If we take the same data sizes as the random insert case: &lt;/p&gt;
&lt;p&gt;[line_chart title="random_remove - 8 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['10000', 6, 19, 5],&lt;/p&gt;
&lt;p&gt;['20000', 12, 41, 11],&lt;/p&gt;
&lt;p&gt;['30000', 20, 55, 18],&lt;/p&gt;
&lt;p&gt;['40000', 27, 68, 25],&lt;/p&gt;
&lt;p&gt;['50000', 34, 81, 33],&lt;/p&gt;
&lt;p&gt;['60000', 43, 101, 40],&lt;/p&gt;
&lt;p&gt;['70000', 49, 113, 45],&lt;/p&gt;
&lt;p&gt;['80000', 59, 126, 52],&lt;/p&gt;
&lt;p&gt;['90000', 67, 138, 61],&lt;/p&gt;
&lt;p&gt;['100000', 72, 157, 65],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;[line_chart title="random_remove - 128 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['10000', 40, 40, 63],&lt;/p&gt;
&lt;p&gt;['20000', 85, 83, 134],&lt;/p&gt;
&lt;p&gt;['30000', 127, 132, 198],&lt;/p&gt;
&lt;p&gt;['40000', 181, 189, 282],&lt;/p&gt;
&lt;p&gt;['50000', 245, 263, 473],&lt;/p&gt;
&lt;p&gt;['60000', 363, 376, 664],&lt;/p&gt;
&lt;p&gt;['70000', 524, 502, 960],&lt;/p&gt;
&lt;p&gt;['80000', 743, 688, 1343],&lt;/p&gt;
&lt;p&gt;['90000', 977, 812, 1639],&lt;/p&gt;
&lt;p&gt;['100000', 1228, 1017, 2004],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;[line_chart title="random_remove - 4096 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['10000', 2906, 109, 5649],&lt;/p&gt;
&lt;p&gt;['20000', 6190, 233, 11760],&lt;/p&gt;
&lt;p&gt;['30000', 9379, 359, 18218],&lt;/p&gt;
&lt;p&gt;['40000', 12840, 490, 23634],&lt;/p&gt;
&lt;p&gt;['50000', 16027, 585, 30046],&lt;/p&gt;
&lt;p&gt;['60000', 18918, 773, 36100],&lt;/p&gt;
&lt;p&gt;['70000', 22213, 999, 42453],&lt;/p&gt;
&lt;p&gt;['80000', 25788, 1317, 48793],&lt;/p&gt;
&lt;p&gt;['90000', 28975, 1762, 55043],&lt;/p&gt;
&lt;p&gt;['100000', 30860, 2128, 59791],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;[line_chart title="random_remove - 16 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['10000', 149, 27, 294],&lt;/p&gt;
&lt;p&gt;['20000', 319, 50, 608],&lt;/p&gt;
&lt;p&gt;['30000', 481, 68, 934],&lt;/p&gt;
&lt;p&gt;['40000', 638, 89, 1236],&lt;/p&gt;
&lt;p&gt;['50000', 794, 108, 1547],&lt;/p&gt;
&lt;p&gt;['60000', 954, 120, 1894],&lt;/p&gt;
&lt;p&gt;['70000', 1101, 144, 2185],&lt;/p&gt;
&lt;p&gt;['80000', 1253, 160, 2513],&lt;/p&gt;
&lt;p&gt;['90000', 1399, 177, 2812],&lt;/p&gt;
&lt;p&gt;['100000', 1595, 194, 3108],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The behavior of random remove is the same as the behavior of random insert, for the same reasons. The results are not very interesting, so, let's get to the next workload. &lt;/p&gt;
&lt;h3&gt;Push Front&lt;/h3&gt;

&lt;p&gt;The next operation that we will compare is inserting elements in front of the collection. This is the worst case for vector, because after each insertion, all the previously inserted will be moved and copied. For a list or a deque, it does not make a difference compared to pushing to the back. &lt;/p&gt;
&lt;p&gt;So let's see the results: &lt;/p&gt;
&lt;p&gt;[line_chart title="fill_front - 8 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['10000', 0, 0, 33],&lt;/p&gt;
&lt;p&gt;['20000', 0, 0, 135],&lt;/p&gt;
&lt;p&gt;['30000', 0, 0, 313],&lt;/p&gt;
&lt;p&gt;['40000', 0, 0, 585],&lt;/p&gt;
&lt;p&gt;['50000', 0, 1, 913],&lt;/p&gt;
&lt;p&gt;['60000', 0, 1, 1327],&lt;/p&gt;
&lt;p&gt;['70000', 0, 1, 1823],&lt;/p&gt;
&lt;p&gt;['80000', 0, 1, 2405],&lt;/p&gt;
&lt;p&gt;['90000', 0, 2, 3107],&lt;/p&gt;
&lt;p&gt;['100000', 0, 2, 4017],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The results are crystal-clear and as expected, vector is very bad at inserting elements to the front. The list and the deque results are almost invisible in the graph because it is a free operation for the two data structures. This does not need further explanations. There is no need to change the data size, it will only make vector much slower and my processor hotter. &lt;/p&gt;
&lt;h3&gt;Sort&lt;/h3&gt;

&lt;p&gt;The next operation that is tested is the time necessary to sort the data structures. For the vector and the deque std::sort is used and for a list the member function sort is used. &lt;/p&gt;
&lt;p&gt;[line_chart title="sort - 8 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['100000', 9, 25, 6],&lt;/p&gt;
&lt;p&gt;['200000', 19, 61, 14],&lt;/p&gt;
&lt;p&gt;['300000', 29, 115, 22],&lt;/p&gt;
&lt;p&gt;['400000', 40, 175, 30],&lt;/p&gt;
&lt;p&gt;['500000', 50, 233, 39],&lt;/p&gt;
&lt;p&gt;['600000', 60, 321, 48],&lt;/p&gt;
&lt;p&gt;['700000', 71, 378, 57],&lt;/p&gt;
&lt;p&gt;['800000', 85, 457, 66],&lt;/p&gt;
&lt;p&gt;['900000', 95, 517, 74],&lt;/p&gt;
&lt;p&gt;['1000000', 108, 593, 83],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;For a small data type, the list is several times slower than the other two data structures. This is again due to the very poor spatial locality of the list during the search. vector is slightly faster than a deque, but the difference is not very significant. &lt;/p&gt;
&lt;p&gt;If we increase the size: &lt;/p&gt;
&lt;p&gt;[line_chart title="sort - 128 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['100000', 25, 32, 20],&lt;/p&gt;
&lt;p&gt;['200000', 65, 80, 48],&lt;/p&gt;
&lt;p&gt;['300000', 103, 143, 80],&lt;/p&gt;
&lt;p&gt;['400000', 136, 197, 113],&lt;/p&gt;
&lt;p&gt;['500000', 180, 246, 149],&lt;/p&gt;
&lt;p&gt;['600000', 223, 340, 181],&lt;/p&gt;
&lt;p&gt;['700000', 274, 396, 222],&lt;/p&gt;
&lt;p&gt;['800000', 302, 469, 266],&lt;/p&gt;
&lt;p&gt;['900000', 358, 514, 303],&lt;/p&gt;
&lt;p&gt;['1000000', 395, 579, 337],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The order remains the same but the difference between the list and the other is decreasing. &lt;/p&gt;
&lt;p&gt;With a 1KB data type: &lt;/p&gt;
&lt;p&gt;[line_chart title="sort - 1024 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['100000', 176, 39, 168],&lt;/p&gt;
&lt;p&gt;['200000', 389, 94, 376],&lt;/p&gt;
&lt;p&gt;['300000', 620, 168, 595],&lt;/p&gt;
&lt;p&gt;['400000', 859, 228, 823],&lt;/p&gt;
&lt;p&gt;['500000', 1100, 285, 1059],&lt;/p&gt;
&lt;p&gt;['600000', 1355, 392, 1301],&lt;/p&gt;
&lt;p&gt;['700000', 1609, 452, 1555],&lt;/p&gt;
&lt;p&gt;['800000', 1844, 539, 1797],&lt;/p&gt;
&lt;p&gt;['900000', 2111, 597, 2054],&lt;/p&gt;
&lt;p&gt;['1000000', 2397, 670, 2278],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The list is almost five times faster than the vector and the deque which are both performing the same (with a very slight advantage for vector). &lt;/p&gt;
&lt;p&gt;If we use the non-trivial data type:&lt;/p&gt;
&lt;p&gt;[line_chart title="sort - 16 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['100000', 92, 26, 89],&lt;/p&gt;
&lt;p&gt;['200000', 195, 70, 188],&lt;/p&gt;
&lt;p&gt;['300000', 301, 135, 296],&lt;/p&gt;
&lt;p&gt;['400000', 410, 195, 399],&lt;/p&gt;
&lt;p&gt;['500000', 519, 255, 510],&lt;/p&gt;
&lt;p&gt;['600000', 638, 350, 623],&lt;/p&gt;
&lt;p&gt;['700000', 763, 410, 729],&lt;/p&gt;
&lt;p&gt;['800000', 858, 492, 846],&lt;/p&gt;
&lt;p&gt;['900000', 971, 552, 954],&lt;/p&gt;
&lt;p&gt;['1000000', 1090, 628, 1072],&lt;/p&gt;
&lt;p&gt;[/line_chart] &lt;/p&gt;
&lt;p&gt;Again, the cost of the operators of this type have a strong impact on the vector and deque. &lt;/p&gt;
&lt;h3&gt;Destruction&lt;/h3&gt;

&lt;p&gt;The next test is to calculate the time necessary to the destruction of a container. The containers are dynamically allocated, are filled with n numbers and then their destruction time (via delete) is computed. &lt;/p&gt;
&lt;p&gt;[line_chart title="destruction - 8 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['100000', 34, 1489, 0],&lt;/p&gt;
&lt;p&gt;['200000', 70, 2838, 0],&lt;/p&gt;
&lt;p&gt;['300000', 102, 4677, 0],&lt;/p&gt;
&lt;p&gt;['400000', 142, 6072, 0],&lt;/p&gt;
&lt;p&gt;['500000', 173, 7737, 0],&lt;/p&gt;
&lt;p&gt;['600000', 215, 8828, 0],&lt;/p&gt;
&lt;p&gt;['700000', 353, 10599, 1],&lt;/p&gt;
&lt;p&gt;['800000', 321, 12115, 0],&lt;/p&gt;
&lt;p&gt;['900000', 355, 13932, 1],&lt;/p&gt;
&lt;p&gt;['1000000', 410, 15345, 0],&lt;/p&gt;
&lt;p&gt;[/line_chart] &lt;/p&gt;
&lt;p&gt;The results are already interesting. The vector is almost free to destroy, which is logical because that incurs only freeing one array and the vector itself. The deque is slower due to the freeing of each segments. But the list is much more costly than the other two, more than an order of magnitude slower. This is expected because the list have to free the dynamic memory of each node and also has to iterate through all the elements which we saw was slow. &lt;/p&gt;
&lt;p&gt;If we increase the data type: &lt;/p&gt;
&lt;p&gt;[line_chart title="destruction - 128 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['100000', 898, 4403, 1],&lt;/p&gt;
&lt;p&gt;['200000', 2488, 8499, 1],&lt;/p&gt;
&lt;p&gt;['300000', 4091, 12499, 1430],&lt;/p&gt;
&lt;p&gt;['400000', 5461, 16379, 1909],&lt;/p&gt;
&lt;p&gt;['500000', 6729, 21128, 2459],&lt;/p&gt;
&lt;p&gt;['600000', 8164, 25719, 2729],&lt;/p&gt;
&lt;p&gt;['700000', 9517, 31046, 3227],&lt;/p&gt;
&lt;p&gt;['800000', 10871, 34550, 3756],&lt;/p&gt;
&lt;p&gt;['900000', 12392, 37176, 4163],&lt;/p&gt;
&lt;p&gt;['1000000', 13762, 40119, 4523],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;This time we can see that the deque is three times slower than a vector and that the list is still an order of magnitude slower than a vector ! However, the is less difference than before. &lt;/p&gt;
&lt;p&gt;With our biggest data type, now: &lt;/p&gt;
&lt;p&gt;[line_chart title="destruction - 4096 bytes" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['100000', 20575, 22434, 15499],&lt;/p&gt;
&lt;p&gt;['200000', 44234, 47254, 29848],&lt;/p&gt;
&lt;p&gt;['300000', 67196, 69374, 39818],&lt;/p&gt;
&lt;p&gt;['400000', 89253, 91128, 54229],&lt;/p&gt;
&lt;p&gt;['500000', 108689, 112557, 68090],&lt;/p&gt;
&lt;p&gt;['600000', 131751, 135764, 75063],&lt;/p&gt;
&lt;p&gt;['700000', 150801, 155610, 90761],&lt;/p&gt;
&lt;p&gt;['800000', 172365, 176957, 102830],&lt;/p&gt;
&lt;p&gt;['900000', 192575, 193897, 112728],&lt;/p&gt;
&lt;p&gt;['1000000', 211507, 215274, 126348],&lt;/p&gt;
&lt;p&gt;[/line_chart] &lt;/p&gt;
&lt;p&gt;There is no more difference between list and deque. The vector is still twice faster than them. &lt;/p&gt;
&lt;p&gt;Even if the vector is always faster than the list and deque, keep in mind that the graphs for destruction are in microseconds and so the operations are not very costly. It could make a difference is very time-sensitive application but unlikely in most applications. Moreover, destruction is made only once per data structure, generally, it is not a very important operation. &lt;/p&gt;
&lt;h3&gt;Number Crunching&lt;/h3&gt;

&lt;p&gt;Finally, we can also test a number crunching operation. Here, random elements are inserted into the container that is kept sorted. It means, that the position where the element has to be inserted is first searched by iterating through elements and the inserted. As we talk about number crunching, only 8 bytes elements are tested. &lt;/p&gt;
&lt;p&gt;[line_chart title="number_crunching" h_title="Number of elements" v_title="ms" scale_button="true" width="600px" height="400px"]&lt;/p&gt;
&lt;p&gt;['x', 'deque', 'list', 'vector'],&lt;/p&gt;
&lt;p&gt;['10000', 39, 187, 33],&lt;/p&gt;
&lt;p&gt;['20000', 150, 1247, 134],&lt;/p&gt;
&lt;p&gt;['30000', 339, 3380, 310],&lt;/p&gt;
&lt;p&gt;['40000', 623, 6513, 547],&lt;/p&gt;
&lt;p&gt;['50000', 958, 10757, 864],&lt;/p&gt;
&lt;p&gt;['60000', 1394, 16098, 1257],&lt;/p&gt;
&lt;p&gt;['70000', 1894, 22623, 1713],&lt;/p&gt;
&lt;p&gt;['80000', 2479, 30656, 2249],&lt;/p&gt;
&lt;p&gt;['90000', 3162, 39451, 2858],&lt;/p&gt;
&lt;p&gt;['100000', 3932, 49906, 3576],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;Even if there is only 100'000 elements, the list is already an order of magnitude slower than the other two data structures. If we look a the curves of the results, it is easy to see that this will be only worse with higher collection sizes. The list is absolutely not adapted for number crunching operations due to its poor spatial locality. &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;To conclude, we can get some facts about each data structure:&lt;/p&gt;
&lt;ul&gt;
   &lt;li&gt;std::list is very very slow to iterate through the collection due to its very poor spatial locality.&lt;/li&gt;
   &lt;li&gt;std::vector and std::deque perform always faster than std::list with very small data&lt;/li&gt;
   &lt;li&gt;std::list handles very well large elements&lt;/li&gt;
   &lt;li&gt;std::deque performs better than a std::vector for inserting at random positions (especially at the front, which is constant time)&lt;/li&gt;
   &lt;li&gt;std::deque and std::vector do not support very well data types with high cost of copy/assignment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This draw simple conclusions on usage of each data structure: &lt;/p&gt;
&lt;ul&gt;
   &lt;li&gt;Number crunching: use std::vector or std::deque&lt;/li&gt;
   &lt;li&gt;Linear search: use std::vector or std::deque&lt;/li&gt;
   &lt;li&gt;Random Insert/Remove: use std::list (if data size very small (
   &lt;/li&gt;&lt;li&gt;Big data size: use std::list (not if intended for searching)&lt;/li&gt;
   &lt;li&gt;Non-trivial data type: use std::list unless you need the container especially for searching. But for multiple modifications of the container, it will be very slow. &lt;/li&gt;
   &lt;li&gt;Push to front: use std::deque or std::list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have to say that before writing this new version of the benchmark I did not know std::deque a lot. This is a very good data structure that is very good at inserting at both ends and even in the middle while exposing a very good spatial locality. Even if sometimes slower than a vector, when the operations involves both searching and inserting in the middle, I would say that this structure should be preferred over vectors, especially for data types of medium sizes. &lt;/p&gt;
&lt;p&gt;If you have the time, in practice, the best way to decide is always to benchmark each version, or even to try another data structures. Two operations with the same Big O complexity can perform quite differently in practice. &lt;/p&gt;
&lt;p&gt;I hope that you found this article interesting. If you have any comment or have an idea about an other workload that you would like to test, don't hesitate to post a comment ;) If you have a question on results, don't hesitate as well. &lt;/p&gt;
&lt;p&gt;The code source of the benchmark is available online: &lt;a href="https://github.com/wichtounet/articles/blob/master/src/vector_list/bench.cpp" title="Source code of the benchmark"&gt;https://github.com/wichtounet/articles/blob/master/src/vector_list/bench.cpp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The older version of the article is still available: &lt;a href="http://www.baptiste-wicht.com/2012/11/cpp-benchmark-vector-vs-list/" title="C++ benchmark – std::vector VS std::list"&gt;C++ benchmark – std::vector VS std::list&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Benchmarks</category><category>C++</category><category>C++</category><category>C++11</category><category>Performances</category><guid>http://wichtounet.github.io/posts/2012/12/cpp-benchmark-vector-list-deque.html</guid><pubDate>Mon, 03 Dec 2012 08:58:29 GMT</pubDate></item><item><title>C++ benchmark - std::vector VS std::list</title><link>http://wichtounet.github.io/posts/2012/11/cpp-benchmark-vector-vs-list.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;strong&gt;A updated version of this article is available: &lt;a title="C++ benchmark – std::vector VS std::list VS std::deque" href="http://www.baptiste-wicht.com/2012/12/cpp-benchmark-vector-list-deque/"&gt;C++ benchmark – std::vector VS std::list VS std::deque&lt;/a&gt;&lt;/strong&gt;
&lt;p&gt;In C++, the two most used data structures are the std::vector and the std::list. In this article, we will compare the performance in practice of these two data structures on several different workloads. In this article, when I talk about a list it is the std::list implementation and vector refers to the std::vector implementation.&lt;/p&gt;
&lt;p&gt;It is generally said that a list should be used when random insert and remove will be performed (performed in O(1) versus O(n) for a vector). If we look only at the complexity, search in both data structures should be roughly equivalent, complexity being in O(n). When random insert/replace operations are performed on a vector, all the subsequent data needs to be moved and so each element will be copied. That is why the size of the data type is an important factor when comparing those two data structures.&lt;/p&gt;
&lt;p&gt;However, in practice, there is a huge difference, the usage of the memory caches. All the data in a vector is contiguous where the std::list allocates separately memory for each element. How does that change the results in practice ?&lt;/p&gt;
&lt;p&gt;Keep in mind that all the tests performed are made on vector and list even if other data structures could be better suited to the given workload.&lt;/p&gt;
&lt;p&gt;In the graphs and in the text, &lt;em&gt;n&lt;/em&gt; is used to refer to the number of elements of the collection.&lt;/p&gt;
&lt;p&gt;All the tests performed have been performed on an Intel Core i7 Q 820  @ 1.73GHz. The code has been compiled in 64 bits with GCC 4.7.2 with -02 and -march=native. The code has been compiled with C++11 support (-std=c++11).&lt;/p&gt;
&lt;h3&gt;Fill&lt;/h3&gt;

&lt;p&gt;The first test that is performed is to fill the data structures by adding elements to the back of the container. Two variations of vector are used, vector_pre being a std::vector with the size passed in parameters to the constructor, resulting in only one allocation of memory.&lt;/p&gt;
&lt;p&gt;[line_chart title="Fill (8 bytes)" v_title="Milliseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector_pre','vector','list'],&lt;/p&gt;
&lt;p&gt;['1000',0,0,1],&lt;/p&gt;
&lt;p&gt;['10000',0,1,10],&lt;/p&gt;
&lt;p&gt;['100000',4,11,100],&lt;/p&gt;
&lt;p&gt;['1000000',7,234,1023]&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;[line_chart title="Fill (1024 bytes)" v_title="Milliseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector_pre','vector','list'],&lt;/p&gt;
&lt;p&gt;['1000',0,9,1],&lt;/p&gt;
&lt;p&gt;['10000',12,245,18],&lt;/p&gt;
&lt;p&gt;['100000',949,2635,1153],&lt;/p&gt;
&lt;p&gt;['1000000',9138,23654,11270]&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;All data structures are impacted the same way when the data size increases, because there will be more memory to allocate. The vector_pre is clearly the winner of this test, being one order of magnitude faster than a list and about twice faster than a vector without pre-allocation. The result are directly linked to the allocations that have to be performed, allocation being slow. Whatever the data size is, push_back to a vector will always be faster than to a list. This is logical becomes vector allocates more memory than necessary and so does not need to allocate memory for each element.&lt;/p&gt;
&lt;p&gt;But this test is not very interesting, generally building the data structure is not critical. What is critical is the operations that are performed on the data structure. That will be tested in the next sections.&lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Random Find&lt;/h3&gt;

&lt;p&gt;The first operation is that is tested is the search. The container is filled with all the numbers in [0, N] and shuffled. Then, each number in [0,N] is searched in the container with std::find that performs a simple linear search.&lt;/p&gt;
&lt;p&gt;[line_chart title="Find (8 bytes)" v_title="Microseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector','list'],&lt;/p&gt;
&lt;p&gt;['100',0,11],&lt;/p&gt;
&lt;p&gt;['1000',0,1545],&lt;/p&gt;
&lt;p&gt;['5000',0,35886],&lt;/p&gt;
&lt;p&gt;['10000',0,150865],&lt;/p&gt;
&lt;p&gt;['20000',0,614496]&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;Yes, vector is present in the graph, its line is the same as the x line ! Performing a &lt;strong&gt;linear search in a vector is several orders of magnitude faster than in a list&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The only reason is the usage of the cache line. When a data is accessed, the data is fetched from the main memory to the cache. Not only the accessed data is accessed, but a whole cacheline is fetched. As the elements in a vector are contiguous, when you access an element, the next element is automatically in the cache. As the main memory is orders of magnitude slower than the cache, this makes a huge difference. In the list case, the processor spends its whole time waiting for data being fetched from memory to the cache.&lt;/p&gt;
&lt;p&gt;If we augment the size of the data type to 1KB, the results remain the same, but slower:&lt;/p&gt;
&lt;p&gt;[line_chart title="Find (1024 bytes)" v_title="Microseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector','list'],&lt;/p&gt;
&lt;p&gt;['100', 0, 11],&lt;/p&gt;
&lt;p&gt;['1000', 0, 3551],&lt;/p&gt;
&lt;p&gt;['5000', 0, 195429],&lt;/p&gt;
&lt;p&gt;['10000', 0, 829631],&lt;/p&gt;
&lt;p&gt;['20000', 0, 3356432]&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Random Insert&lt;/h3&gt;

&lt;p&gt;In the case of random insert, in theory, the list should be much faster, its insert operation being in O(1) versus O(n) for a vector.&lt;/p&gt;
&lt;p&gt;The container is filled with all the numbers in [0, N] and shuffled. Then, 1000 random values are inserted at a random position in the container. The random position is found by linear search. In both cases, the complexity of the search is O(n), the only difference comes from the insert that follow the search.&lt;/p&gt;
&lt;p&gt;[line_chart title="Insert (8 bytes)" v_title="Milliseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector','list'],&lt;/p&gt;
&lt;p&gt;['1000', 9, 85],&lt;/p&gt;
&lt;p&gt;['2000', 9, 85],&lt;/p&gt;
&lt;p&gt;['4000', 10, 94],&lt;/p&gt;
&lt;p&gt;['6000', 12, 98],&lt;/p&gt;
&lt;p&gt;['8000', 13, 106],&lt;/p&gt;
&lt;p&gt;['10000', 14, 106]&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;When, the vector should be slower than the list, it is almost an order of magnitude faster. Again, this is because finding the position in a list is much slower than copying a lot of small elements.&lt;/p&gt;
&lt;p&gt;If we increase the size:&lt;/p&gt;
&lt;p&gt;[line_chart title="Insert (32 bytes)" v_title="Milliseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector','list'],&lt;/p&gt;
&lt;p&gt;['1000', 27, 120],&lt;/p&gt;
&lt;p&gt;['2000', 30, 113],&lt;/p&gt;
&lt;p&gt;['4000', 34, 122],&lt;/p&gt;
&lt;p&gt;['6000', 37, 140],&lt;/p&gt;
&lt;p&gt;['8000', 42, 145],&lt;/p&gt;
&lt;p&gt;['10000', 47, 155]&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The two lines are getting closer, but vector is still faster.&lt;/p&gt;
&lt;p&gt;Increase it to 1KB:&lt;/p&gt;
&lt;p&gt;[line_chart title="Insert (1024 bytes)" v_title="Milliseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector','list'],&lt;/p&gt;
&lt;p&gt;['1000', 1821, 167],&lt;/p&gt;
&lt;p&gt;['2000', 1941, 163],&lt;/p&gt;
&lt;p&gt;['4000', 2383, 191],&lt;/p&gt;
&lt;p&gt;['6000', 2679, 207],&lt;/p&gt;
&lt;p&gt;['8000', 2960, 214],&lt;/p&gt;
&lt;p&gt;['10000', 3308, 228]&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;This time, list outperforms vector by an order of magnitude ! The performance of random insert in a list are not impacted much by the size of the data type, where vector suffers a lot when big sizes are used. We can also see that list doesn't seem to care about the size of the collection. It is because the size of the collection only impact the search and not the insertion and as few search are performed, it does not change the results a lot.&lt;/p&gt;
&lt;p&gt;If the iterator was already known (no need for linear search), it would be faster to insert into a list than into the vector.&lt;/p&gt;
&lt;h3&gt;Random Remove&lt;/h3&gt;

&lt;p&gt;In theory, random remove is the same case than random insert. Now that we've seen the results with random insert, we could expect the same behavior for random remove.&lt;/p&gt;
&lt;p&gt;The container is filled with all the numbers in [0, N] and shuffled. Then, 1000 random values are removed from a random position in the container.&lt;/p&gt;
&lt;p&gt;[line_chart title="Remove (8 bytes)" v_title="Milliseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector','list'],&lt;/p&gt;
&lt;p&gt;['1000', 0, 0],&lt;/p&gt;
&lt;p&gt;['2000', 12, 51],&lt;/p&gt;
&lt;p&gt;['4000', 55, 167],&lt;/p&gt;
&lt;p&gt;['6000', 76, 290],&lt;/p&gt;
&lt;p&gt;['8000', 111, 470],&lt;/p&gt;
&lt;p&gt;['10000', 131, 725]&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;Again, vector is several times faster and looks to scale better. Again, this is because it is very cheap to copy small elements.&lt;/p&gt;
&lt;p&gt;Let's increase it directly to 1KB element.&lt;/p&gt;
&lt;p&gt;[line_chart title="Remove (1024 bytes)" v_title="Milliseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector','list'],&lt;/p&gt;
&lt;p&gt;['1000', 428, 26],&lt;/p&gt;
&lt;p&gt;['2000', 1452, 137],&lt;/p&gt;
&lt;p&gt;['4000', 3469, 403],&lt;/p&gt;
&lt;p&gt;['6000', 5592, 774],&lt;/p&gt;
&lt;p&gt;['8000', 11275, 1107],&lt;/p&gt;
&lt;p&gt;['10000', 20687, 1473]&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The two lines have been reversed !&lt;/p&gt;
&lt;p&gt;The behavior of random remove is the same as the behavior of random insert, for the same reasons.&lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Push Front&lt;/h3&gt;

&lt;p&gt;The next operation that we will compare is inserting elements in front of the collection. This is the worst case for vector, because after each insertion, all the previously inserted will be moved and copied. For a list, it does not make a difference compared to pushing to the back.&lt;/p&gt;
&lt;p&gt;[line_chart title="Push front (8 bytes)" v_title="Milliseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector','list'],&lt;/p&gt;
&lt;p&gt;['100', 0, 0],&lt;/p&gt;
&lt;p&gt;['1000', 0, 0],&lt;/p&gt;
&lt;p&gt;['10000', 40, 0],&lt;/p&gt;
&lt;p&gt;['50000', 949, 2],&lt;/p&gt;
&lt;p&gt;['100000', 3937, 4],&lt;/p&gt;
&lt;p&gt;['200000', 16003, 9],&lt;/p&gt;
&lt;p&gt;['300000', 42393, 12]&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;The results are crystal-clear and as expected. vector is very bad at inserting elements to the front. This does not need further explanations. There is no need to change the data size, it will only make vector much slower.&lt;/p&gt;
&lt;h3&gt;Sort&lt;/h3&gt;

&lt;p&gt;The next operation that is tested is the performance of sorting a vector or a list. For a vector std::sort is used and for a list the member function sort is used.&lt;/p&gt;
&lt;p&gt;[line_chart title="Sort (8 bytes)" v_title="Milliseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector','list'],&lt;/p&gt;
&lt;p&gt;['1000', 0, 0],&lt;/p&gt;
&lt;p&gt;['10000', 2, 26],&lt;/p&gt;
&lt;p&gt;['100000', 163, 684],&lt;/p&gt;
&lt;p&gt;['1000000', 2147, 15950],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;We can see that sorting a list is several times slower. It comes from the poor usage of the cache.&lt;/p&gt;
&lt;p&gt;If we increase the size of the element to 1KB:&lt;/p&gt;
&lt;p&gt;[line_chart title="Sort (1024 bytes)" v_title="Milliseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector','list'],&lt;/p&gt;
&lt;p&gt;['1000', 2, 0],&lt;/p&gt;
&lt;p&gt;['10000', 224, 50],&lt;/p&gt;
&lt;p&gt;['100000', 4289, 1083],&lt;/p&gt;
&lt;p&gt;['1000000', 50973, 17975],&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;This time the list is faster than the vector. It is not very clear on the graph, but the values for the list are almost the same as for the previous results. That is because std::list::sort() does not perform any copy, only pointers to the elements are changed. On the other hand, swapping two elements in a vector involves at least three copies, so the cost of sorting will increase as the cost of copying increases.&lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h3&gt;Number Crunching&lt;/h3&gt;

&lt;p&gt;Finally, we can also test a number crunching operation. Here, random elements are inserted into the container that is kept sorted. It means, that the position where the element has to be inserted is first searched by iterating through elements and the inserted. As we talk about number crunching, only 8 bytes elements are tested.&lt;/p&gt;
&lt;p&gt;[line_chart title="Random Sorted Insert (8 bytes)" v_title="Milliseconds" width="600px" height="400px" scale_button="true"]&lt;/p&gt;
&lt;p&gt;['x','vector','list'],&lt;/p&gt;
&lt;p&gt;['1000', 0, 0],&lt;/p&gt;
&lt;p&gt;['10000', 45, 166],&lt;/p&gt;
&lt;p&gt;['50000', 928, 10665],&lt;/p&gt;
&lt;p&gt;['100000', 3753, 50766],&lt;/p&gt;
&lt;p&gt;['200000', 15185, 231480],&lt;/p&gt;
&lt;p&gt;['300000', 34293, 715892]&lt;/p&gt;
&lt;p&gt;[/line_chart]&lt;/p&gt;
&lt;p&gt;We can clearly see that vector is more than an order of magnitude faster than list and this will only be more as the size of the collection increase. This is because traversing the list is much more expensive than copying the elements of the vector.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;To conclude, we can get some facts about each data structure:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;std::vector is insanely faster than std::list to find an element&lt;/li&gt;
    &lt;li&gt;std::vector performs always faster than std::list with very small data&lt;/li&gt;
    &lt;li&gt;std::vector is always faster to push elements at the back than std::list&lt;/li&gt;
    &lt;li&gt;std::list handles very well large elements, especially for sorting or inserting in the front&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This draw simple conclusions on usage of each data structure:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Number crunching: use std::vector&lt;/li&gt;
    &lt;li&gt;Linear search: use std::vector&lt;/li&gt;
    &lt;li&gt;Random Insert/Remove: use std::list (if data size very small (&amp;lt; 64B on my computer), use std::vector)&lt;/li&gt;
    &lt;li&gt;Big data size: use std::list (not if intended for searching)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have the time, in practice, the best way to decide is always to benchmark both versions, or even to try another data structures.&lt;/p&gt;
&lt;p&gt;I hope that you found this article interesting. If you have any comment or have an idea about an other workload that you would like to test, don't hesitate to post a comment ;) If you have a question on results, don't hesitate as well.&lt;/p&gt;
&lt;p&gt;The code source of the benchmark is available online: &lt;a title="Source code of the benchmark" href="https://github.com/wichtounet/articles/blob/master/src/vector_list/bench.cpp"&gt;https://github.com/wichtounet/articles/blob/master/src/vector_list/bench.cpp&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Benchmarks</category><category>C++</category><category>C++</category><category>C++11</category><category>Performances</category><guid>http://wichtounet.github.io/posts/2012/11/cpp-benchmark-vector-vs-list.html</guid><pubDate>Mon, 26 Nov 2012 08:47:35 GMT</pubDate></item><item><title>EDDI Compiler 1.1.4 – Graph Coloring Register Allocation</title><link>http://wichtounet.github.io/posts/2012/11/eddic-compiler-1-1-4-graph-coloring-register-allocation.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I'm proud to announce the release of the &lt;strong&gt;version 1.1.4 of the EDDI Compiler (eddic)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This version has taken me much more time than I thought but I also added much more features than I thought too. &lt;/p&gt;
&lt;p&gt;There are few changes of the language itself, the main changes are in the optimization passes or in the compiler. &lt;/p&gt;
&lt;p&gt;For the language, it is now possible to use dynamically allocated arrays. The &lt;em&gt;this&lt;/em&gt; pointer is now implicit in member functions. &lt;/p&gt;
&lt;p&gt;The standard library has been improved by the &lt;strong&gt;addition of a Doubly-Linked List&lt;/strong&gt;. This list uses the templates so that it is generic. It is possible to add elements to the front and the back of the list. The list is iterable using iterators (bidirectional). &lt;/p&gt;
&lt;p&gt;The template engine has been almost entirely rewritten. The previous version was too limited and there was code to handle the templates almost in the whole front-end. Now, the templates are handled recursively at each point where they can appear. For not the template instantiation depth is not limited, but this will be done in the next version of eddic. &lt;/p&gt;
&lt;p&gt;The major change of this version is the use of a &lt;strong&gt;Graph Coloring Register Allocator&lt;/strong&gt; ! This allocator is based on a Chaitin-style allocator. This greatly improves the quality of the generated assembly. The LTAC compilation is now made in two phase. In the first one, only pseudo registers are used. This first pass includes a first cleanup pass. Then, the register allocator replaces all the pseudo registers by actual registers. Finally, the LTAC IR is optimized like before. In the future, it will be improved further. The coalescing and renumbering passes are a bit limited for now and Chaitin-Briggs optimistic coloring will be used in the future. &lt;/p&gt;
&lt;p&gt;The data-flow framework has been improved to support &lt;strong&gt;data-flow analysis of LTAC program&lt;/strong&gt;. For now, the only analysis that does that is Live Registers Analysis. This analysis is used by the Register Allocator by the Dead Code Elimination that is run in LTAC code. &lt;/p&gt;
&lt;p&gt;The MTAC optimization engine has been greatly improved by the use of a powerful pass manager that runs the optimization in the correct order and that gives them the necessary information. The Control Flow Graph is now updated by the different passes and never invalidated. The CFG is computed only once before the optimizations. &lt;/p&gt;
&lt;p&gt;The MTAC optimization engine has also new optimization passes regarding to loops: &lt;strong&gt;Loop Invariant Code Motion&lt;/strong&gt;, &lt;strong&gt;Loop Strength Reduction&lt;/strong&gt; and &lt;strong&gt;Complete Loop Peeling&lt;/strong&gt;. The loops are discovered by a dominance analysis implemented using the Lengauer-Tarjan's algorithm. &lt;/p&gt;
&lt;p&gt;The inliner has also beeen greatly improved. The inlining decision is now taken at the call site level. It means that only some calls to a function can be inlined and not the whole function. The inliner now supports functions with string parameters. Moreover, the inliner heuristic takes the number of constant parameters at the call site into account to take its decision. &lt;/p&gt;
&lt;p&gt;On the side of the Compiler, there are several improvements. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;The whole compilation process has been made thread safe.&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://www.baptiste-wicht.com/2012/10/run-boost-test-parallel-cmake/" title="Run your Boost Tests in parallel with CMake"&gt;The Test Suite can be run in parallel&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;The Middle-End and Back-Ends have been clearly separated (More information on the &lt;a href="https://github.com/wichtounet/eddic/wiki/Architecture" title="Architecture of the EDDI Compiler"&gt;Wiki&lt;/a&gt;). &lt;/li&gt;
    &lt;li&gt;The LTAC Intermediate Representation now keeps the Basic Blocks of the MTAC representation.&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://www.baptiste-wicht.com/2012/11/eddic-compiles-with-clang-3-1/" title="eddic compiles with CLang 3.1"&gt;eddic can be compiled with CLang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Future Work&lt;/h4&gt;

&lt;p&gt;The next version of the EDDI compiler (eddic) will be the version 1.2.0. This version will add support for inheritance at least in a basic way. It will also add support for returning a structure by value. The structures can contains arrays of defined size. This version will also focus on removing the limitations that exists on some features (Function Call Left Values for instance). It will also contains several necessary cleanups to the files. &lt;/p&gt;
&lt;h4&gt;Download&lt;/h4&gt;

&lt;p&gt;You can find the EDDI Compiler sources on the Github repository: &lt;a title="Github repository of eddic" href="https://github.com/wichtounet/eddic"&gt;https://github.com/wichtounet/eddic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The version is available in the &lt;em&gt;v1.1.4&lt;/em&gt; tag available in the GitHub or directly in the &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Compilers</category><category>EDDI</category><category>EDDI</category><guid>http://wichtounet.github.io/posts/2012/11/eddic-compiler-1-1-4-graph-coloring-register-allocation.html</guid><pubDate>Thu, 08 Nov 2012 08:25:15 GMT</pubDate></item><item><title>Integer Linear Time Sorting Algorithms</title><link>http://wichtounet.github.io/posts/2012/11/integer-linear-time-sorting-algorithms.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;strong&gt;Update&lt;/strong&gt;: The code is now more C++
&lt;p&gt;Most of the sorting algorithms that are used are generally comparison sort. It means that each element of the collection being sorted will be compared to see which one is the first one. A comparison must have a lower bound of Ω(n log n) comparisons. That is why there are no comparison-based sorting algorithm better than O(n log n).&lt;/p&gt;
&lt;p&gt;On the other hand, there are also sorting algorithms that are performing better. This is the family of the integer sorting algorithms. These algorithms are using properties of integer to sort them without comparing them. They can be only be used to sort integers. Nevertheless, a hash function can be used to assign a unique integer to any value and so sort any value. All these algorithms are using extra space. There are several of these algorithms. In this article, we will see three of them and I will present an implementation in C++. At the end of the article, I will compare them to &lt;em&gt;std::sort&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In the article, I will use &lt;em&gt;n&lt;/em&gt; as the size of the array to sort and &lt;em&gt;m&lt;/em&gt; as the max number that is permitted in the array.&lt;/p&gt;
&lt;h3&gt;Bin Sort&lt;/h3&gt;

&lt;p&gt;Bin Sort, or Bucket Sort, is a very simple algorithm that partition all the input numbers into a number of buckets. Then, all the buckets are outputted in order in the array, resulting in a sorting array. I decided to implement the simplest case of Bin Sort where each number goes in its own bucket, so there are &lt;em&gt;m&lt;/em&gt; buckets.&lt;/p&gt;
&lt;p&gt;The implementation is pretty straightforward:&lt;/p&gt;
&lt;p&gt;[cpp]void binsort(std::vector&amp;lt;std::size_t&amp;gt;&amp;amp; A){
    std::vector&amp;lt;std::vector&amp;lt;std::size_t&amp;gt;&amp;gt; B(MAX + 1);&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]].&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}[/cpp]&lt;/p&gt;
&lt;p&gt;B is the array of buckets. Each bucket is implemented as a std::vector. The algorithm starts by filling each buckets with the numbers from the input array. Then, it outputs them in order in the array.&lt;/p&gt;
&lt;p&gt;This algorithm works in &lt;em&gt;O(n + m)&lt;/em&gt; and requires &lt;em&gt;O(m)&lt;/em&gt; extra memory. With these properties, it makes a very limited algorithm, because if you don't know the maximum number and you have to use the maximum number of the array type, you will have to allocate for instance 2^32 buckets. That won't be possible.&lt;/p&gt;
&lt;h3&gt;Couting Sort&lt;/h3&gt;

&lt;p&gt;An interesting fact about binsort is that each bucket contains only the same numbers. The size of the bucket would be enough. That is exactly what Counting Sort. It counts the number of times an element is present instead of the elements themselves. I will present two versions. The first one is a version using a secondary array and then copying again into the input array and the second one is an in-place sort.&lt;/p&gt;
&lt;p&gt;[cpp]void counting_sort(std::vector&amp;lt;std::size_t&amp;gt;&amp;amp; A){
    std::vector&amp;lt;std::size_t&amp;gt; B(SIZE);
    std::vector&amp;lt;std::size_t&amp;gt; C(MAX);&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}[/cpp]&lt;/p&gt;
&lt;p&gt;The algorithm is also simple. It starts by counting the number of elements in each bucket. Then, it aggregates the number by summing them to obtain the position of the element in the final sorted array. Then, all the elements are copied in the temporary array. Finally, the temporary array is copied in the final array. This algorithms works in &lt;em&gt;O(m + n)&lt;/em&gt; and requires &lt;em&gt;O(m + n)&lt;/em&gt;. This version is presented only because it is present in the literature. We can do much better by avoiding the temporary array and optimizing it a bit:&lt;/p&gt;
&lt;p&gt;[cpp]void in_place_counting_sort(std::vector&amp;lt;std::size_t&amp;gt;&amp;amp; A){
    std::vector&amp;lt;std::size_t&amp;gt; C(MAX + 1);&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}[/cpp]&lt;/p&gt;
&lt;p&gt;The temporary array is removed and the elements are directly written in the sorted array. The counts are not used directly as position, so there is no need to sum them. This version still works in &lt;em&gt;O(m + n)&lt;/em&gt; but requires only &lt;em&gt;O(m)&lt;/em&gt; extra memory. It is much faster than the previous version.&lt;/p&gt;
&lt;h3&gt;Radix Sort&lt;/h3&gt;

&lt;p&gt;The last version that I will discuss here is a Radix Sort. This algorithm sorts the number digit after digit in a specific radix. It is a form of bucket sort, where there is a bucket by digit. Like Counting Sort, only the counts are necessary. For example, if you use radix sort in base 10. It will first sort all the numbers by their first digit, then the second, .... It can work in any base and that is its force. With a well chosen base, it can be very powerful. Here, we will focus on radix that are in the form 2^r. These radix have good properties, we can use shifts and mask to perform division and modulo, making the algorithm much faster.&lt;/p&gt;
&lt;p&gt;The implementation is a bit more complex than the other implementations:&lt;/p&gt;
&lt;p&gt;[cpp]static const std::size_t digits = 2;        //Digits&lt;/p&gt;
&lt;p&gt;static const std::size_t r = 16;                 //Bits&lt;/p&gt;
&lt;p&gt;static const std::size_t radix = 1 &amp;lt;&amp;lt; r;         //Bins&lt;/p&gt;
&lt;p&gt;static const std::size_t mask = radix - 1;&lt;/p&gt;
&lt;p&gt;void radix_sort(std::vector&amp;lt;std::size_t&amp;gt;&amp;amp; A){
    std::vector&amp;lt;std::size_t&amp;gt; B(SIZE);
    std::vector&amp;lt;std::size_t&amp;gt; cnt(radix);&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;radix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;radix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}[/cpp]&lt;/p&gt;
&lt;p&gt;&lt;em&gt;r&lt;/em&gt; indicates the power of two used as the radix (2^r). The mask is used to compute modulo faster. The algorithm repeats the steps for each digit. Here &lt;em&gt;digits&lt;/em&gt; equals 2. It means that we support 2^32 values. A 32 bits value is sorted in two pass. The steps are very similar to counting sort. Each value of the digit is counted and then the counts are summed to give the position of the number. Finally, the numbers are put in order in the temporary array and copied into A.&lt;/p&gt;
&lt;p&gt;This algorithm works in &lt;em&gt;O(digits (m + radix))&lt;/em&gt; and requires &lt;em&gt;O(n + radix)&lt;/em&gt; extra memory. A very good thing is that the algorithm does not require space based on the maximum value, only based on the radix.&lt;/p&gt;
&lt;h3&gt;Results&lt;/h3&gt;

&lt;p&gt;It's time to compare the different implementations in terms of runtime. For each size, each version is tested 25 times on different random arrays. The arrays are the same for each algorithm. The number is the time necessary to sort the 25 arrays. The benchmark has been compiler with GCC 4.7.&lt;/p&gt;
&lt;p&gt;The first test is made with very few duplicates (m = 10n).&lt;/p&gt;
&lt;p&gt;[bar_chart title="m = 10n" width="600px" height="400px" scale_button="true" v_title="ms" h_title="n"]&lt;/p&gt;
&lt;p&gt;['x', 'std::sort', 'counting_sort', 'in_place_counting_sort', 'bin_sort', 'radix_sort'],&lt;/p&gt;
&lt;p&gt;['100000', 171, 182, 105, 945, 89],&lt;/p&gt;
&lt;p&gt;['500000', 993, 2229, 970, 6435, 461],&lt;/p&gt;
&lt;p&gt;['1000000', 2175, 4812, 2046, 14096, 1068],&lt;/p&gt;
&lt;p&gt;['5000000', 11791, 27050, 10202, 81255, 6148],&lt;/p&gt;
&lt;p&gt;[/bar_chart]&lt;/p&gt;
&lt;p&gt;Radix Sort comes to be the fastest in this case, &lt;strong&gt;twice faster as &lt;em&gt;std::sort&lt;/em&gt;&lt;/strong&gt;. In place counting sort has almost the same performance as &lt;em&gt;std::sort&lt;/em&gt;. The other are performing worse.&lt;/p&gt;
&lt;p&gt;The second test is made with few duplicates (m ~= n).&lt;/p&gt;
&lt;p&gt;[bar_chart title="m ~= n" width="600px" height="400px" scale_button="true" v_title="ms" h_title="n"]&lt;/p&gt;
&lt;p&gt;['x', 'std::sort', 'counting_sort', 'in_place_counting_sort', 'bin_sort', 'radix_sort'],&lt;/p&gt;
&lt;p&gt;['100000', 186, 73, 37, 309, 90],&lt;/p&gt;
&lt;p&gt;['500000', 991, 611, 189, 3126, 455],&lt;/p&gt;
&lt;p&gt;['1000000', 2235, 2171, 547, 7978, 1038],&lt;/p&gt;
&lt;p&gt;['5000000', 12184, 18470, 4516, 49056, 5791],&lt;/p&gt;
&lt;p&gt;[/bar_chart]&lt;/p&gt;
&lt;p&gt;The numbers are impressive. In place &lt;strong&gt;counting sort is between 3-4 times faster than &lt;em&gt;std::sort&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;radix sort is twice faster than &lt;em&gt;std::sort&lt;/em&gt;&lt;/strong&gt; ! Bin Sort does not performs very well and counting sort even if generally faster than &lt;em&gt;std::sort&lt;/em&gt; does not scale very well.&lt;/p&gt;
&lt;p&gt;Let's test with more duplicates (m = n / 2).&lt;/p&gt;
&lt;p&gt;[bar_chart title="m = n / 2" width="600px" height="400px" scale_button="true" v_title="ms" h_title="n"]&lt;/p&gt;
&lt;p&gt;['x', 'std::sort', 'counting_sort', 'in_place_counting_sort', 'bin_sort', 'radix_sort'],&lt;/p&gt;
&lt;p&gt;['100000', 178, 65, 25, 262, 90],&lt;/p&gt;
&lt;p&gt;['500000', 979, 450, 143, 2332, 461],&lt;/p&gt;
&lt;p&gt;['1000000', 2171, 1480, 321, 6240, 1041],&lt;/p&gt;
&lt;p&gt;['5000000', 11978, 16205, 3453, 41709, 5890],&lt;/p&gt;
&lt;p&gt;[/bar_chart]&lt;/p&gt;
&lt;p&gt;&lt;em&gt;std::sort&lt;/em&gt; and radix sort performance does not change a lot but the other sort are performing better. In-place counting sort is still the leader with a higher margin.&lt;/p&gt;
&lt;p&gt;Finally, with a lot of duplicates (m = n / 10).&lt;/p&gt;
&lt;p&gt;[bar_chart title="m = n / 10n" width="600px" height="400px" scale_button="true" v_title="ms" h_title="n"]&lt;/p&gt;
&lt;p&gt;['x', 'std::sort', 'counting_sort', 'in_place_counting_sort', 'bin_sort', 'radix_sort'],&lt;/p&gt;
&lt;p&gt;['100000', 161, 46, 12, 144, 74],&lt;/p&gt;
&lt;p&gt;['500000', 918, 322, 76, 1023, 449],&lt;/p&gt;
&lt;p&gt;['1000000', 2062, 824, 167, 2721, 1041],&lt;/p&gt;
&lt;p&gt;['5000000', 10789, 8534, 1030, 24026, 5686],&lt;/p&gt;
&lt;p&gt;[/bar_chart]&lt;/p&gt;
&lt;p&gt;Again, &lt;em&gt;std::sort&lt;/em&gt; and radix sort performance are stable, but in-place counting is now &lt;strong&gt;ten times faster than &lt;em&gt;std::sort&lt;/em&gt;&lt;/strong&gt; !&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;To conclude, we have seen that these algorithms can outperforms &lt;em&gt;std::sort&lt;/em&gt; by a high factor (10 times for In place Counting Sort when there m &amp;lt;&amp;lt; n). If you have to sort integers, you should consider these two cases:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;m &amp;gt; n or m is unknown : Use radix sort that is about twice faster than &lt;em&gt;std::sort&lt;/em&gt;.&lt;/li&gt;
    &lt;li&gt;m &amp;lt;&amp;lt; n : Use in place counting sort that can be much faster than &lt;em&gt;std::sort&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you found this article interesting. The implementation can be found on Github: https://github.com/wichtounet/articles/tree/master/src/linear_sorting&lt;/p&gt;&lt;/div&gt;</description><category>Algorithm</category><category>Benchmarks</category><category>C++</category><category>C++</category><category>Performances</category><guid>http://wichtounet.github.io/posts/2012/11/integer-linear-time-sorting-algorithms.html</guid><pubDate>Wed, 07 Nov 2012 09:02:46 GMT</pubDate></item><item><title>Run your Boost Tests in parallel with CMake</title><link>http://wichtounet.github.io/posts/2012/10/run-boost-test-parallel-cmake.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I was looking for a Test Library to run eddic tests in parallel to replace Boost Test Library. I posted my question on StackOverflow and an awesome solution has been posted. With CMake and a little CMake additional file, it is possible to run the tests written with Boost Test Library in parallel without changing anything in the tests code !&lt;/p&gt;
&lt;p&gt;CTest is the test runner that is shipped with CMake. This runner can run tests in parallel using the -j X option (X is the numbers of threads). However, it can only run the tests that are declared in the CMakeLists.txt file. In my case, this means only one (the executable with Boost Test Library). If you have T tests, a solution would be create T executable files. Then, they can be run in parallel by ctest. However, this is not very practical. The solution proposed in this article is better. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Integrate Boost Test Library in CMake&lt;/h3&gt;
&lt;p&gt;Ryan Pavlik provides a series of CMake modules in its Github repository. One of this module is named BoostTestTargets. It automatically generates the CTest commands to run all the tests that you have. The small drawback is that you to list all the tests. &lt;/p&gt;
&lt;p&gt;To start, you have to download these files: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://github.com/rpavlik/cmake-modules/raw/master/BoostTestTargets.cmake" title="BoostTestTargets.cmake"&gt;BoostTestTargets.cmake&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/rpavlik/cmake-modules/raw/master/GetForceIncludeDefinitions.cmake" title="GetForceIncludeDefinitions.cmake"&gt;GetForceIncludeDefinitions.cmake&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/rpavlik/cmake-modules/raw/master/CopyResourcesToBuildTree.cmake" title="CopyResourcesToBuildTree.cmake"&gt;CopyResourcesToBuildTree.cmake&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/rpavlik/cmake-modules/blob/master/BoostTestTargetsStatic.h" title="BoostTestTargetsStatic.h"&gt;BoostTestTargetsStatic.h&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/rpavlik/cmake-modules/blob/master/BoostTestTargetsDynamic.h" title="BoostTestTargetsDynamic.h"&gt;BoostTestTargetsDynamic.h&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/rpavlik/cmake-modules/blob/master/BoostTestTargetsIncluded.h" title="BoostTestTargetsIncluded.h"&gt;BoostTestTargetsIncluded.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These files must be placed next to your CMakeLists.txt file. Then, you have to modify your CMakeLists.txt file to enable testing and enable the new module. For example, if you have two test suites and five tests in each:  &lt;/p&gt;
&lt;p&gt;[code]INCLUDE(CTest)&lt;/p&gt;
&lt;p&gt;ENABLE_TESTING()&lt;/p&gt;
&lt;p&gt;file(
    GLOB_RECURSE
    test_files
    test/*
)&lt;/p&gt;
&lt;p&gt;include(BoostTestTargets.cmake)&lt;/p&gt;
&lt;p&gt;add_boost_test(eddic_boost_test
    SOURCES ${test_files}
    TESTS 
    TestSuiteA/test_1
    TestSuiteA/test_2
    TestSuiteA/test_3
    TestSuiteA/test_4
    TestSuiteA/test_5
    TestSuiteB/test_1
    TestSuiteB/test_2
    TestSuiteB/test_3
    TestSuiteB/test_4
    TestSuiteB/test_5
    )[/code]&lt;/p&gt;
&lt;p&gt;All the test files are searched in the test directory and used in the SOURCES variable. Then all the tests are declared. &lt;/p&gt;
&lt;p&gt;The main test file has to include a specific header file:&lt;/p&gt;
&lt;p&gt;[cpp]#define BOOST_TEST_MODULE eddic_test_suite&lt;/p&gt;
&lt;h2&gt;include &amp;lt;BoostTestTargetConfig.h&amp;gt;[/cpp]&lt;/h2&gt;
&lt;p&gt;This file will be automatically detected by BoostTestTargets and configured correctly. And that's it !&lt;/p&gt;
&lt;p&gt;You can run CMake again in your build directory to use the new test system: &lt;/p&gt;
&lt;p&gt;[bash]cmake .[/bash]&lt;/p&gt;
&lt;p&gt;If the configuration has been successful, you will see a message indicating that. For example, I see that: &lt;/p&gt;
&lt;p&gt;[bash]-- Test 'eddic_boost_test' uses the CMake-configurable form of the boost test framework - congrats! (Including File: /home/wichtounet/dev/eddi/eddic/test/IntegrationTests.cpp)&lt;/p&gt;
&lt;p&gt;-- Configuring done&lt;/p&gt;
&lt;p&gt;-- Generating done&lt;/p&gt;
&lt;p&gt;-- Build files have been written to: /tmp/ramdrive/dev/eddic[/bash]&lt;/p&gt;
&lt;h3&gt;Run tests in parallel&lt;/h3&gt;

&lt;p&gt;You can then run your tests in parallel with ctest. For instance, with 9 threads: &lt;/p&gt;
&lt;p&gt;[bash]ctest -j 8[/bash]&lt;/p&gt;
&lt;p&gt;In my case, my tests are completed 6x faster ! This is very valuable when you often run your tests. &lt;/p&gt;
&lt;p&gt;For more information on how to integrate your Boost Test Library tests with CMake, you can consult the &lt;a href="https://github.com/rpavlik/cmake-modules/" title="cmake-modules Github repository"&gt;The cmake-modules repository&lt;/a&gt;. &lt;/p&gt;&lt;/div&gt;</description><category>Boost</category><category>C++</category><category>cmake</category><category>Concurrency</category><category>EDDI</category><category>Performances</category><category>Tests</category><guid>http://wichtounet.github.io/posts/2012/10/run-boost-test-parallel-cmake.html</guid><pubDate>Mon, 15 Oct 2012 08:57:43 GMT</pubDate></item><item><title>EDDI Compiler 1.1.3 - Templates</title><link>http://wichtounet.github.io/posts/2012/09/eddi-compiler-1-1-3-templates.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I finished the &lt;strong&gt;version 1.1.3 of the EDDI Compiler (eddic)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The main improvement to the language is the support of templates. The syntax is more or less the same as the syntax of C++ templates, but the features are much more limited. In EDDI, you can declare class templates and function templates. Class templates can also includes member function templates.&lt;/p&gt;
&lt;p&gt;Here is an example of the use of templates in EDDI:&lt;/p&gt;
&lt;p&gt;[cpp]template&lt;/p&gt;
&lt;p&gt;struct node {
    T value;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C1|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;get_value&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;template&amp;lt;type T&amp;gt;&lt;/p&gt;
&lt;p&gt;void debug(T t){
    print(t);
    print("|");
}&lt;/p&gt;
&lt;p&gt;template&amp;lt;type T&amp;gt;&lt;/p&gt;
&lt;p&gt;void test(node&amp;lt;T&amp;gt;* node){
    debug&amp;lt;T&amp;gt;(node.value);
    debug&amp;lt;T&amp;gt;(node.get_value());
}&lt;/p&gt;
&lt;p&gt;void main(){
    node&amp;lt;int&amp;gt; first_node(100);
    node&amp;lt;float&amp;gt; second_node(13.3);&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="n"&gt;first_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="n"&gt;second_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;first_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_value&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;second_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_value&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;[/cpp]&lt;/p&gt;
&lt;p&gt;This new feature adds generic programming capabilities to the language.&lt;/p&gt;
&lt;p&gt;This version also adds other language improvements. The first one is the support of the ! operator for a bool, to test if a bool is false. This version also includes support for iterating through all the chars of a string with a foreach loop. And finally, the this pointer is now implicit to access member fields of a struct from member functions.&lt;/p&gt;
&lt;p&gt;The optimization engine has been greatly improved. The pointers are much better handled and some regression due to new features have been fixed. The Constant Propagation optimization can take default values of struct and arrays into account. Finally, the functions with char parameters can now be inlined.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div id="LC3"&gt;Finally, the compiler use a new logging system, that can be completely removed at compile-time for release versions.&lt;/div&gt;
&lt;div&gt;

&lt;h4&gt;Future Work&lt;/h4&gt;

&lt;div&gt;The next version of the EDDI compiler (eddic) will be the version 1.1.4. This version will add support for some basic pointer manipulation. It will also add support for dynamically allocated arrays. Finally, the version will includes several new optimization techniques regarding to loops: Loop Invariant Code Motion, Loop Strength Reduction and perhaps some basic Loop Unrolling.&lt;/div&gt;

&lt;h4&gt;Download&lt;/h4&gt;

&lt;div&gt;You can find the EDDI Compiler sources on the Github repository: &lt;a title="Github repository of eddic" href="https://github.com/wichtounet/eddic"&gt;https://github.com/wichtounet/eddic&lt;/a&gt;&lt;/div&gt;

&lt;div&gt;The exact version I refer to is the v1.1.3 available in the GitHub tags or directly as the release branch.&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Compilers</category><category>EDDI</category><category>EDDI</category><guid>http://wichtounet.github.io/posts/2012/09/eddi-compiler-1-1-3-templates.html</guid><pubDate>Wed, 05 Sep 2012 07:25:42 GMT</pubDate></item><item><title>EDDI Compiler 1.1.2 – Read command line</title><link>http://wichtounet.github.io/posts/2012/08/eddi-compiler-1-1-2-read-command-line.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;div id="LC1"&gt;I finished the &lt;strong&gt;eddi compiler (eddic) version 1.1.2&lt;/strong&gt;. It took me a long time because of a lot of other things I had to do this month.&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;This version includes two major changes. First, this version adds a new type for characters (char). A char can be declared using a char literal ('b' for instance) or from an int ( (char) 77). This version introduces the [] operator for string to have access to a specific char.&lt;/div&gt;

&lt;div&gt;&lt;/div&gt;

&lt;div&gt;Another major improvement is the support for reading the command line. For now, only characters can be read, one by one with the read_char function.&lt;/div&gt;

&lt;div&gt;&lt;/div&gt;

&lt;div&gt;The standard library includes a new function to compare two strings (&lt;em&gt;str_equals&lt;/em&gt;):&lt;/div&gt;

&lt;div&gt;&lt;/div&gt;

&lt;p&gt;[cpp]bool str_equals(string a, string b){
    if(length(a) != length(b)){
        return false;
    }&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}[/cpp]&lt;/p&gt;
&lt;div&gt;The other improvements are not relative to the language. The inlining engine can now inline functions that takes arrays as parameters. The symbol table is now represented by the global context. There is no global symbol table. This new version includes several improvements of the code and a cleanup of the AST to remove redundancy.&lt;/div&gt;

&lt;h4&gt;Future Work&lt;/h4&gt;

&lt;div&gt;The next version of the eddi compiler (eddic) will be the version 1.1.3. This version will introduce support for a very basic version of template engine. It will also add support for foreach on string. This version will also add new features and cleanup in the different optimizations passes.&lt;/div&gt;

&lt;h4&gt;Download&lt;/h4&gt;

&lt;div&gt;You can find the EDDI Compiler sources on the Github repository: https://github.com/wichtounet/eddic&lt;/div&gt;

&lt;div&gt;The exact version I refer to is the v1.1.2 available in the GitHub tags or directly as the release branch.&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Compilers</category><category>EDDI</category><category>EDDI</category><guid>http://wichtounet.github.io/posts/2012/08/eddi-compiler-1-1-2-read-command-line.html</guid><pubDate>Sat, 25 Aug 2012 06:47:06 GMT</pubDate></item><item><title>Algorithms books Reviews</title><link>http://wichtounet.github.io/posts/2012/08/algorithms-books-reviews.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;To be sure to be well prepared for an interview, I decided to read several &lt;strong&gt;Algorithms book&lt;/strong&gt;. I also chosen books in order to have information about data structures. I chose these books to read:
&lt;/p&gt;&lt;ol&gt;
    &lt;li&gt;Data Structures &amp;amp; Algorithm Analysis in C++, Third Edition, by Clifford A. Shaffer&lt;/li&gt;
    &lt;li&gt;Algorithms in a Nutshell, by George T. Heineman, Gary Pollice and Stanley Selkow&lt;/li&gt;
    &lt;li&gt;Algorithms, Fourth Edition, by Robert Sedgewick and Kevin Wayne&lt;/li&gt;
    &lt;li&gt;Introduction to Algorithms, by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest and Clifford Stein. I have to say that I have only read most of it, not completely, because some chapters were not interesting for me at the current time, but I will certainly read them later.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As some of my comments are about the presentation of the books, it has to be noted that I have read the three first books on my Kindle.&lt;/p&gt;
&lt;p&gt;In this post, you will find my point of view about all these books.&lt;/p&gt;
&lt;h4&gt;Data Structures &amp;amp; Algorithm Analysis in C++&lt;/h4&gt;

&lt;p&gt;This book is really great. It contains a lot of data structures and algorithms. Each of them is very clearly presented. It is not hard to understand the data structures and the algorithms.&lt;/p&gt;
&lt;p&gt;Each data structure is first presented as an ADT (Abstract Data Structure) and then several possible implementations are presented. Each implementation is precisely defined and analyzed to find its sweet pots and worst cases.  Other implementations are also presented with enough references to know where to start with them.&lt;/p&gt;
&lt;p&gt;I have found that some other books about algorithms are writing too much stuff for a single thing. This is not the case with this book. Indeed, each interesting thing is clearly and succinctly explained.&lt;/p&gt;
&lt;p&gt;About the presentation, the code is well presented and the content of the book is very well written. A good think would have been to add a summary of the most important facts about each algorithm and data structure. If you want to know these facts, you have to read several pages (but the facts are always here).&lt;/p&gt;
&lt;p&gt;The book contains very good explanation about the complexity analysis of algorihtms. It also contains a very interesting chapter about limits to computation where it treats P, NP, NP-Complete and NP-Hard complexity classes.&lt;/p&gt;
&lt;p&gt;This book contains a large number of exercises and projects that can be used to improve even more your algorithmic skills. Moreover, there are very good references at the end of each chapters if you want more documentation about a specific subject.&lt;/p&gt;
&lt;p&gt;I had some difficulty reading it on my Kindle. Indeed, it's impossible to switch chapters directly with the Kindle button. If you want quick access to the next chapter, you have to use the table of contents.&lt;/p&gt;
&lt;h4&gt;Algorithms in a Nutshell&lt;/h4&gt;

&lt;p&gt;This book is much shorter than the previous one. Even if it could be a good book for beginners, I didn't liked this book a lot. The explanations are a bit messy sometimes and it could contain more data structures (even if I know that this is not the subject of the book). The analysis of the different algorithms are a bit short too. Even if it looks normal for a book that short, it has to be known that this book has no exercise.&lt;/p&gt;
&lt;p&gt;However, this book has also several good points. Each algorithm is very well presented in a single panel. The complexity of each algorithm is directly given alongside its code. It helps finding quickly an algorithm and its main properties.&lt;/p&gt;
&lt;p&gt;Another thing that I found good is that the author included empiric benchmarks as well as complexity analysis. The chapters about Path Finding in AI and computational geometry were very interesting, especially because it is not widely dealt with in other books.&lt;/p&gt;
&lt;p&gt;It also has very good references for each chapter.&lt;/p&gt;
&lt;p&gt;This book was perfect to read with Kindle, the navigation was very easy.&lt;/p&gt;
&lt;h4&gt;Algorithms&lt;/h4&gt;

&lt;p&gt;This book is a good book, but suffers from several drawbacks regarding to other books. First, the book covers a lot of data structures and algorithms. Then, it also has very good explanations about complexity classes. It also has a lot of exercises. I also liked a lot the chapter about string algorithms that was lacking in previous books.&lt;/p&gt;
&lt;p&gt;Most of the time, the explanations are good, but sometimes, I found them quite hard to understand. Moreover, some parts of code are also hard to follow. The author included Java runs of some of programs. In my opinion, this is quite useless, empiric benchmarks could have been useful, but not single runs of the program. Some of the diagrams were also hard to read, but that's perhaps a consequence of the Kindle.&lt;/p&gt;
&lt;p&gt;A think that disappointed me a bit is that the author doesn't use big Oh notation. Even, if we have enough information to easily get the Big Oh equivalent, I don't understand why a book about algorithms doesn't use this notation.&lt;/p&gt;
&lt;p&gt;Just like the first book, there is no simple view of a given algorithm that contains all the information about an algorithm. Another think that disturbed me is that the author takes time to describe an API around the algorithms and data structures and about the Java API. Again, in my opinion only, it takes a too large portion of the book.&lt;/p&gt;
&lt;p&gt;Again, this book was perfect to read with Kindle, the navigation was very easy.&lt;/p&gt;
&lt;h4&gt;Introduction to Algorithms&lt;/h4&gt;

&lt;p&gt;This book is the most complete I read about algorithms and data structures by a large factor. It has very complete explanations about complexity analysis: big Oh, Big Theta, Small O. For each data structure and algorithm, the complexity analysis is very detailed and very well explained. The pieces of code are written in a very good pseudo code manner.&lt;/p&gt;
&lt;p&gt;As I said before, the complexity analysis are very complete and sometimes very complex. This can be either an advantage or a disadvantage, depending of what you awaits from the book. For example, the analysis is made using several notations Big Oh, Big Theta or even small Oh. Sometimes, it is a bit hard to follow, but it provides very good basis for complexity analysis in general.&lt;/p&gt;
&lt;p&gt;The book  was also the one with the best explanations about linear time sorting algorithms. In the other books, I found difficult to understand sorts like counting sort or bucket sort, but in this book, the explanations are very clear. It also includes multithreaded algorithm analysis, number theoretic algorithms, polynomials and a very complete chapter about linear programming.&lt;/p&gt;
&lt;p&gt;The book contains a huge number of exercises for each chapters and sub chapters.&lt;/p&gt;
&lt;p&gt;This book will not only help you find the best suited algorithm for a given problem, it will also help you understand how to write your own algorithm for a problem or how to analyze deeply an existing solution.&lt;/p&gt;
&lt;h4&gt;Algorithms Book Wrap-up&lt;/h4&gt;

&lt;p&gt;As I read all these Algorithms books in order, it's possible that my review is a bit subjective regarding to comparisons to other books.&lt;/p&gt;
&lt;p&gt;If you plan to work in C++ and need more knowledge in algorithms and C++, I advice you to read &lt;strong&gt;Data Structures &amp;amp; Algorithm Analysis in C++&lt;/strong&gt;, that is really awesome. If you want a very deep knowledge about algorithm analysis and algorithms in general and have good mathematical basis, you should really take a deep look at &lt;strong&gt;Introduction to Algorithms&lt;/strong&gt;. If you want short introduction about algorithms and don't care about the implementation language, you can read &lt;strong&gt;Algorithms in a Nutshell&lt;/strong&gt;. &lt;strong&gt;Algorithms&lt;/strong&gt; is like a master key, it will gives you good starting knowledge about algorithm analysis and a broad range of algorithms and data structures.&lt;/p&gt;&lt;/div&gt;</description><category>Algorithm</category><category>Books</category><category>C++</category><category>Conception</category><category>Java</category><category>Performances</category><category>Programming</category><guid>http://wichtounet.github.io/posts/2012/08/algorithms-books-reviews.html</guid><pubDate>Fri, 24 Aug 2012 08:52:04 GMT</pubDate></item><item><title>EDDI Compiler 1.1.1 – Dynamic Memory Allocation and Constructors/Destructors</title><link>http://wichtounet.github.io/posts/2012/07/eddi-compiler-1-1-1-dynamic-memory-allocation-constructors-destructors.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;As I'm in holiday, the work is going pretty fast. The &lt;strong&gt;version 1.1.1&lt;/strong&gt; of the &lt;strong&gt;EDDI Compiler&lt;/strong&gt; (eddic) is available.&lt;/p&gt;
&lt;p&gt;This version introduces two major changes. The first is the support of dynamic memory allocation. You can allocate a struct or a standard type in help using the new operator. The memory can be released using the delete operator. Another related improved is the addition of constructors and destructors to the language. The following sample shows what can be done with the new features:&lt;/p&gt;
&lt;p&gt;[cpp]struct A {
    int a;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Constructed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Destructed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;void main(){
    A* b = new A(55);
    delete b;
}[/cpp]&lt;/p&gt;
&lt;p&gt;The constructor is called once the memory is allocated. The delete operator calls the destructor and then free the memory. &lt;/p&gt;
&lt;p&gt;When a structure is allocated on the stack, the constructor is called at the declaration point and the destructor is called when the variable gets out of scope. &lt;/p&gt;
&lt;p&gt;The memory manager is quite simple for now. Memory is allocated in blocks. Each block has a header indicating the size of the block and its availability. The size of the header is 8 bytes in 32 bits and 16 bytes in 64 bits. The free operation can be done in constant time by just setting the availability flag to false. The disadvantage of this technique is that all the blocks needs to be tested to find a free block. This can be slow in some situations. I will try to make a better version in the future. &lt;/p&gt;
&lt;p&gt;For that, the memory model has been improved. All the offsets are now increasing and the stack addresses are set at the end of the block. &lt;/p&gt;
&lt;p&gt;Another interesting improvement of the language is the support of switch. For now, only switch on int is supported. Here is an example of a switch in EDDI:&lt;/p&gt;
&lt;p&gt;[cpp]switch(a){
    case 3:
        print("3");
    case 4:
        print("4");
    case 5:
        print("5");
    case 6:
        print("6");
    default:
        print("default");
}[/cpp]&lt;/p&gt;
&lt;p&gt;The performances of the optimizer have been improved, by doing live-variable analysis less often. Pointers can now be passed in registers. Some of the variables used as temporary copies are removed &lt;/p&gt;
&lt;p&gt;The peephole optimizer has been improved to use conditional move when possible. Moreover, the peephole optimizer is now able to perform some local copy propagation. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Future work&lt;/h4&gt;
&lt;p&gt;The next version of the EDDI Compiler will be the version 1.1.2. This version will add features to read the command-line. Moreover, it will also add support for char type and string comparisons. With that, I think that the language will start to be usable for toy applications. &lt;/p&gt;
&lt;p&gt;There  will be some improvements to the code that have been left aside for a too long time. &lt;/p&gt;
&lt;h4&gt;Download&lt;/h4&gt;

&lt;p&gt;You can find the EDDI Compiler sources on the Github repository: https://github.com/wichtounet/eddic&lt;/p&gt;
&lt;p&gt;The exact version I refer to is the v1.1.1 available in the GitHub tags or directly as the release branch.&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Compilers</category><category>EDDI</category><category>EDDI</category><category>Releases</category><guid>http://wichtounet.github.io/posts/2012/07/eddi-compiler-1-1-1-dynamic-memory-allocation-constructors-destructors.html</guid><pubDate>Mon, 30 Jul 2012 12:18:01 GMT</pubDate></item><item><title>C++11 Synchronization Benchmark</title><link>http://wichtounet.github.io/posts/2012/07/c11-synchronization-benchmark.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In the previous parts of this serie, we saw some C++11 Synchronization techniques: locks, lock guards and atomic references.&lt;/p&gt;
&lt;p&gt;In this small post, I will present the results of a little benchmark I did run to compare the different techniques. In this benchmark, the critical section is a single increment to an integer. The critical section is protected using three techniques:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;A single std::mutex with calls to lock() and unlock()&lt;/li&gt;
    &lt;li&gt;A single std::mutex locked with std::lock_guard&lt;/li&gt;
    &lt;li&gt;An atomic reference on the integer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tests have been made with 1, 2, 4, 8, 16, 32, 64 and 128 threads. Each test is repeated 5 times.&lt;/p&gt;
&lt;p&gt;The results are presented in the following figure:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/2012/07/c11-synchronization-benchmark/synchronization_cpp_benchmarks/" rel="attachment wp-att-2071"&gt;&lt;img class=" wp-image-2071  " title="C++11 Synchronization Benchmark Result" src="http://wichtounet.github.io/wp-content/uploads/2012/07/synchronization_cpp_benchmarks-300x230.png" alt="C++11 Synchronization Benchmark Result" width="300" height="230"&gt;&lt;/a&gt; C++11 Synchronization Benchmark Result&lt;/p&gt;
&lt;p&gt;As expected, the mutex versions are much slower than the atomic one. An interesting point is that the the atomic version has not a very good scalability. I would have expected that the impact of adding one thread would not be that high.&lt;/p&gt;
&lt;p&gt;I'm also surprised that the lock guard version has a non-negligible overhead when there are few threads.&lt;/p&gt;
&lt;p&gt;In conclusion, do not locks when all you need is modifying integral types. For that, std::atomic is much faster. Good Lock-Free algorithms are almost always faster than the algorithms with lock.&lt;/p&gt;
&lt;p&gt;The sources of the benchmark are available on Github: &lt;a href="https://github.com/wichtounet/articles/tree/master/src/threads/benchmark"&gt;https://github.com/wichtounet/articles/tree/master/src/threads/benchmark&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Benchmarks</category><category>C++</category><category>C++</category><category>C++11</category><category>C++11 Concurrency Tutorial</category><category>Concurrency</category><category>Performances</category><guid>http://wichtounet.github.io/posts/2012/07/c11-synchronization-benchmark.html</guid><pubDate>Thu, 26 Jul 2012 08:47:59 GMT</pubDate></item><item><title>EDDI Compiler 1.1.0 - Member functions</title><link>http://wichtounet.github.io/posts/2012/07/eddi-compiler-1-1-0-member-functions.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;version 1.1.0&lt;/strong&gt; of the &lt;strong&gt;EDDI Compiler&lt;/strong&gt; (eddic) is available. It took much less time to implement that version than I thought. &lt;/p&gt;
&lt;p&gt;The main change to the language is the &lt;strong&gt;support of member functions&lt;/strong&gt;. Each structure can now declare some functions. Functions can be called in each structure object. Here is an example of what can be done with that feature in EDDI:&lt;/p&gt;
&lt;p&gt;[cpp]struct Counter {
    int value;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;void main(){
    Counter counter;
    counter.increment();
    println(counter.value);&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}[/cpp]&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;this&lt;/em&gt; pointer is available in each member function. The pointer is passed on the stack just like any other parameter. &lt;/p&gt;
&lt;p&gt;Another improvement is the support of the &lt;strong&gt;ternary operator&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;[cpp]void main(){
    int a = 5 &amp;gt; 2 ? 44 : 66;
    println(a);
}[/cpp]&lt;/p&gt;
&lt;p&gt;The inliner has been improved to support inlining member functions and functions with pointer parameters. The parameter allocation in register is only done starting at O1. &lt;/p&gt;
&lt;p&gt;The peephole optimizer has also been improved. Some stacks operations optimization are performed and some unnecessary copies of parameter register are removed.  &lt;/p&gt;
&lt;p&gt;Finally, the assembly generation has been improved to not use stack frames starting at O2. When this optimization is enabled, the local variables are addressed using stack pointers instead of the base pointer that is not used anymore. This optimization reduces the overhead of function calls. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Future work&lt;/h4&gt;
&lt;p&gt;The next version of the EDDI Compiler will be the &lt;strong&gt;version 1.1.1&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Download&lt;/h4&gt;

&lt;p&gt;You can find the compiler sources on the Github repository: &lt;a title="eddic on GitHub" href="https://github.com/wichtounet/eddic"&gt;https://github.com/wichtounet/eddic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The exact version I refer to is the v1.1 available in the GitHub tags or directly as the release branch.&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Compilers</category><category>EDDI</category><category>EDDI</category><category>Optimization</category><guid>http://wichtounet.github.io/posts/2012/07/eddi-compiler-1-1-0-member-functions.html</guid><pubDate>Sun, 22 Jul 2012 06:18:57 GMT</pubDate></item><item><title>Manage command-line options with Boost Program Options</title><link>http://wichtounet.github.io/posts/2012/07/manage-command-line-boost-program-options.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In command-line program, we often faces problems with the management of command-line options. When you have a few options, it's not a problem. But when writing complex programs with tens of options (or hundreds), it starts to be too complicated to manage by hand. That's where &lt;strong&gt;Boost Program Options&lt;/strong&gt; enters the game!&lt;/p&gt;
&lt;p&gt;Boost Program Options is one of the Boost C++ Libraries. It is a very powerful library to handle command-line options. You define all the options of the program and then Boost Program Options takes care of all. It parses the command line, handles errors, gets values and even displays help. It is not a perfect library. But it is very complete that will answer most of the common needs. &lt;/p&gt;
&lt;p&gt;This library is not header-only. You will need to build the library and link your program with the library. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Getting started&lt;/h4&gt;
&lt;p&gt;In this article, I will use &lt;em&gt;po&lt;/em&gt; as an abbreviation of boost::program_options and all source will contains this namespace alias:&lt;/p&gt;
&lt;p&gt;[cpp]namespace po = boost::program_options;[/cpp]&lt;/p&gt;
&lt;p&gt;First of all, it is necessary to create an instance of po::option_description:&lt;/p&gt;
&lt;p&gt;[cpp]po::options_description description("MyTool Usage");&lt;/p&gt;
&lt;p&gt;description.add_options()
    ("help", "Display this help message")
    ("version", "Display the version number");[/cpp]&lt;/p&gt;
&lt;p&gt;The parameter to the constructor is the title of the options. To add options, you use the add_options() function and append all your options, each one surrounded with parenthesis. Here, we declared two options (help and version). They can be set with &lt;em&gt;--help&lt;/em&gt; and &lt;em&gt;--version&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Then, you can parse the command line by declaring a po::variables_map to store the variables and parse the command line into that storage: &lt;/p&gt;
&lt;p&gt;[cpp]po::variables_map vm;&lt;/p&gt;
&lt;p&gt;po::store(po::command_line_parser(argc, argv).options(description).run(), vm);&lt;/p&gt;
&lt;p&gt;po::notify(vm);[/cpp]&lt;/p&gt;
&lt;p&gt;Then, you can easily verify if an option has been set by using the &lt;em&gt;count(const std::string&amp;amp; name)&lt;/em&gt; function on the &lt;em&gt;vm&lt;/em&gt; object: &lt;/p&gt;
&lt;p&gt;[cpp]if(vm.count("help")){
    std::cout &amp;lt;&amp;lt; description;
}[/cpp]&lt;/p&gt;
&lt;p&gt;You can use &lt;em&gt;operator on the description to output all the options of program. &lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Short options&lt;/h4&gt;

&lt;p&gt;By default, all the options are accessed by using -- in front of them. You can also specify a short version for each option: &lt;/p&gt;
&lt;p&gt;[cpp]description.add_options()
    ("help,h", "Display this help message")
    ("version,v", "Display the version number");[/cpp]&lt;/p&gt;
&lt;p&gt;With that, you can display with either --help or -h. Even if you select help with -h, you can still verify if help has been set with count("help"). &lt;/p&gt;
&lt;h4&gt;Option with value&lt;/h4&gt;

&lt;p&gt;Boost Program Options can also handle option that need a specific value. Lets add a &lt;i&gt;compression&lt;/i&gt; option:&lt;/p&gt;
&lt;p&gt;[cpp]description.add_options()
    ("help,h", "Display this help message")
    ("compression,c", po::value&amp;lt;int&amp;gt;(), "Compression level")
    ("version,v", "Display the version number");[/cpp]&lt;/p&gt;
&lt;p&gt;You can then get the value of option easily: &lt;/p&gt;
&lt;p&gt;[cpp]if(vm.count("compression")){
    std::cout &amp;lt;&amp;lt; "Compression level " &amp;lt;&amp;lt; vm["compression"].as&amp;lt;int&amp;gt;() &amp;lt;&amp;lt; std::endl;
}[/cpp]&lt;/p&gt;
&lt;p&gt;For the story, the option value are stored as boost::any. You can get the value of the option by using operator[] on the po::variables_map. You can get the value type with the as function with the type you need. &lt;/p&gt;
&lt;p&gt;On the command line, the value can be set with --compression 10, -c 10 or -c10. &lt;/p&gt;
&lt;p&gt;You can also configure a default value for an option:&lt;/p&gt;
&lt;p&gt;[cpp]description.add_options()
    ("help,h", "Display this help message")
    ("compression,c", po::value&amp;lt;int&amp;gt;()-&amp;gt;default_value(5), "Compression level")
    ("version,v", "Display the version number");[/cpp]&lt;/p&gt;
&lt;p&gt;With that, if the option is not set on the command line, the option has the specified value. With that, the option is always defined. &lt;/p&gt;
&lt;p&gt;Finally, you can also set an implicit value. This is the value of the option is the option is set to the command line without a value (--compression or -c): &lt;/p&gt;
&lt;p&gt;[cpp]description.add_options()
    ("help,h", "Display this help message")
    ("compression,c", po::value&amp;lt;int&amp;gt;()-&amp;gt;default_value(5)-&amp;gt;implicit_value(10), "Compression level")
    ("version,v", "Display the version number");[/cpp]&lt;/p&gt;
&lt;h4&gt;Positional options&lt;/h4&gt;

&lt;p&gt;It is often convenient to have a list of files on the command line. These options does not have a name. In Boost Program Options, these options are called positional options. You have to declare them in the describe as any other action. For example, for a list of files: &lt;/p&gt;
&lt;p&gt;[cpp]description.add_options()
    ("help,h", "Display this help message")
    ("compression,c", po::value&amp;lt;int&amp;gt;()-&amp;gt;default_value(5)-&amp;gt;implicit_value(10),"Compression level")
    ("input-files", po::value&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt;(), "Input files")
    ("version,v", "Display the version number");[/cpp]&lt;/p&gt;
&lt;p&gt;Then, you have to declare it as positional and then finally specify it when parsing the command-line: &lt;/p&gt;
&lt;p&gt;[cpp]po::positional_options_description p;&lt;/p&gt;
&lt;p&gt;p.add("input-files", -1);&lt;/p&gt;
&lt;p&gt;po::variables_map vm;&lt;/p&gt;
&lt;p&gt;po::store(po::command_line_parser(argc, argv).options(description).positional(p).run(), vm);&lt;/p&gt;
&lt;p&gt;po::notify(vm);[/cpp]&lt;/p&gt;
&lt;p&gt;The positional options values are retrieved the exact same way as other options: &lt;/p&gt;
&lt;p&gt;[cpp]if(vm.count("input-files")){
    std::vector&amp;lt;std::string&amp;gt; files = vm["input-files"].as&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt;();
    for(std::string file : files){
        std::cout &amp;lt;&amp;lt; "Input file " &amp;lt;&amp;lt; file &amp;lt;&amp;lt; std::endl;
    }
}[/cpp]&lt;/p&gt;
&lt;h4&gt;Wrap-Up&lt;/h4&gt;

&lt;p&gt;In this article, we saw the most important aspects of Boost Program Options. With these notions, you can start using this great library. If you need more information about the library, you can read &lt;a href="http://www.boost.org/doc/libs/1_50_0/doc/html/program_options.html" title="Boost Program Options documentation"&gt;the official documentation&lt;/a&gt; that is very well made. &lt;/p&gt;
&lt;p&gt;You can download the final sources of this article on Github: &lt;a href="https://github.com/wichtounet/articles/blob/master/src/boost_po/v1.cpp" title="Source file for this article"&gt;v1.cpp&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Boost</category><category>C++</category><category>C++</category><guid>http://wichtounet.github.io/posts/2012/07/manage-command-line-boost-program-options.html</guid><pubDate>Thu, 19 Jul 2012 08:19:37 GMT</pubDate></item><item><title>C++11 Concurrency Tutorial - Part 4: Atomic Types</title><link>http://wichtounet.github.io/posts/2012/07/c11-concurrency-tutorial-part-4-atomic-type.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In the previous article, we saw advanced techniques about mutexes. In this post, we will continue to work on mutexes with more advanced techniques. We will also study another concurrency technique of the C++11 Concurrency Library: Atomic Types&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Atomic Types&lt;/h4&gt;
&lt;p&gt;We will take, the example of a Counter:&lt;/p&gt;
&lt;p&gt;[cpp]struct Counter {
    int value;
    
    void increment(){
        ++value;
    }
    
    void decrement(){
        --value;
    }
    
    int get(){
        return value
    }
};[/cpp]&lt;/p&gt;
&lt;p&gt;We already saw that this class was not safe at all to use in multithreaded environment. We also saw how to make if safe using mutexes. This time, we will see how to make it safe using atomic types. The main advantage of this technique is its performance. Indeed, in most cases, the std::atomic operations are implemented with lock-free operations that are much faster than locks. &lt;/p&gt;
&lt;p&gt;The C++11 Concurrency Library introduces Atomic Types as a template class: std::atomic&lt;type&gt;. You can use any Type you want with that template and the operations on that variable will be atomic and so thread-safe. It has to be taken into account that it is up to the library implementation to choose which syncronization mechanism is used to make the operations on that type atomic. On standard platforms for integral types like int, long, float, ... it will be some lock-free technique. If you want to make a big type (let's saw 2MB storage), you can use std::atomic as well, but mutexes will be used. In this case, there will be no performance advantage. &lt;/type&gt;&lt;/p&gt;
&lt;p&gt;The main functions that std::atomic provide are the store and load functions that atomically set and get the contents of the std::atomic. Another interesting function is exchange, that sets the atomic to a new value and returns the value held previously. Finally, there are also two functions compare_exchange_weak and compare_exchance_strong that performs atomic exchange only if the value is equal to the provided expected value. These two last functions can be used to implement lock-free algorithms. &lt;/p&gt;
&lt;p&gt;std::atomic is specialized for all integral types to provide member functions specific to integral (like operators ++, --, fetch_add, fetch_sub, ...). &lt;/p&gt;
&lt;p&gt;It is fairly easy to make  the counter safe with std::atomic: &lt;/p&gt;
&lt;p&gt;[cpp]#include &amp;lt;atomic&amp;gt;&lt;/p&gt;
&lt;p&gt;struct AtomicCounter {
    std::atomic&amp;lt;int&amp;gt; value;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;};[/cpp]&lt;/p&gt;
&lt;p&gt;If you test this counter, you will see that the value is always the expected one. &lt;/p&gt;
&lt;h4&gt;Wrap-Up&lt;/h4&gt;

&lt;p&gt;In this article we saw a very elegant technique to perform atomic operations on any type. I advice you to use std::atomic any time you need to make atomic operations on a type, especially integral types. &lt;/p&gt;
&lt;p&gt;The source code for this article can be found &lt;a href="https://github.com/wichtounet/articles/tree/master/src/threads/part4" title="Source of this article"&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Next&lt;/h4&gt;

&lt;p&gt;In the next post of this series, we will see how to use the Futures facility to perform asynchronous task. &lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>C++</category><category>C++11</category><category>C++11 Concurrency Tutorial</category><category>Concurrency</category><category>Performances</category><guid>http://wichtounet.github.io/posts/2012/07/c11-concurrency-tutorial-part-4-atomic-type.html</guid><pubDate>Mon, 16 Jul 2012 09:22:04 GMT</pubDate></item><item><title>EDDI Compiler 1.0.3 - Inlining and register allocation</title><link>http://wichtounet.github.io/posts/2012/07/eddi-compiler-1-0-3-inlining-register-allocation.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;version 1.0.3&lt;/strong&gt; of the &lt;strong&gt;EDDI Compiler&lt;/strong&gt; (eddic) is available.&lt;/p&gt;
&lt;p&gt;The only improvement to the language is that the size of a global array can now be defined using a constant global variable.&lt;/p&gt;
&lt;p&gt;The main improvement of this version is the addition of &lt;strong&gt;inlining&lt;/strong&gt; in the optimization engine. This optimization replace a call to a function by the body of the function. For now, the inlining optimizer is quite basic. For now, it doesn't inline only a specific call site but all the call sites of a given function. Moreover, the heuristics used for inlining are quite simple (only the size of the function is taken into account). Only functions that takes int and float parameters can be inlined. This optimization will be improved in the future.&lt;/p&gt;
&lt;p&gt;The second main change is the arrival of a &lt;strong&gt;basic register allocation&lt;/strong&gt;. In each function, one or more variables can be assigned to registers. Only the most used variables are allocated into registers. Another optimization is that variables that are not used after all optimization techniques have been applied are removed from the function storage. The unused functions are also removed from the program after the optimization passes.&lt;/p&gt;
&lt;p&gt;Moreover, the performances of optimization engine have been improved by about 20%.&lt;/p&gt;
&lt;p&gt;The MTAC representation has been improved. The ARRAY operators have been removed because they can be replaced with the DOT operators. The preamble and prologue generations for LTAC has also been refactored. When it is possible, the stack frames are not generated.&lt;/p&gt;
&lt;p&gt;Finally, the configuration of the compiler has been improved with several new optimization option and the options being separated into several option groups.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Future work&lt;/h4&gt;
&lt;p&gt;The next version of the EDDI Compiler will be the &lt;strong&gt;version 1.1.0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The main change will be member functions inside of structures. For now, there will be no kind of virtual functions and inheritance but that will certainly come in its time.&lt;/p&gt;
&lt;p&gt;And as ever, I will be more than pleased to hear any idea you could have about this project :)&lt;/p&gt;
&lt;h4&gt;Download&lt;/h4&gt;

&lt;p&gt;You can find the compiler sources on the Github repository: &lt;a title="eddic on GitHub" href="https://github.com/wichtounet/eddic"&gt;https://github.com/wichtounet/eddic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The exact version I refer to is the v1.0.3 available in the GitHub tags or directly as the release branch.&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Compilers</category><category>EDDI</category><category>EDDI</category><category>Optimization</category><category>Releases</category><guid>http://wichtounet.github.io/posts/2012/07/eddi-compiler-1-0-3-inlining-register-allocation.html</guid><pubDate>Sat, 14 Jul 2012 08:46:15 GMT</pubDate></item><item><title>EDDI Compiler 1.0.2 – Better pointer support and Dead-Code Elimination</title><link>http://wichtounet.github.io/posts/2012/07/eddi-compiler-1-0-2-better-pointer-support-new-optimizations.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;version 1.0.2&lt;/strong&gt; of the &lt;strong&gt;EDDI Compiler&lt;/strong&gt; (eddic) is available.&lt;/p&gt;
&lt;p&gt;The language itself does not features something new, but the support of pointers has been greatly improved. You can now declare arrays of pointers and return pointers from functions. Structures can hold pointers as well. Moreover, arrays of structures are now supported. These new features have increased the number of operators of the MTAC Level.&lt;/p&gt;
&lt;p&gt;The more important part of this new version resides in the Optimization Engine. A new optimization technique has been implemented: Dead-Code Elimination. This technique removes all code that calculates values for variables that are not used anymore after this statement. Another change is that empty functions are removed after optimization (as well as every call to the removed functions). The liveness analyzer has been replaced by a global Live-Variable Analysis routine. This information is used in the optimization engine and in the LTAC Compiler. Finally, the Peephole Optimizer has been improved to support some local optimization techniques like constant propagation and basic dead-code elimination.&lt;/p&gt;
&lt;p&gt;The code generators have also been improved by outputting only native functions that are called. It means that if the program does not print a float, the _F5printF function will not be generated. Moreover, the native functions have been moved in external assembly files.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Future work&lt;/h4&gt;
&lt;p&gt;The next version of the EDDI Compiler will be the &lt;strong&gt;version 1.0.3&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This version will see a first basic version of Inlining optimization and certainly register-allocation of the most used variables. There will certainly be no change of the language itself.&lt;/p&gt;
&lt;p&gt;A cleanup of the two compilers (MTAC and LTAC) will be performed as well as simplification of the MTAC Language if possible.&lt;/p&gt;
&lt;p&gt;The other changes will mainly be minor changes to the compiler.&lt;/p&gt;
&lt;p&gt;And as ever, I will be more than pleased to hear any idea you could have about this project :)&lt;/p&gt;
&lt;h4&gt;Download&lt;/h4&gt;

&lt;p&gt;You can find the compiler sources on the Github repository: &lt;a title="eddic on GitHub" href="https://github.com/wichtounet/eddic"&gt;https://github.com/wichtounet/eddic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The exact version I refer to is the v1.0.2 available in the GitHub tags or directly as the release branch.&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Compilers</category><category>EDDI</category><category>EDDI</category><category>Optimization</category><guid>http://wichtounet.github.io/posts/2012/07/eddi-compiler-1-0-2-better-pointer-support-new-optimizations.html</guid><pubDate>Wed, 04 Jul 2012 08:56:22 GMT</pubDate></item><item><title>EDDI Compiler 1.0.1 - Pointers and better struct support</title><link>http://wichtounet.github.io/posts/2012/06/eddi-compiler-1-0-1-pointers-better-struct-support.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;version 1.0.1&lt;/strong&gt; of the &lt;strong&gt;EDDI Compiler&lt;/strong&gt; (eddic) is now available. &lt;/p&gt;
&lt;p&gt;The language itself has been updated to support &lt;strong&gt;pointers&lt;/strong&gt;. For now, this support is quite basic, but it allows to pass any type of the language by pointer to a function. No arithmetic is permitted on pointers, only dereferencing is allowed. The following sample shows how pointers are used in the language: &lt;/p&gt;
&lt;p&gt;[cpp]struct A {
    int a;
    string b;
    float c;
}&lt;/p&gt;
&lt;p&gt;void main(){
    A a;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"44"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;44f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;void test(A&lt;em&gt; a){
    A&lt;/em&gt; b = a;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"66"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;66f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}[/cpp]&lt;/p&gt;
&lt;p&gt;This sample is not very useful, but it shows the usage of pointers well enough. &lt;/p&gt;
&lt;p&gt;Another improvement to the language is that it supports now nested struct. It means that a member of a struct can be a struct itself. &lt;/p&gt;
&lt;p&gt;That's it for the language improvements. On the side of the compiler itself, I've improved the error reporting for structs. For example, the compiler display a clear error when a struct is recursively nested. The peephole optimizer has been improved a bit with new optimization, but it still rather simple. The optimization engine is now able to optimize functions in parallel. The improvement is not quite large, but that can be useful if there are a lot of functions. I've also improved a lot the Abstract Syntax Tree representation of assignments to unify variable, array and struct assignments in one Node with the notion of LeftValue. &lt;/p&gt;
&lt;p&gt;Finally, the tests have also been improved. New tests have been added and helped me find new bugs. Moreover, the tests are now made on each optimization levels for each test case. There was some issue with smallest optimization level. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Future work&lt;/h4&gt;
&lt;p&gt;The next version of the EDDI Compiler will be the &lt;strong&gt;version 1.0.2&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;This version will adds support for returning a pointer from a function. Moreover, it will also adds support for pointers inside of struct. The last change to the language will be that you will be able to declare array of pointers and array of structure. &lt;/p&gt;
&lt;p&gt;The peephole optimizer will perform more powerful optimization. At least, I will add an optimization to remove assignments to registers that are not used and use less registers. That will perhaps imply to add support for basic blocks in the LTAC Language. &lt;/p&gt;
&lt;p&gt;I will also add a powerful dead-code optimization to the Optimization Engine. This will replace the RemoveAssign and RemoveMultipleAssign pass of the engine, being more powerful. &lt;/p&gt;
&lt;p&gt;As ever, I'm open to any idea you could have about this project :)&lt;/p&gt;
&lt;h4&gt;Download&lt;/h4&gt;

&lt;p&gt;You can find the compiler sources on the Github repository: &lt;a title="eddic on GitHub" href="https://github.com/wichtounet/eddic"&gt;https://github.com/wichtounet/eddic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The exact version I refer to is the v1.0.1 available in the GitHub tags or directly as the release branch.&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Compilers</category><category>EDDI</category><category>EDDI</category><category>Optimization</category><guid>http://wichtounet.github.io/posts/2012/06/eddi-compiler-1-0-1-pointers-better-struct-support.html</guid><pubDate>Mon, 25 Jun 2012 08:57:17 GMT</pubDate></item></channel></rss>