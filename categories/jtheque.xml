<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>@Blog("Baptiste Wicht") (JTheque)</title><link>http://wichtounet.github.io/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://wichtounet.github.io/categories/jtheque.xml"></atom:link><language>en</language><lastBuildDate>Mon, 24 Mar 2014 21:52:18 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>JTheque Core 2.1.0 released !</title><link>http://wichtounet.github.io/posts/2010/10/jtheque-core-2-1-0-released.html</link><description>&lt;div&gt;&lt;p&gt;It's my pleasure to announce that I've finally released &lt;strong&gt;JTheque Core 2.1.0&lt;/strong&gt; !&lt;/p&gt;
&lt;p&gt;The different services of the core are now separated using &lt;strong&gt;OSGi&lt;/strong&gt;. With this separation, I've improved a lot the design of the core and the orthogonality of the different services. Each service is now an OSGi bundle. I've also refactored the implementation of all services. Several services have been completely rewritten. The majority of the bundles are now thread-safe.&lt;/p&gt;
&lt;p&gt;Now, to create modules for a JTheque application, you have to write an OSGi bundle representing the module. Then, you only have to use Spring to launch the module. This is done using &lt;strong&gt;Spring Dynamic Modules&lt;/strong&gt;. The used OSGi container is &lt;strong&gt;Felix&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now that this version of the core is finalized, I'll updates the applications. First of all, JTheque Movies with the new version of the core.&lt;/p&gt;
&lt;p&gt;Fore more informations and to download JTheque Core, you can go on &lt;a href="http://www.jtheque.com/jtheque-core"&gt;the description page&lt;/a&gt;. If you want to try developing a module (or see how it is done), you can consult &lt;a href="http://www.jtheque.com/jtheque-core/guides/develop-modular-application-jtheque-core-2-1-0"&gt;this starter guide&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JTheque</category><category>Modular</category><category>OSGi</category><category>Releases</category><category>Spring</category><guid>http://wichtounet.github.io/posts/2010/10/jtheque-core-2-1-0-released.html</guid><pubDate>Wed, 20 Oct 2010 05:12:33 GMT</pubDate></item><item><title>JTheque Utils 1.1.5</title><link>http://wichtounet.github.io/posts/2010/09/jtheque-utils-1-1-5.html</link><description>&lt;div&gt;&lt;p&gt;It's my pleasure to announce the release of a new version of &lt;strong&gt;JTheque Utils&lt;/strong&gt;, the &lt;strong&gt;1.1.5&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There is a lot of changes in this version. First of all, the library is now OSGi Ready, you can use it with no problem in an OSGi application. Here are the main changes of this version :&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;The main classes have been made thread safe and all the classes are now documented to indicate if they are thread safe, not thread safe or immutable.&lt;/li&gt;
    &lt;li&gt;The library has now some annotations to document thread safety, thanks to Brian Goetz for the idea&lt;/li&gt;
    &lt;li&gt;SwingUtils support now headless environment&lt;/li&gt;
    &lt;li&gt;Version has a better version comparison&lt;/li&gt;
    &lt;li&gt;A new simple way to manage system properties with the SystemProperty class&lt;/li&gt;
    &lt;li&gt;CollectionUtils has a new set of methods to create collections and concurrent collections&lt;/li&gt;
    &lt;li&gt;A simple thread safe weak event listener list, WeakEventListenerList&lt;/li&gt;
    &lt;li&gt;HashCodeUtils has been improved to manage arrays&lt;/li&gt;
    &lt;li&gt;Some classes have been made Immutable&lt;/li&gt;
    &lt;li&gt;The utility class have new methods&lt;/li&gt;
    &lt;li&gt;And a lot of other little changes and bug fixes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More informations on &lt;a title="JTheque Utils" href="http://www.jtheque.com/jtheque-utils" target="_self"&gt;the JTheque website&lt;/a&gt;.  You can download it &lt;a title="Downloads of JTheque Utils" href="http://www.jtheque.com/jtheque-utils/downloads" target="_blank"&gt;from here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope that this library will be useful to someone.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JTheque</category><category>Libraries</category><category>OSGi</category><category>Releases</category><guid>http://wichtounet.github.io/posts/2010/09/jtheque-utils-1-1-5.html</guid><pubDate>Thu, 16 Sep 2010 06:01:19 GMT</pubDate></item><item><title>A website for JTheque</title><link>http://wichtounet.github.io/posts/2010/08/a-website-for-jtheque.html</link><description>&lt;div&gt;&lt;p&gt;I've the pleasure to inform you that I've created a &lt;strong&gt;new website in English for JTheque&lt;/strong&gt; : &lt;a title="JTheque Project Website" href="http://www.jtheque.com" target="_blank"&gt;http://www.jtheque.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The old websites of JTheque (a French website and a French forge) were completely out of date and were too complicated too manage. This time I created an english, really simple, website to add the more useful informations about my JTheque projects. I always wanted to have a real website for JTheque. Before that, I had the Maven auto generated websites, but this is not a real website and it's not really good-looking. I used Google Sites to create this website.&lt;/p&gt;
&lt;p&gt;At this time, I've included three projects in the website : JTheque Core, JTheque Utils and JTheque XML Utils. There is not a lot of informations for the moment,  but from this time I'll include all the future informations in this new website and I will of course inform you via this blog of all the informations about my projects.&lt;/p&gt;
&lt;p&gt;I hope that this website will interest you and that it will help to promote a little my JTheque Project.&lt;/p&gt;
&lt;p&gt;If you found any error on the website, don't hesitate to contact me, via comment or email or whatever you want. If you need more informations on one or more project, don't hesitate to request them and I will include them in the website as soon as possible.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JTheque</category><guid>http://wichtounet.github.io/posts/2010/08/a-website-for-jtheque.html</guid><pubDate>Sat, 14 Aug 2010 09:51:40 GMT</pubDate></item><item><title>JTheque is migrating to Git</title><link>http://wichtounet.github.io/posts/2010/06/jtheque-is-migrating-to-git.html</link><description>&lt;div&gt;&lt;p&gt;Some informations about the current state of JTheque. I'm currently migrating it from SVN to Git. Actually the projet is hosted at Developpez.com, a french community. For more visibility, i wanted to host it in an english website. After several days of comparative, I chosen Github has host. Because i chose Git, i think it's the best and easier community to share projects using Git.&lt;/p&gt;
&lt;p&gt;I will use a subdomain in this website (jtheque.baptiste-wicht.com) to host the Javadoc and maven reports, because it take too space to store it at GitHub. I will use GitHub for the sources, issues and Wiki.&lt;/p&gt;
&lt;p&gt;After only several days of work with Git, I found it really fun and comfortable to work with.&lt;/p&gt;
&lt;p&gt;Here are the already created projects on GitHub :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-utils" target="_blank"&gt;jtheque-utils&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-unit-utils" target="_blank"&gt;jtheque-unit-utils&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-xml-utils" target="_blank"&gt;jtheque-xml-utils&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-core" target="_blank"&gt;jtheque-core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-primary-utils" target="_blank"&gt;jtheque-primary-utils&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-movies-module" target="_blank"&gt;jtheque-movies-module&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-memory-module" target="_blank"&gt;jtheque-memory-module&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-osgi-wrap" target="_blank"&gt;jtheque-osgi-wrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of them are not completed at all. But the start is here. Don't hesitate to comment on how I did that. I've also already created a site for jtheque-xml-utils (&lt;a href="http://jtheque.baptiste-wicht.com/xml-utils/"&gt;http://jtheque.baptiste-wicht.com/xml-utils/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I will migrate all the projects into Git and complete the GitHub repositories and Maven Site the next few weeks.&lt;/p&gt;
&lt;p&gt;If I didn't post a lot these last weeks, it's because, it's the end of the semester, so it seems a lot of exams and projects to finish, so not a lot of time to post. I will do better the next month.&lt;/p&gt;&lt;/div&gt;</description><category>Git</category><category>Java</category><category>JTheque</category><guid>http://wichtounet.github.io/posts/2010/06/jtheque-is-migrating-to-git.html</guid><pubDate>Tue, 15 Jun 2010 14:40:56 GMT</pubDate></item><item><title>JTheque licensed under Apache License 2.0</title><link>http://wichtounet.github.io/posts/2010/05/jtheque-licensed-under-apache-license-2-0.html</link><description>&lt;div&gt;&lt;p&gt;I decided to change the licence of all the JTheque Projects (The Core, the Utils and all the applications) to &lt;a href="http://www.apache.org/licenses/LICENSE-2.0.html"&gt;Apache Licence 2.0&lt;/a&gt;. The current license was GNU GPL V3. &lt;/p&gt;
&lt;p&gt;I wanted to remove the copyleft clause of the GPL License to make the use of JTheque more simple and more open. For me the copyleft is not really important, I need only the copyright clause. &lt;/p&gt;
&lt;p&gt;So, all the next versions of one of the JTheque Projects will now be made available under the Terms of the Apache License 2.0.&lt;/p&gt;&lt;/div&gt;</description><category>Apache</category><category>JTheque</category><category>Others</category><guid>http://wichtounet.github.io/posts/2010/05/jtheque-licensed-under-apache-license-2-0.html</guid><pubDate>Tue, 04 May 2010 12:49:20 GMT</pubDate></item><item><title>First build of JTheque with Sonar 2.0</title><link>http://wichtounet.github.io/posts/2010/05/first-build-jtheque-sonar-2-0.html</link><description>&lt;div&gt;&lt;p&gt;This week-end I updated the version of Sonar to &lt;a href="http://www.baptiste-wicht.com/2010/03/sonar-2-0-released/"&gt;the new version 2.0&lt;/a&gt; and migrated it from Tomcat 5.5 to Tomcat 6.0. I waited until now for the plugins I use to be compatible. Now, all my plugins are compatible :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Motion Chart : An elegant chart demonstrating the evolutions of metrics build after build&lt;/li&gt;
    &lt;li&gt;Quality Index : Compute a quality index for each project based on 4 axes : Coding, Complexity, Coverage and Style&lt;/li&gt;
    &lt;li&gt;Radiator : Display a view like the main view of all projects (all the rectangles with a lot of colors) for all the components of a project&lt;/li&gt;
    &lt;li&gt;Rules Meter : Indicate for each project how many rules were activated during analysis&lt;/li&gt;
    &lt;li&gt;SCM Activity : Compute some metrics about the SCM Activity of the project&lt;/li&gt;
    &lt;li&gt;TagList : Analyze some tag (@TODO, @FIXME, ...) in your code and display them in the project&lt;/li&gt;
    &lt;li&gt;Technical Debt : Compute a technical debt estimation for all the problems of your project&lt;/li&gt;
    &lt;li&gt;Timeline : Display a chart of the evolution of the metrics build after build&lt;/li&gt;
    &lt;li&gt;Build Stability : Display the stability of the builds on the continuous integration system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I made the first build of JTheque with Sonar 2.0.&lt;/p&gt;
&lt;p&gt;At first view, there is not a lot of changes with this new version, but the main view has been a little improved and the new analysis are good. Now you've metrics about your design and about the dependencies to cut to make your design better. They added a good dependency matrix to each project.&lt;/p&gt;
&lt;p&gt;This version works well like the older. The only things to pay attention for the update is the long time the database upgrade takes.&lt;/p&gt;
&lt;p&gt;I've also updated Hudson to the last version and also migrated it to my Tomcat 6.0.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JTheque</category><category>Sonar</category><guid>http://wichtounet.github.io/posts/2010/05/first-build-jtheque-sonar-2-0.html</guid><pubDate>Sun, 02 May 2010 13:09:45 GMT</pubDate></item><item><title>JTheque : Problems when migrating to OSGi</title><link>http://wichtounet.github.io/posts/2010/04/jtheque-problems-migrating-osgi.html</link><description>&lt;div&gt;&lt;p&gt;Like you perhaps know, i'm currently &lt;a title="JTheque is going to OSGi" href="http://www.baptiste-wicht.com/2010/03/jtheque-is-going-to-osgi/" target="_self"&gt;migrating JTheque to OSGi&lt;/a&gt;. During this migration i found several problems in the JTheque architecture that made the migration impossible without changing some concepts. In this post I'll detail all the problems I found.&lt;/p&gt;
&lt;h5&gt;Resources&lt;/h5&gt;

&lt;p&gt;First of all, i had to completely change the way to cache resources. Before, i used a ResourceManager to cache images/icons. To get an image/icon, i gave to it the path to the resource and the manager made the rest. I used Spring to load the resources (using the Resource class). That worked well because all the modules and the core were in the same application context.&lt;/p&gt;
&lt;p&gt;But now, there is an application context for each OSGi bundle, so that doesn't work at all. So i had to find an other way. The manager cannot load the resources because they're accessible from the other bundles. So I changes the way the manager works :&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;The modules must register all the resources they need in the resource manager. They can always use Spring to load the resource or direct use the Resource class to load it.&lt;/li&gt;
    &lt;li&gt;When the module need an image/icon, it ask the resource manager. The manager watch on the cache (the cache associates the Resource to the loaded image/icon) if the image is already cached. If it's cached, it directly return the image else, it load the image from the resource and return the loaded image&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In that way, the resource manager doesn't have to access directly to resources on other bundles and everything works well.&lt;/p&gt;
&lt;h4&gt;States&lt;/h4&gt;

&lt;p&gt;The states are a way to store configuration for the modules. Before, the states must implements an interface and when they we're saved, the class were saved in a file and at startup created by reflection. But that's was not possible anymore, because the class was not accessible from the state bundle.&lt;/p&gt;
&lt;p&gt;So I changed the way the data were saved using directly methods of the interface to get the stored data and to restore them at startup. Moreover, I also replaced the interface by annotations.&lt;/p&gt;
&lt;h4&gt;Miscellaneous&lt;/h4&gt;

&lt;p&gt;More than these other major changes, i've also some others problems :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;The JDBC driver class was not accessible. I add the package import to the manifest headers and get the driver version from SpringSource Repository to works with OSGi&lt;/li&gt;
    &lt;li&gt;Substance doesn't work anymore. At this time, i don't know i that comes from OSGi or from other changes i made in the application, but i've not solved this problem.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>Conception</category><category>JTheque</category><category>OSGi</category><guid>http://wichtounet.github.io/posts/2010/04/jtheque-problems-migrating-osgi.html</guid><pubDate>Sun, 18 Apr 2010 08:57:50 GMT</pubDate></item><item><title>OSGi and cyclic dependencies</title><link>http://wichtounet.github.io/posts/2010/03/osgi-and-cyclic-dependencies.html</link><description>&lt;div&gt;&lt;p&gt;I'm currently working on the "bundlisation" of the JTheque Core. I choose to cut core into several bundles each one representing a service provided by the core. &lt;/p&gt;
&lt;p&gt;I quickly have experencied problems with &lt;/p&gt;
&lt;p&gt;I quickly realized that the decoupling of my various services was almost nil. I had a huge number of dependencies for each bundle and worse, I had a lot of cyclic dependencies, either direct or indirect.&lt;/p&gt;
&lt;p&gt;For information, a direct cyclic dependency is a situation in which a bundle X depends on a bundle that depends on Y who is also depending itself of X. An indirect dependency cycle is the situation where X depends on Y, Y depends on Z and Z depends on X. I speak here of bundles, but it may relate to projects, classes or packages.&lt;/p&gt;
&lt;p&gt;Note that the different techniques that I will present also apply for dependencies between components non-OSGi, the principles are exactly the same.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;In the case of packages within the same application, even if we avoid this, it is possible to live with. However, in the case of bundle or projects, it is generally not even possible for the application builder. For me, the bundles are Maven modules. It is impossible to start the build of a bundle in a cycle since the builder must first bundle before the second and the second before the first, which is obviously not possible.&lt;/p&gt;
&lt;p&gt;In addition to be very bad in a system build, cyclic dependencies between components are also a huge design problem. Indeed, we cannot work on a bundle without working on the bundle B and vice versa. In addition to this, the two components are very difficult to evolve in a healthy way.&lt;/p&gt;
&lt;p&gt;The cyclic dependencies at the class level within a component does not pose real problems. It is always in the same component, classes can thus be linked in a cyclical way, even if it would still avoid it as soon as possible (it is not always).&lt;/p&gt;
&lt;p&gt;To return to JTheque so I had to solve the problem of cyclic dependencies before advancing further. There are many techniques to do this. Here are the tracks that I explored to resolve these dependencies. Note that these techiques cannot only solve the problem of cyclic dependencies, but also improves the architecture of its application.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Move the classes to the right location&lt;/strong&gt; : In some cases, I had classes in a bundle when they had nothing to do here. In this case, it may suffice to move them to another bundle. Note that this case is the easiest to solve and it's unfortunately not the most common. In addition to this, in case the classes to move depends on another bundles, it is possible that this creates new cyclic dependencies. An example is the collection management module, which was contained in the bundle of graphical interfaces.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Move functionalities&lt;/strong&gt; : I also found a lot of features, typically methods within a bundle that was not at the right place. For example, the bundle "modules" provided methods for updates while a bundle "update" existed. It was enough to move these features to the bundle update to solve my cycle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Badly cutted features&lt;/strong&gt; : Often, a feature, usually a method or a class, do too much things and causes dependencies that are not welcome here. Sometimes, thing again about the functionality and the role of each class / method may be enough to solve the problem. Note that this does not concern only the concepts of dependency, but is a basic principle of object-oriented design. In the case of JTheque I had for example a method allowing to select a collection that returns true if we could open the collection with the login / password entered false otherwise. But besides that, it displays an error in the collection view if there was a problem. But that was clearly not his role. I have updated this method so it does that test if we could open the collection or not and I implemented the display of the error in the Swing Action. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Separate functionalities of bundle&lt;/strong&gt; : It may happen that the bundle to do too much things or has several distinct aspects. In this case, you should immediately separate the bundle into several others with each one a clear responsibility. Often this will help solve a cyclic dependency, as fewer bundles have dependencies to each new bundles and each new bundles should have fewer dependencies to other bundles. But it can also introduce new cycles. In JTheque, I cut the modules "views" in 2 two bundles: views and ui. The views module contains the implementation of JTheque views and the "ui" module contains utility classes for creating views and generic Swing components that can be used elsewhere.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Introduce callback system&lt;/strong&gt; : A callback system is a simple listeners system that could solve dependencies. Rather than a bundle directly notify another bundle, the second register as the first listener. Thus the first does not need to know the second. It is immediately obvious that listeners are more powerful than they might initially appear. In the case of JTheque, I implemented this for selecting collections. In fact, the collections manager called directly the view that the collection had been chosen. Using a listener, it is much more flexible and collections manager automatically notifies all listeners. In addition to this, if I need later a second listener, I have nothing to change in the collections bundle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Separate specification and implementation&lt;/strong&gt; : As it is not always possible to remove cyclic dependencies directly, we can bypass them by separating the specification part and the  implementation part. This technique can sometimes be useful when it is really difficult to solve the cycle. It therefore separates a bundle in any specific part that is called from the outside and part of implementation which can then have dependencies outside. Note that this is clearly not often feasible in the state because it is not always possible to completely separate the implementation of the specification without cycles. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Group to modules in one&lt;/strong&gt; : In some cases, we realize that two modules are so intrinsically linked they are in fact only one module. In this case, the best solution is to group them in one bundle.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, now I have list the various techniques I used to resolve cyclic dependencies in bundles of JTheque Core. There are certainly many others, but it was enough for me. &lt;/p&gt;
&lt;p&gt;I hope this will be useful to people trying to solve problems of cyclic dependencies.&lt;/p&gt;&lt;/div&gt;</description><category>Conception</category><category>Java</category><category>JTheque</category><category>OSGi</category><guid>http://wichtounet.github.io/posts/2010/03/osgi-and-cyclic-dependencies.html</guid><pubDate>Mon, 15 Mar 2010 15:19:54 GMT</pubDate></item><item><title>JTheque is going to OSGi</title><link>http://wichtounet.github.io/posts/2010/03/jtheque-is-going-to-osgi.html</link><description>&lt;div&gt;&lt;p&gt;Just a little post to inform you that i'm currently migrating JTheque Core to OSGI / Spring Dynamic Modules. The core will be fractioned into several bundles. The JTheque Modules will also be OSGi bundles.&lt;/p&gt;
&lt;p&gt;It will increase the modularity of the different services of the Core. And it will also be a more standard way to develop modules. And last but not least, it's an opportunity for me to learn OSGi and Spring Dm.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JTheque</category><category>Modular</category><category>OSGi</category><category>Spring</category><guid>http://wichtounet.github.io/posts/2010/03/jtheque-is-going-to-osgi.html</guid><pubDate>Tue, 02 Mar 2010 12:35:52 GMT</pubDate></item><item><title>Develop a modular application with JTheque Core 2.0.3</title><link>http://wichtounet.github.io/posts/2010/02/modular-application-jtheque-core-2-0-3.html</link><description>&lt;div&gt;&lt;h4&gt;1. Introduction&lt;/h4&gt;

&lt;p&gt;This article will teach you how to develop a first application with JTheque Core.&lt;/p&gt;
&lt;p&gt;We will develop a basic modular application, like an hello world. This little program will be composed of :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;A JTheque application&lt;/li&gt;
    &lt;li&gt;A JTheque module who display an Hello World on the main view&lt;/li&gt;
    &lt;li&gt;A module who will add an option menu to display one more time "Hello World"&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h4&gt;2. JTheque environment&lt;/h4&gt;

&lt;p&gt;The first thing to do before starting develop our application and our modules is to download the "development environment" of JTheque Core. A JTheque application needs some files and librairies to work.&lt;/p&gt;
&lt;p&gt;You can download an archive containing all necessary files on the website of the projects. Then you must choose the dev-base-XXX.zip file where XXX is the version number. In our case, we need the dev-base-2.0.3.zip file.&lt;/p&gt;
&lt;p&gt;When you've downloaded the file, unzip it. Here is the content of the folder :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;core &lt;/strong&gt;: Contains JTheque Core, the configuration and the application&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;lib &lt;/strong&gt;: Contains all the librairies&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;modules &lt;/strong&gt;: Contains all the modules&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;JTheque-Launcher.jar&lt;/strong&gt; : The launcher of the application. You must execute this file to launch your application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We only have two things to change in this folder. First, we have to add our application (application.xml) and its resources in the core folder. Then, we have to add our modules in the "modules" folder and declare it in the JTheque configuration.&lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h4&gt;3. Application&lt;/h4&gt;

&lt;p&gt;Now that we seen what is a JTheque Application, we'll develop it, the first part of our program.&lt;/p&gt;
&lt;p&gt;An application is basically a container for modules. It has a name, a version but adds no functionaly to the application, this a function of the modules. An application without modules is not useful and vice-versa.&lt;/p&gt;
&lt;p&gt;An application is composed of several things :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;An XML file (application.xml) describing the application&lt;/li&gt;
    &lt;li&gt;Some images (in the core/images folder)&lt;/li&gt;
    &lt;li&gt;Eventually some .properties i18n files in the core/i18n folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To define the internationalization values of the application, there is 2 ways. We can define the values directly in the XML file or use some i18n .properties files. This is this solution we will use in our case. The resource bundle must be named application and be in the core/i18n folder. Here are the files to create :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;application.properties&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;name=JTheque Demos
author=Baptiste Wicht
email=baptistewicht@redaction-developpez.com&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;application_en.properties&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;site=http://jtheque.developpez.com/en
copyright=JTheque 2009 All rights reserved&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;application_fr.properties&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;site=http://jtheque.developpez.com/
copyright=JTheque 2009 Tous droits reservés&lt;/pre&gt;

&lt;p&gt;Then, we can write the application.xml file :&lt;/p&gt;
&lt;p&gt;We declared than our application is available in french and in english. Moreover, we declare () to use the i18n files. i18n properties.&lt;/p&gt;
&lt;p&gt;The core is translated in english, french and german.&lt;/p&gt;
&lt;p&gt;For the images, we start to declare a logo.png file and a icon.png file for the application. We can use other extension specifying type="jpg" for exemple for a .jpg file.&lt;/p&gt;
&lt;p&gt;Here are the used images :&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/03/icon.png"&gt;&lt;img class="size-full wp-image-138" title="The window icon" src="http://wichtounet.github.io/wp-content/uploads/2010/03/icon.png" alt="The window icon" width="16" height="16"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/03/logo.png"&gt;&lt;img class="size-full wp-image-139" title="The application logo" src="http://wichtounet.github.io/wp-content/uploads/2010/03/logo.png" alt="The application logo" width="171" height="100"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We will now make a first try. For that, you just have to launch the JTheque-Launcher.jar at the root of the JTheque folder. It will launch the core with our application.&lt;/p&gt;
&lt;p&gt;Here is the result :&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/03/Screen1.png"&gt;&lt;img class="size-medium wp-image-140" title="Launch without any modules" src="http://wichtounet.github.io/wp-content/uploads/2010/03/Screen1-300x233.png" alt="Launch without any modules" width="300" height="233"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can see that the application launches weel, but there is nothing really interesting to do in this application because there is no modules to add functionalities.&lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h4&gt;4. The first module&lt;/h4&gt;

&lt;p&gt;Now that our module has been developed and is functional, we can make our first module of the application.&lt;/p&gt;
&lt;p&gt;This module will be very simple. It just display "Hello World !" on the main componnent of the application in an internationalized way.&lt;/p&gt;
&lt;p&gt;To declare a module, we need to create class with the @Module annotation. Then, we have to declare it in the Spring context and declare this last in the manifest of the jar.&lt;/p&gt;
&lt;p&gt;It's not necessary to know Spring to use JTheque. If you don't want to use Spring in your application, you can just declare the module in the Spring context withtout using it and then develop your application without use Spring context. You just have to know that the module will be created by Spring.&lt;/p&gt;
&lt;p&gt;The life cycle of a module is composed of three states :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;pre-plug : To make pre-configuration&lt;/li&gt;
    &lt;li&gt;plug : Here you must add the module in the application. It means edit view, add config elements, ...&lt;/li&gt;
    &lt;li&gt;unplug : Remove the module from the application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make operations in this 3 phases, you just have to add annotations on methods, respectively @PrePlug, @Plug et @Unplug. Then the application will detect this methods and invoke them.&lt;/p&gt;
&lt;p&gt;In our case, we need to edit the main component of the view in the plug phase. So we doesn't need the other phases.&lt;/p&gt;
&lt;p&gt;Starting with declaring our module with necessary annotations :&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jtheque&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;demos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jtheque.core.managers.module.annotations.Module&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jtheque.core.managers.module.annotations.Plug&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Module&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"jtheque-demo-module-1"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i18n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"classpath:org/jtheque/demos/first/i18n/first"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2.0.3"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;jarFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"jtheque-demo-module-1.jar"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DemoFirstModule&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Plug&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;plug&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here again, there is nothing hard. The annotation Module declare the informations about the module. The plug method is for this time empty. The i18n annotation contains the path (Spring resource convention) to the resource bundle of the module. bundle du module.&lt;/p&gt;
&lt;p&gt;Now we can declare informations about the module in the i18n files.&lt;/p&gt;
&lt;p&gt;A i18n file is a simple .properties file who contains a list of key/value couples. A i18n file represent a language. We use a set of this files to internationalize the application. They must have the same base name and finish with _language where "language" is the short form of the language$ (de, fr, en, it, ...).&lt;/p&gt;
&lt;p&gt;The key will be search depending on the id of the module. We directly add also the internationalization of the main view :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;first_en.properties&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;jtheque-demo-module-1.name=JTheque Demo Module 1
jtheque-demo-module-1.author=Baptiste Wicht
jtheque-demo-module-1.description=First demo module
label.message=Hello World !&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;first_fr.properties&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;jtheque-demo-module-1.name=JTheque Demo Module 1
jtheque-demo-module-1.author=Baptiste Wicht
jtheque-demo-module-1.description=Premier module de démo
label.message=Bonjour le monde !&lt;/pre&gt;

&lt;p&gt;The application will automatically search and resolve this messages to internationalize the module. We put this files in the org/jtheque/demos/module/first/resources/18n folder.&lt;/p&gt;
&lt;p&gt;To extend the application or access to the services of JTheque, we always have to use the Managers class who provide access to the managers (services) of JTheque Core. In our case, we need to access IViewManager who manage the view of the application.&lt;/p&gt;
&lt;p&gt;In the plug() method, we just have to add a JLabel with an internationalizable text. In JTheque, to make a component internationalizable, we have to implement the Internationalizable interface and add it to ILanguageManager to keep it in the good language. In the case of a label, this component exists in JTheque Core, its the JThequeI18nLabel who takes a i18n key as constructor parameter :&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Plug&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;plug&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;SwingUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inEdt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
            &lt;span class="n"&gt;JThequeI18nLabel&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JThequeI18nLabel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"label.message"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setFont&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFont&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;deriveFont&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

            &lt;span class="n"&gt;Managers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IViewManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;setMainComponent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's easy. We get our manager with the Managers class, then, we set our label as the main component.&lt;/p&gt;
&lt;p&gt;Now we'll declare our module in Spring context. It's a simple XML file :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;first.xml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We put this file at the same level of DemoFirstModule. For those who doesn't know spring, it's exactly if we create a new instance of our module and assign it to a variable named firstModule.&lt;/p&gt;
&lt;p&gt;We'll try this module. Then, we have to generate a jar of our project. The manifest of the jar must have the link to our XML file. Here is our manifest file :&lt;/p&gt;
&lt;pre&gt;Manifest-Version: 1.0
Module-Context: org/jtheque/demos/first/first.xml&lt;/pre&gt;

&lt;p&gt;Then we generate our Jar file and put it on the modules files of the JTheque environment with the name of jtheque-demo-module-1.jar.&lt;/p&gt;
&lt;p&gt;Now we have to configure JTheque to put our module in the application. To do that, we have to edit the config.xml file in the core.file. We just add the discovery tag to say that all the modules in the modules folder to the application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;config.xml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can now test the result launching JTheque-Launcher.jar and here is what we get :&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/02/Screen2.png"&gt;&lt;img class="size-medium wp-image-151" title="Hello World" src="http://wichtounet.github.io/wp-content/uploads/2010/02/Screen2-300x233.png" alt="Hello World" width="300" height="233"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Like we can see, our module is good integrated in our application.&lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h4&gt;5. The second module&lt;/h4&gt;

&lt;p&gt;We will now create a second module who will add an option menu to display another Hello World. We could of course do that in the first module, but it's to show how to create several modules.&lt;/p&gt;
&lt;p&gt;To add options menu, we just need the plug pahse. Here is the base of the new module (DemoSecondModule) :&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Module&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"jtheque-demo-module-2"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i18n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"classpath:org/jtheque/demos/second/i18n/second"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2.0.3"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jarFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"jtheque-demo-module-2.jar"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DemoSecondModule&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Plug&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;plug&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this i18n files :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;second_fr.properties&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;jtheque-demo-module-2.name=JTheque Demo Module 2
jtheque-demo-module-2.author=Baptiste Wicht
jtheque-demo-module-2.description=Deuxième module de démo
dialog.message=Bonjour le monde !&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;second_en.properties&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;jtheque-demo-module-2.name=JTheque Demo Module 2
jtheque-demo-module-2.author=Baptiste Wicht
jtheque-demo-module-2.description=Second demo module
dialog.message=Hello world !&lt;/pre&gt;

&lt;p&gt;It's basically the same things than for the first module. We'll now add an option to the "File" menu. For that, we have to add an internationalizable action, JThequeAction.&lt;/p&gt;
&lt;p&gt;So here is our simple action :&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jtheque&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;demos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;second&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jtheque.core.managers.view.able.IViewManager&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jtheque.core.managers.view.impl.actions.JThequeAction&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jtheque.core.managers.Managers&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.awt.event.ActionEvent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorldAction&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;JThequeAction&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;HelloWorldAction&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dialog.message"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;actionPerformed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActionEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Managers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IViewManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;displayI18nText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dialog.message"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nothing hard, we use the IViewManager to display an internationalizable text in a dialog box. We can now add this action on the menu using the IFeatureManager. From JTheque Core 2.0.3, there is a declarative way to create menu actions with the Menu interface. For that, we can extends the AbstractMenu class and choose the methods to override to add menus (features).&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Plug&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;plug&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Managers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IFeatureManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;addMenu&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DemoMenu&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DemoMenu&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;AbstractMenu&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="nf"&gt;getFileMenuSubFeatures&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;features&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;createSubFeature&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HelloWorldAction&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We just add an action on the "File" menu, with our action and we give it the 150 position (0 is the first position and 1000 is the last (exit)).&lt;/p&gt;
&lt;p&gt;Then we create the Spring xml file of the second module :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;second.xml&lt;/strong&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;beans&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.springframework.org/schema/beans"&lt;/span&gt;
       &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema-instance"&lt;/span&gt;
       &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="s"&gt;            http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class="s"&gt;            http://www.springframework.org/schema/beans/spring-beans.xsd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"secondaryModule"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"org.jtheque.demos.second.DemoSecondModule"&lt;/span&gt; &lt;span class="na"&gt;lazy-init=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can now generate the Jar file of the second module with this manifest :&lt;/p&gt;
&lt;pre&gt;Manifest-Version: 1.0
Module-Context: org/jtheque/demos/second/test.xml&lt;/pre&gt;

&lt;p&gt;Finally, we can test the complete application using JTheque-Launcher.jar :&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/02/Screen3.png"&gt;&lt;img class="size-medium wp-image-160" title="Nouveau menu" src="http://wichtounet.github.io/wp-content/uploads/2010/02/Screen3-300x170.png" alt="Nouveau menu" width="300" height="170"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/02/Screen4.png"&gt;&lt;img class="size-medium wp-image-161" title="Hello world" src="http://wichtounet.github.io/wp-content/uploads/2010/02/Screen4-300x232.png" alt="Hello world" width="300" height="232"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our second module is well integrated.&lt;/p&gt;
&lt;!--nextpage--&gt;

&lt;h4&gt;6. Conclusion&lt;/h4&gt;

&lt;p&gt;With relatively few code, we have developed a modular applications with 2 modules and that can have a lot more of modules.&lt;/p&gt;
&lt;p&gt;The services given by JTheque are many more. If you want to know more, for the moment, i'll guide you to the Javadoc of the last version of the core. I will try to create a full guide to present all the functionalities of the core.&lt;/p&gt;
&lt;p&gt;If you want to comment this article, don't hesitate to add a comment on the comment form at the end of the page.&lt;/p&gt;
&lt;p&gt;If you want to make a comment, a suggestion or talk about the JTheque project, you can also come to the dedicated forum. It's a french forum, but you can post in english.&lt;/p&gt;&lt;/div&gt;</description><category>Conception</category><category>Java</category><category>JTheque</category><category>Modular</category><guid>http://wichtounet.github.io/posts/2010/02/modular-application-jtheque-core-2-0-3.html</guid><pubDate>Sun, 07 Feb 2010 04:38:45 GMT</pubDate></item><item><title>New design for JTheque Web site</title><link>http://wichtounet.github.io/posts/2010/01/new-design-jtheque-website.html</link><description>&lt;div&gt;&lt;p&gt;I've made a new design for the JTheque web site : &lt;a title="New design for JTheque Web site" href="http://wichtounet.github.io/posts/2010/01/New%20design%20for%20JTheque%20Web%20site" target="_self"&gt;http://jtheque.developpez.com/en&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I took the same design than for my personal web site. The web site is still generated with Maven 2, but i use a custom maven skin to generate the site.&lt;/p&gt;&lt;/div&gt;</description><category>JTheque</category><category>Maven</category><guid>http://wichtounet.github.io/posts/2010/01/new-design-jtheque-website.html</guid><pubDate>Fri, 01 Jan 2010 12:33:53 GMT</pubDate></item><item><title>JTheque Movies 1.0</title><link>http://wichtounet.github.io/posts/2009/12/jtheque-movies-1-0.html</link><description>&lt;div&gt;&lt;p&gt;I finished the development of &lt;strong&gt;JTheque Movies 1.0&lt;/strong&gt; :)&lt;/p&gt;
&lt;p&gt;This application enable the user to manage a collection of movies and to read them directly in the application. For this last functionality, on Windows, you need Windows Media Player and on Linux you need VLC Media Player as web plugin. The user interface has been completely remade to be more esthetic.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Here are two screenshots of this new versions.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/03/JTheque-Movies-1.0-1.png"&gt;&lt;img alt="JTheque Movies 1.0 - View Movie" src="http://wichtounet.github.io/wp-content/uploads/2010/03/JTheque-Movies-1.0-1-300x233.png" title="JTheque Movies 1.0 - View Movie"&gt;&lt;/a&gt;
&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/03/JTheque-Movies-1.0-2.png"&gt;&lt;img alt="JTheque Movies 1.0 - Play Movie" src="http://wichtounet.github.io/wp-content/uploads/2010/03/JTheque-Movies-1.0-2-300x233.png" title="JTheque Movies 1.0 - Play Movie"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can download the both versions here :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://projets.developpez.com/attachments/download/345/JTheque_Movies_1.0_Windows.zip"&gt;Windows Version&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://projets.developpez.com/attachments/download/344/JTheque_Movies_1.0_Linux.zip"&gt;Linux Version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This version integrate this modules (french forge) :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://projets.developpez.com/projects/show/jtheque-movies-mod"&gt;JTheque Movies Module 1.3&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://projets.developpez.com/projects/show/jtheque-memory-mod"&gt;JTheque Memory Module 1.4.1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://projets.developpez.com/projects/show/jtheque-tools-mod"&gt;JTheque Tools Module 1.0.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the sources of this modules and of the core (JTheque Core) are all availabes under GPL V3 on the project management system (&lt;a href="http://projets.developpez.com"&gt;here (French)&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I hope that this program will be useful for somebody.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JTheque</category><category>Releases</category><guid>http://wichtounet.github.io/posts/2009/12/jtheque-movies-1-0.html</guid><pubDate>Wed, 23 Dec 2009 12:31:27 GMT</pubDate></item></channel></rss>