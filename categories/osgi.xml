<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Blog blog("Baptiste Wicht"); (Posts about OSGi)</title><link>http://baptiste-wicht.com/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://baptiste-wicht.com/categories/osgi.xml"></atom:link><language>en</language><lastBuildDate>Sun, 04 Jun 2017 20:17:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>JTheque Core 2.1.0 released !</title><link>http://baptiste-wicht.com/posts/2010/10/jtheque-core-2-1-0-released.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;It's my pleasure to announce that I've finally released &lt;strong&gt;JTheque Core 2.1.0&lt;/strong&gt; !&lt;/p&gt;
&lt;p&gt;The different services of the core are now separated using &lt;strong&gt;OSGi&lt;/strong&gt;. With this separation, I've improved a lot the design of the core and the orthogonality of the different services. Each service is now an OSGi bundle. I've also refactored the implementation of all services. Several services have been completely rewritten. The majority of the bundles are now thread-safe.&lt;/p&gt;
&lt;p&gt;Now, to create modules for a JTheque application, you have to write an OSGi bundle representing the module. Then, you only have to use Spring to launch the module. This is done using &lt;strong&gt;Spring Dynamic Modules&lt;/strong&gt;. The used OSGi container is &lt;strong&gt;Felix&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now that this version of the core is finalized, I'll updates the applications. First of all, JTheque Movies with the new version of the core.&lt;/p&gt;
&lt;p&gt;Fore more informations and to download JTheque Core, you can go on &lt;a href="http://www.jtheque.com/jtheque-core"&gt;the description page&lt;/a&gt;. If you want to try developing a module (or see how it is done), you can consult &lt;a href="http://www.jtheque.com/jtheque-core/guides/develop-modular-application-jtheque-core-2-1-0"&gt;this starter guide&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JTheque</category><category>Modular</category><category>OSGi</category><category>Releases</category><category>Spring</category><guid>http://baptiste-wicht.com/posts/2010/10/jtheque-core-2-1-0-released.html</guid><pubDate>Wed, 20 Oct 2010 05:12:33 GMT</pubDate></item><item><title>JTheque Utils 1.1.5</title><link>http://baptiste-wicht.com/posts/2010/09/jtheque-utils-1-1-5.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;It's my pleasure to announce the release of a new version of &lt;strong&gt;JTheque Utils&lt;/strong&gt;, the &lt;strong&gt;1.1.5&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There is a lot of changes in this version. First of all, the library is now OSGi Ready, you can use it with no problem in an OSGi application. Here are the main changes of this version :&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;The main classes have been made thread safe and all the classes are now documented to indicate if they are thread safe, not thread safe or immutable.&lt;/li&gt;
    &lt;li&gt;The library has now some annotations to document thread safety, thanks to Brian Goetz for the idea&lt;/li&gt;
    &lt;li&gt;SwingUtils support now headless environment&lt;/li&gt;
    &lt;li&gt;Version has a better version comparison&lt;/li&gt;
    &lt;li&gt;A new simple way to manage system properties with the SystemProperty class&lt;/li&gt;
    &lt;li&gt;CollectionUtils has a new set of methods to create collections and concurrent collections&lt;/li&gt;
    &lt;li&gt;A simple thread safe weak event listener list, WeakEventListenerList&lt;/li&gt;
    &lt;li&gt;HashCodeUtils has been improved to manage arrays&lt;/li&gt;
    &lt;li&gt;Some classes have been made Immutable&lt;/li&gt;
    &lt;li&gt;The utility class have new methods&lt;/li&gt;
    &lt;li&gt;And a lot of other little changes and bug fixes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More informations on &lt;a title="JTheque Utils" href="http://www.jtheque.com/jtheque-utils" target="_self"&gt;the JTheque website&lt;/a&gt;.  You can download it &lt;a title="Downloads of JTheque Utils" href="http://www.jtheque.com/jtheque-utils/downloads" target="_blank"&gt;from here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope that this library will be useful to someone.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JTheque</category><category>Libraries</category><category>OSGi</category><category>Releases</category><guid>http://baptiste-wicht.com/posts/2010/09/jtheque-utils-1-1-5.html</guid><pubDate>Thu, 16 Sep 2010 06:01:19 GMT</pubDate></item><item><title>OSGI and Spring Dynamic Modules - Simple Hello World</title><link>http://baptiste-wicht.com/posts/2010/07/osgi-spring-dynamic-modules-hello-world.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;In this post, we'll take &lt;a target="_blank" href="http://www.baptiste-wicht.com/2010/07/osgi-hello-world-services/"&gt;the first implementation we made using &lt;strong&gt;OSGi&lt;/strong&gt;&lt;/a&gt; and use &lt;strong&gt;Spring Dynamic Modules&lt;/strong&gt; to improve the application. &lt;/p&gt;
&lt;p&gt;Spring Dynamic Modules (Spring Dm) makes the development of &lt;strong&gt;OSGi-based applications&lt;/strong&gt; a lot more easier. With that, the deployment of services is a lot easier. You can inject services like any other Spring beans. &lt;/p&gt;
&lt;p&gt;So let's start with Spring dm. &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/07/osgi-spring-dynamic-modules-hello-world.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>OSGi</category><category>Spring</category><guid>http://baptiste-wicht.com/posts/2010/07/osgi-spring-dynamic-modules-hello-world.html</guid><pubDate>Wed, 21 Jul 2010 05:10:52 GMT</pubDate></item><item><title>Tip : Profile an OSGi application with VisualVM</title><link>http://baptiste-wicht.com/posts/2010/07/tip-profile-osgi-application-visualvm.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;When you develop applications and you've performance problems, it's really interesting to see what can cause this problems. And it that case, the profilers are the most useful tool. By example, we can use VisualVM, packed by default with the Java Virtual Machine. For more information, you can read &lt;a href="http://www.baptiste-wicht.com/2010/07/profile-applications-java-visualvm/"&gt;this introduction to Java VisualVM&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;But, when you work with OSGi application, it's not as simple as a normal application. The profiler needs that its class can be found by the profiled classes, but with OSGi, the classloader are restricted by the framework and the classes of the profiler cannot be found. &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/07/tip-profile-osgi-application-visualvm.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>OSGi</category><category>Performances</category><category>Tips</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/07/tip-profile-osgi-application-visualvm.html</guid><pubDate>Tue, 20 Jul 2010 05:01:28 GMT</pubDate></item><item><title>OSGi - Simple Hello World with services</title><link>http://baptiste-wicht.com/posts/2010/07/osgi-hello-world-services.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;In this post, we'll develop a simple Hello World application with &lt;strong&gt;OSGi&lt;/strong&gt;. We will use &lt;strong&gt;Felix&lt;/strong&gt; as &lt;strong&gt;OSGi container&lt;/strong&gt;. In the next post, we'll continue with this application and use &lt;strong&gt;Spring Dynamic Modules&lt;/strong&gt; to improve it. &lt;/p&gt;
&lt;p&gt;To make the development interesting, we will create two bundles :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;A bundle providing a service of HelloWorld&lt;/li&gt;
    &lt;li&gt;A bundle consuming the service to print hello at regular interval time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/07/osgi-hello-world-services.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>OSGi</category><guid>http://baptiste-wicht.com/posts/2010/07/osgi-hello-world-services.html</guid><pubDate>Fri, 16 Jul 2010 05:05:48 GMT</pubDate></item><item><title>Modular Java – Book Review</title><link>http://baptiste-wicht.com/posts/2010/07/modular-java-book-review.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;Some weeks ago, I finished "Modular Java - Creating Flexible Applications With OSGi and Spring", it's time to do a little review now.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://baptiste-wicht.com/wp-content/uploads/2010/07/1934356409.01.LZZZZZZZ-e1278244106418.jpg"&gt;&lt;img class="size-full wp-image-690" title="Modular Java" src="http://baptiste-wicht.com/wp-content/uploads/2010/07/1934356409.01.LZZZZZZZ-e1278244106418.jpg" alt="Modular Java" width="150" height="182"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This book is an excellent introduction to the creation of modular applications in Java. It introduces all the main concepts of the OSGi technology, Spring Dynamic Modules and tools making easier the development of OSGi applications.&lt;/p&gt;
&lt;p&gt;The first chapter introduce the concept of modularity and explain how OSGi solve the problem. The main characteristics of the technology are also described.&lt;/p&gt;
&lt;p&gt;The next chapter lists the main OSGi containers and we create the first Hello World using OSGi. Next we improve this simple program using an OSGi service.&lt;/p&gt;
&lt;p&gt;After that the third chapter introduce the application "Dude, Where is my Jar ?". This application is a simple web program allowing a develop to search for a Jar file in Maven repositories. This application is used in all the next chapters. More than this introduction, the chapter also shows how the Pax tools can make easier the development of OSGi applications.&lt;/p&gt;
&lt;p&gt;In the next chapter, we create the first bundle of the application. With that bundle we see how to work with non-bundle dependencies. And in the next one, we create the services of the application and see how to publish and consume services.&lt;/p&gt;
&lt;p&gt;After that, it's time to use Spring Dynamic Modules with the next chapter. We see how to publish and consume services with Spring.&lt;/p&gt;
&lt;p&gt;In the seventh chapter, we develop the web bundle. Fort hat, we include Tomcat or Jetty in the form of OSGi Bundles. We also see the differences between a simple bundle (Jar) and a web bundle (War).&lt;/p&gt;
&lt;p&gt;In the next, we see how to extend OSGi bundle using fragment. With that, we see how to separate the JSP part of the application.&lt;/p&gt;
&lt;p&gt;The last two chapters are about the deployment in production of an OSGi application and the services offered by the OSGi standard (logging, admin, console, ...).&lt;/p&gt;
&lt;p&gt;In conclusion, this book will allows you to start developing application using OSGi. It's really comfortable to follow the development of a simple applications during the entire book. And improve it with each concept of the technology. But I think it's not a very good idea to use that log the Pax Tools. We quickly loose OSGi with Pax. It's quite interesting to know how to use Pax (I use it everyday), but when we start, it's better to see the basic concepts further.&lt;/p&gt;
&lt;p&gt;And more, the Maven output, is almost entirely displayed. This not really useful to see that every time when it's not errors, warning or important informations. But nevertheless, the reading of the book is really comfortable and fluid.&lt;/p&gt;&lt;/div&gt;</description><category>Books</category><category>Java</category><category>Modular</category><category>OSGi</category><guid>http://baptiste-wicht.com/posts/2010/07/modular-java-book-review.html</guid><pubDate>Thu, 08 Jul 2010 05:12:43 GMT</pubDate></item><item><title>Using Substance Look And Feel in OSGi</title><link>http://baptiste-wicht.com/posts/2010/04/using-substance-look-and-feel-in-osgi.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;I experienced some problems with Substance in OSGi. Using this code :&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SubstanceLookAndFeel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setSkin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BusinessBlackSteelSkin&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;I got different errors, like :&lt;/p&gt;
&lt;pre&gt;Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException at 
org.pushingpixels.substance.internal.utils.SubstanceColorUtilities.getDefaultBackgroundColor(SubstanceColorUtilities.java:823)&lt;/pre&gt;

&lt;p&gt;I found a simple solution to make Substance work in OSGi : &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;UIManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setLookAndFeel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SubstanceBusinessBlackSteelLookAndFeel&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnsupportedLookAndFeelException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getClass&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;UIManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLookAndFeelDefaults&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ClassLoader"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SubstanceBusinessBlackSteelLookAndFeel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClassLoader&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;With that code, i've no more problems using Substance Look And Feel. &lt;/p&gt;
&lt;p&gt;Hope that will help someone.&lt;/p&gt;&lt;/div&gt;</description><category>OSGi</category><category>Swing</category><guid>http://baptiste-wicht.com/posts/2010/04/using-substance-look-and-feel-in-osgi.html</guid><pubDate>Mon, 19 Apr 2010 10:03:15 GMT</pubDate></item><item><title>JTheque : Problems when migrating to OSGi</title><link>http://baptiste-wicht.com/posts/2010/04/jtheque-problems-migrating-osgi.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;Like you perhaps know, i'm currently &lt;a title="JTheque is going to OSGi" href="http://www.baptiste-wicht.com/2010/03/jtheque-is-going-to-osgi/" target="_self"&gt;migrating JTheque to OSGi&lt;/a&gt;. During this migration i found several problems in the JTheque architecture that made the migration impossible without changing some concepts. In this post I'll detail all the problems I found.&lt;/p&gt;
&lt;h5&gt;Resources&lt;/h5&gt;

&lt;p&gt;First of all, i had to completely change the way to cache resources. Before, i used a ResourceManager to cache images/icons. To get an image/icon, i gave to it the path to the resource and the manager made the rest. I used Spring to load the resources (using the Resource class). That worked well because all the modules and the core were in the same application context.&lt;/p&gt;
&lt;p&gt;But now, there is an application context for each OSGi bundle, so that doesn't work at all. So i had to find an other way. The manager cannot load the resources because they're accessible from the other bundles. So I changes the way the manager works :&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;The modules must register all the resources they need in the resource manager. They can always use Spring to load the resource or direct use the Resource class to load it.&lt;/li&gt;
    &lt;li&gt;When the module need an image/icon, it ask the resource manager. The manager watch on the cache (the cache associates the Resource to the loaded image/icon) if the image is already cached. If it's cached, it directly return the image else, it load the image from the resource and return the loaded image&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In that way, the resource manager doesn't have to access directly to resources on other bundles and everything works well.&lt;/p&gt;
&lt;h4&gt;States&lt;/h4&gt;

&lt;p&gt;The states are a way to store configuration for the modules. Before, the states must implements an interface and when they we're saved, the class were saved in a file and at startup created by reflection. But that's was not possible anymore, because the class was not accessible from the state bundle.&lt;/p&gt;
&lt;p&gt;So I changed the way the data were saved using directly methods of the interface to get the stored data and to restore them at startup. Moreover, I also replaced the interface by annotations.&lt;/p&gt;
&lt;h4&gt;Miscellaneous&lt;/h4&gt;

&lt;p&gt;More than these other major changes, i've also some others problems :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;The JDBC driver class was not accessible. I add the package import to the manifest headers and get the driver version from SpringSource Repository to works with OSGi&lt;/li&gt;
    &lt;li&gt;Substance doesn't work anymore. At this time, i don't know i that comes from OSGi or from other changes i made in the application, but i've not solved this problem.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>Conception</category><category>JTheque</category><category>OSGi</category><guid>http://baptiste-wicht.com/posts/2010/04/jtheque-problems-migrating-osgi.html</guid><pubDate>Sun, 18 Apr 2010 08:57:50 GMT</pubDate></item><item><title>Java Links of the week</title><link>http://baptiste-wicht.com/posts/2010/04/java-links-of-the-week.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;I will try to reference my personal best of links about Java, Swing, ... every week at monday.&lt;/p&gt;
&lt;p&gt;Here is the most interesting links i found about Java Programming this week :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://www.jug-muenster.de/swing-event-departure-board-518/" target="_blank"&gt;Swing event departure board&lt;/a&gt; : Gerrit of Java User Group Münster has developed an event departure board like those in the airports in Swing. with an amazing style.&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://mcoj.wordpress.com/2010/03/28/swinging-task-dialog-part-4/" target="_blank"&gt;Swinging Task Dialog Part 4&lt;/a&gt; : Eugene Ryzhikov announces  the 0.5.0 release of his really interesting Task Dialog library, dedicated to Mac OS support.&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://java.dzone.com/articles/design-patterns-uncovered-chain-of-responsibility" target="_blank"&gt;A clean implementation of Chain of Responsibility&lt;/a&gt;, by James Sugrue&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://www.developers-blog.org/blog/default/2010/03/31/OSGI-Tutorial-How-to-use-ServiceTracker-to-get-Services" target="_blank"&gt;Dynamic Usage of ServiceTracker&lt;/a&gt; : Rafael Sobek show a way to use ServiceTracker in a dynamic way tracking minutes after minutes for the service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And just for pleasure, my favourite April fools :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://googleblog.blogspot.com/2010/04/different-kind-of-company-name.html" target="_self"&gt;A different kind of company name&lt;/a&gt; : Google is now Topeka to honour this town who's itself rename to Google&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://www.daniweb.com/news/story272314.html#" target="_blank"&gt;Linus Torvalds monetizes Linux&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://google-opensource.blogspot.com/2010/03/google-annotations-gallery.html" target="_blank"&gt;Google Annotations Gallery&lt;/a&gt; : A set of annotations from Google like @Lol, @Hack or @Noop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you will find this compilation interesting.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>Links</category><category>OSGi</category><category>Swing</category><guid>http://baptiste-wicht.com/posts/2010/04/java-links-of-the-week.html</guid><pubDate>Sun, 04 Apr 2010 05:26:33 GMT</pubDate></item><item><title>4 reasons i'm not using Osmorc anymore</title><link>http://baptiste-wicht.com/posts/2010/03/4-reasons-not-using-osmorc-anymore.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;After had many problems using Osmorc, the Intellij Idea plugin for OSGi support, i decided to no longer use it. Now, i make all manually.&lt;/p&gt;
&lt;p&gt;I have several reasons to not be satisfied of this plugin.&lt;/p&gt;
&lt;p&gt;First of all, this plugin display all the errors in OSGi configuration (Manifest, Activators and imports) but provide no way to quickly fix the problems by example by adding the imported package in the Import-Package Manifest Headers. Its a little disappointing when we are regular with Intellij Idea usage.&lt;/p&gt;
&lt;p&gt;I find it really slow to launch OSGi Instances. Moreover, we cannot really control the osgi instance we launch. I hoped that we could at least manage the OSGi server using basic command line integration, but this is not possible.&lt;/p&gt;
&lt;p&gt;When we make the project, all the OSGi modules are compiled and packaged and this could be a long process. During this process, when we have errors, the displayed messages aren't really understandable and there is no explanation on how to solve the problems.&lt;/p&gt;
&lt;p&gt;And last but not least, the plugin is very unstable. I had a lot of errors using Osmorc. And i had also problem with the imports in Maven projects. All the imports we marked invalid and sometimes not recognized. Reimporting the maven projects solve occasionally the problems but it always reappears and make the compilation impossible.&lt;/p&gt;
&lt;p&gt;I don't solved any of these problems and for that reasons i don't use Osmorc anymore.&lt;/p&gt;
&lt;p&gt;I realized that this plugin doesn't offer me a lot of things and i could easily work without it.&lt;/p&gt;&lt;/div&gt;</description><category>IntelliJ Idea</category><category>Java</category><category>OSGi</category><guid>http://baptiste-wicht.com/posts/2010/03/4-reasons-not-using-osmorc-anymore.html</guid><pubDate>Sun, 28 Mar 2010 23:54:21 GMT</pubDate></item><item><title>OSGi 4.2 Entreprise Release is available !</title><link>http://baptiste-wicht.com/posts/2010/03/osgi-enterprise-4-2-available.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;Yesterday, at EclipseCon, the OSGi EEG has finished the OSGi 4.2 Entreprise Release and made it publicly available. You can downlad it &lt;a title="OSGi Entreprise Release 4.2" href="http://www.osgi.org/Download/Release4V42" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The news includes several new Entreprise use-cases and improves the OSGI programming model. Some JEE technologies has been add to the OSGi specification.&lt;/p&gt;
&lt;p&gt;Here is an overview of the main new features :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Blueprint &lt;/strong&gt;: This is a standard based on Spring-DM. Like this last, it adds an IOC container to OSGi. It's reallay more comfortable to develop OSGi bundles with Spring DM and now, that's the standard. I think this a great news for the OSGi developers. With that new features, the developer can use the IOC container without binding the application to a specific container.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Framework Launching&lt;/strong&gt; : If you wanted to embed an OSGi framework in your application, before this release, you needed to choose one implementation and bind your launching to this implementation. Now OSGi provides a a standard way to start an OSGi Framework.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Remove Services (and Admin) &lt;/strong&gt;: Previously Distributed OSGi, this functionality enables your services to be distributed to remote consumers and enables your bundles to consume remote services. Your remote services doesn't need to implement a specific interface, you just have to configure some properties to make your services remote.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Web Applications&lt;/strong&gt; : This is a standard way to deploy war files in an OSGI Framework. In the past, we can already do that with PAX-Web by example, but that was not standard. This adds several Manifest Headers (context path by example) and give a way to the web application to communicate with the others bundles.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;JDBC specification&lt;/strong&gt; : Adds a simple DataSourceFactory class to register the drivers and APIs to get these drivers and DataSource. So you don't need anymore to use complicated private packages to make your JDBC Driver work in your OSGi bundle.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;JPA &lt;/strong&gt;: Describes a way to use JPA from an OSGi application. That alllows you to update JPA implementation without restarting it and you can have several JPA Providers in the same system. This specification works in pair with the JDBC specification we talked above.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;JNDI&lt;/strong&gt; : Simple bridge between the OSGi Service Registry and JNDI. Now you can lookup BundleContext  or OSGi Service with JNDI. And you can also obtain a JNDI Initial context from OSGi. Your JTA Implementation will be discovered and also appeared in the Service Registry.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;JMX&lt;/strong&gt; : With this specification you can access to OSGi Framework with JMX. You can install, uninstall, start and stop a bundle and get informations about the installed bundles and services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main purposes of this Enterprise Release is to make the deploy of OSGi Framework in enterprise environment easier. But these features can of course also be used in not-enterprise environment.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>OSGi</category><category>Releases</category><guid>http://baptiste-wicht.com/posts/2010/03/osgi-enterprise-4-2-available.html</guid><pubDate>Wed, 24 Mar 2010 00:37:01 GMT</pubDate></item><item><title>Bundle non-OSGi dependencies with Maven</title><link>http://baptiste-wicht.com/posts/2010/03/bundle-non-osgi-dependencies-maven.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;When we work with OSGi, a problem we always have is how to work with dependencies non OSGi Ready.&lt;/p&gt;
&lt;p&gt;This is not a really great problem because there we can work with. There is essentially two solutions :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Embed the JAR files within the bundle. That is to say putting the JAR file into the bundle JAR and reference it in the Manifest&lt;/li&gt;
    &lt;li&gt;Wrap the JAR files with an OSGi Manifest. Namely, transform the JAR into an OSGi bundle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personnaly, i doesn't like the first solution, because for me, having a jar into a jar sounds really weird and bad and i prefer to have real OSGi Bundle. With wrapping, if i need this library in an other bundle, i doesn't have to do anything.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/03/bundle-non-osgi-dependencies-maven.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Apache</category><category>Java</category><category>Maven</category><category>OSGi</category><guid>http://baptiste-wicht.com/posts/2010/03/bundle-non-osgi-dependencies-maven.html</guid><pubDate>Fri, 19 Mar 2010 14:41:29 GMT</pubDate></item><item><title>OSGi and cyclic dependencies</title><link>http://baptiste-wicht.com/posts/2010/03/osgi-and-cyclic-dependencies.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm currently working on the "bundlisation" of the JTheque Core. I choose to cut core into several bundles each one representing a service provided by the core. &lt;/p&gt;
&lt;p&gt;I quickly have experencied problems with &lt;/p&gt;
&lt;p&gt;I quickly realized that the decoupling of my various services was almost nil. I had a huge number of dependencies for each bundle and worse, I had a lot of cyclic dependencies, either direct or indirect.&lt;/p&gt;
&lt;p&gt;For information, a direct cyclic dependency is a situation in which a bundle X depends on a bundle that depends on Y who is also depending itself of X. An indirect dependency cycle is the situation where X depends on Y, Y depends on Z and Z depends on X. I speak here of bundles, but it may relate to projects, classes or packages.&lt;/p&gt;
&lt;p&gt;Note that the different techniques that I will present also apply for dependencies between components non-OSGi, the principles are exactly the same.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/03/osgi-and-cyclic-dependencies.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Conception</category><category>Java</category><category>JTheque</category><category>OSGi</category><guid>http://baptiste-wicht.com/posts/2010/03/osgi-and-cyclic-dependencies.html</guid><pubDate>Mon, 15 Mar 2010 15:19:54 GMT</pubDate></item><item><title>JTheque is going to OSGi</title><link>http://baptiste-wicht.com/posts/2010/03/jtheque-is-going-to-osgi.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;Just a little post to inform you that i'm currently migrating JTheque Core to OSGI / Spring Dynamic Modules. The core will be fractioned into several bundles. The JTheque Modules will also be OSGi bundles.&lt;/p&gt;
&lt;p&gt;It will increase the modularity of the different services of the Core. And it will also be a more standard way to develop modules. And last but not least, it's an opportunity for me to learn OSGi and Spring Dm.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>JTheque</category><category>Modular</category><category>OSGi</category><category>Spring</category><guid>http://baptiste-wicht.com/posts/2010/03/jtheque-is-going-to-osgi.html</guid><pubDate>Tue, 02 Mar 2010 12:35:52 GMT</pubDate></item></channel></rss>