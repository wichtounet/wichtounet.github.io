<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>@Blog("Baptiste Wicht") (Linux)</title><link>http://wichtounet.github.io/</link><description></description><atom:link type="application/rss+xml" href="http://wichtounet.github.io/categories/linux.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 16 Mar 2014 20:01:18 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>budgetwarrior 0.3.0 - Objective and wish management</title><link>http://wichtounet.github.io/posts/2014/02/budgetwarrior-0-3-0-objective-wish-management.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I'm pleased to announce the release of another budgetwarrior release, the version 0.3.0.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Changes&lt;/h4&gt;
&lt;p&gt;This version contains several important changes.&lt;/p&gt;
&lt;p&gt;The first one is the addition of a new module to manage objectives. You can add objective with &lt;em&gt;budget objective add). &lt;/em&gt;For instance, you can add an objective saying you want to save 10000$ a year or 200$ a month. When you set your objectives, budget warrior computes how well you complete them. For instance, here is the status of my objectives:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113057.png"&gt;&lt;img class="size-medium wp-image-2664" alt="Objective status" src="http://wichtounet.github.io/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113057-e1391337197470-300x83.png" width="300" height="83"&gt;&lt;/a&gt; Objective status&lt;/p&gt;
&lt;p&gt;Another module has been added to manage wishes. You can add wishes to budgetwarrrior (&lt;em&gt;budget wish add&lt;/em&gt;) and then budgetwarrior will tell you if it is a good time to buy them. Here is an example of wish status:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113814.png"&gt;&lt;img class="size-medium wp-image-2665" alt="Wish Status" src="http://wichtounet.github.io/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113814-e1391337576857-300x96.png" width="300" height="96"&gt;&lt;/a&gt; Wish Status&lt;/p&gt;
&lt;p&gt;The diagnostics tells you where the money will be taken: On savings, on year savings or on month savings (ideal case). It also checks the objectives to see if the payment doesn't break the fulfillment of some of them.&lt;/p&gt;
&lt;p&gt;For complete diagnostics, it is necessary to you register your fortune (&lt;em&gt;budget fortune check&lt;/em&gt;), ideally once a month.&lt;/p&gt;
&lt;p&gt;Of course, this is only a tool, you should not only use that to decide when to buy something, but it may have a good point of view ;)&lt;/p&gt;
&lt;p&gt;Moreover, the version also have other smaller changes:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;When you make an error when creating a new item (expense, earning, ...), the tool now lets you retry without losing what you typed before.&lt;/li&gt;
    &lt;li&gt;Confirmation messages are now shown after each modification command (delete, add and edit).&lt;/li&gt;
    &lt;li&gt;The license has been changed from Boost to MIT. The sense is almost the same, but the MIT is more well known and I thought it would be easier for people to know what this means.&lt;/li&gt;
    &lt;li&gt;There have several changes to the code base, but that doesn't impact the usage of the tool.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;I hope you'll found these changes interesting :)&lt;/p&gt;
&lt;p&gt;If you are interested by the tool, you can download it on Github: &lt;a title="budgetwarrior repository" href="https://github.com/wichtounet/budgetwarrior"&gt;budgetwarrior&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;There is now Gentoo and Arch Linux installation packages available for ease of installation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a suggestion or you found a bug, please post an issue on the github project: &lt;a title="https://github.com/wichtounet/budgetwarrior" href="https://github.com/wichtounet/budgetwarrior"&gt;https://github.com/wichtounet/budgetwarrior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any comment, don't hesitate to contact me, either by letting a comment on this post or by email.&lt;/p&gt;&lt;/div&gt;</description><category>budgetwarrior</category><category>C++</category><category>C++</category><category>Linux</category><category>Linux</category><category>projects</category><guid>http://wichtounet.github.io/posts/2014/02/budgetwarrior-0-3-0-objective-wish-management.html</guid><pubDate>Mon, 03 Feb 2014 09:21:29 GMT</pubDate></item><item><title>budgetwarrior 0.2.1 - Minor changes and Gentoo ebuild</title><link>http://wichtounet.github.io/posts/2014/01/budgetwarrior-0-2-1-minor-changes-gentoo-ebuild.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I've released a new version of budgetwarrior, the release 0.2.1. budgetwarrior is a simple command line application to manage a personal budget.&lt;/p&gt;
&lt;p&gt;The version 0.2.1 contains several bug fixes about archived accounts and bug fixes for budget across several years.&lt;/p&gt;
&lt;p&gt;The application as well as the source code is available online: &lt;a href="https://github.com/wichtounet/budgetwarrior"&gt;https://github.com/wichtounet/budgetwarrior&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've created Gentoo ebuilds for this application. They are available on my Portage overlay: &lt;a href="https://github.com/wichtounet/portage-overlay"&gt;https://github.com/wichtounet/portage-overlay&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Gentoo Installation&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Edit overlays section of /etc/layman/layman.cfg. Here's an example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;overlays: http://www.gentoo.org/proj/en/overlays/repositories.xml
           http://github.com/wichtounet/portage-overlay/raw/master/repository.xml&lt;/code&gt;
&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;Sync layman&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;layman -S&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Add the overlay:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;layman -a wichtounet&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Install budgetwarrior&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;emerge budgetwarrior&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;If you find any issues with the tool, don't hesitate to post an issue on Github. If you have comments about it, you can post a comment on this post or contact me by email. &lt;/p&gt;&lt;/div&gt;</description><category>budgetwarrior</category><category>Gentoo</category><category>Linux</category><category>Linux</category><category>Tools</category><guid>http://wichtounet.github.io/posts/2014/01/budgetwarrior-0-2-1-minor-changes-gentoo-ebuild.html</guid><pubDate>Thu, 16 Jan 2014 12:41:00 GMT</pubDate></item><item><title>Zabbix - Low Level Discovery of cores, CPUs and Hard Disk</title><link>http://wichtounet.github.io/posts/2013/12/zabbix-low-level-discovery-cores-cpus-hard-disk.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2013/12/Screenshot-from-2013-12-29-165743-e1388332859892.png"&gt;&lt;img src="http://wichtounet.github.io/wp-content/uploads/2013/12/Screenshot-from-2013-12-29-165743-e1388332859892-300x151.png" alt="Zabbix SSD Status, configured with Low Level Discovery" width="300" height="151" class="size-medium wp-image-2644"&gt;&lt;/a&gt; Zabbix SSD Status, configured with Low Level Discovery
&lt;p&gt;At home, I'm using Zabbix to monitor my servers, it has plenty of interesting features and can be extended a lot by using User Parameter.&lt;/p&gt;
&lt;p&gt;In this post, I'm gonna talk about Low Level Discovery (LLD). If you are only interested in the final result, go the Conclusion section, you can download my template containing all the rules ;)&lt;/p&gt;
&lt;h4&gt;Low Level Discovery (LLD)&lt;/h4&gt;

&lt;p&gt;LLD is a feature to automatically discover some properties of the monitored host and create items, triggers and graphs.&lt;/p&gt;
&lt;p&gt;By default, Zabbix support three types of item discovery:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Mounted filesystems&lt;/li&gt;
    &lt;li&gt;Network interface&lt;/li&gt;
    &lt;li&gt;SNMP's OIDs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two are very useful, since they will give you by default, for instance, the free space of each mounted file system or the bandwith going in and out of each network interface. As I only monitor Linux servers, I don't use the last one, but it will eventually interest other people.&lt;/p&gt;
&lt;p&gt;Another very interesting thing about this feature is that you can extend it by discovering more items. In this article, I will show how to discover CPUs, CPU Cores and Hard Disk.&lt;/p&gt;
&lt;p&gt;The most important part of custom discovery is to create a script on the monitored machines that can "discover" something. It can be any executable, the only thing important is that it outputs data in the correct format. I have to say that the format is quite ugly, but that is probably not very important ;) Here is the output of my hard disk discovery script:&lt;/p&gt;
&lt;p&gt;[javascript]&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;"data":[
    {"{#DISKNAME}":"/dev/sda","{#SHORTDISKNAME}":"sda"},
    {"{#DISKNAME}":"/dev/sdb","{#SHORTDISKNAME}":"sdb"},
    {"{#DISKNAME}":"/dev/sdc","{#SHORTDISKNAME}":"sdc"},
    {"{#DISKNAME}":"/dev/sdd","{#SHORTDISKNAME}":"sdd"},
    {"{#DISKNAME}":"/dev/sde","{#SHORTDISKNAME}":"sde"},
    {"{#DISKNAME}":"/dev/sdf","{#SHORTDISKNAME}":"sdf"},
    {"{#DISKNAME}":"/dev/sdg","{#SHORTDISKNAME}":"sdg"},
]&lt;/p&gt;
&lt;p&gt;}[/javascript]&lt;/p&gt;
&lt;p&gt;You can have as many keys for each discovered items, but the format must remains the same. In the item, trigger and graph prototypes, you will then use {#DISKNAME} or {#SHORTDISKNAME} to use the discovered values. &lt;/p&gt;
&lt;p&gt;Once you have created your scripts, you have to register it in the zabbix configuration as a user parameter. For instance, if you use the zabbix daemon, you need these lines in /etc/zabbix/zabbix_agentd.conf: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;EnableRemoteCommands=1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;UnsafeUserParameters=1&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;UserParameter=discovery.hard_disk,/scripts/discover_hdd.sh&lt;/p&gt;
&lt;p&gt;Now, when you will create the discovery rule, you can use discovery.hard_disk as the key. &lt;/p&gt;
&lt;p&gt;A discovery rule in itself is useful without prototypes, you can create three types of prototypes: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Item Prototype: This will create a new item for each discovered entity&lt;/li&gt;
    &lt;li&gt;Trigger Prototype: This will create a new trigger for each discovered entity. &lt;/li&gt;
    &lt;li&gt;Graph Prototype: This will create a graph for each discovered entity. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most useful are by far the item and trigger prototypes. The biggest problem with graphs is that you cannot create an aggregate graph of each discovered items. For instance, if you record the temperature of your CPU cores, you cannot automatically create a graph with the temperature of each discovered cores. For that, you have to create the graph in each host. Which makes, imho, graph prototypes pretty useless. Anyway...&lt;/p&gt;
&lt;p&gt;In the next section, I'll show how I have created discovery rules for Hard Disk, CPU and CPU cores. &lt;/p&gt;
&lt;h4&gt;Discover Hard Disk&lt;/h4&gt;

&lt;p&gt;The discovery script is really simple: &lt;/p&gt;
&lt;p&gt;[bash]#!/bin/bash&lt;/p&gt;
&lt;p&gt;disks=&lt;code&gt;ls -l /dev/sd* | awk '{print $NF}' | sed 's/[0-9]//g' | uniq&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;echo "{"&lt;/p&gt;
&lt;p&gt;echo "\"data\":["&lt;/p&gt;
&lt;p&gt;for disk in $disks&lt;/p&gt;
&lt;p&gt;do
    echo "    {\"{#DISKNAME}\":\"$disk\",\"{#SHORTDISKNAME}\":\"${disk:5}\"},"
done&lt;/p&gt;
&lt;p&gt;echo "]"&lt;/p&gt;
&lt;p&gt;echo "}"[/bash]&lt;/p&gt;
&lt;p&gt;It just lists all the /dev/sdX devices, remove the partition number and remove the duplicates, to have only the hard disk at the end. &lt;/p&gt;
&lt;p&gt;I've created several item prototypes for each hard disk. Here are some examples using S.M.A.R.T. (you can download the template with all the items in the Conclusion section): &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Raw Read Error Rate&lt;/li&gt;
    &lt;li&gt;Spin Up Time&lt;/li&gt;
    &lt;li&gt;SSD Life Left&lt;/li&gt;
    &lt;li&gt;Temperature&lt;/li&gt;
    &lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may notice that some of them only make sense for SSD (SSD Life Left) and some others do not make any sense for SSD (Spin Up Time). This is not a problem since they will just be marked as Not Supported by Zabbix. &lt;/p&gt;
&lt;p&gt;All these datas are collected using the smartctl utility. &lt;/p&gt;
&lt;p&gt;I've also created some trigger to indicate the coming failure of an hard disk: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;SSD Life Left too low&lt;/li&gt;
    &lt;li&gt;Reallocated Sector Count too low&lt;/li&gt;
    &lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've just used the threshold reported by smartctl, they may be different from one disk manufacturers to another. I don't put a lot of faith on these values, since disk generally fail before going to threshold, but it could be a good indicator anyway. &lt;/p&gt;
&lt;h4&gt;Discover CPUs&lt;/h4&gt;

&lt;p&gt;Here is the script to discover CPUs: &lt;/p&gt;
&lt;p&gt;[bash]#!/bin/bash&lt;/p&gt;
&lt;p&gt;cpus=&lt;code&gt;lscpu | grep "CPU(s):" | head -1 | awk '{print $NF}'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;cpus=$(($cpus-1))&lt;/p&gt;
&lt;p&gt;echo "{"&lt;/p&gt;
&lt;p&gt;echo "\"data\":["&lt;/p&gt;
&lt;p&gt;for cpu in $(seq 0 $cpus)&lt;/p&gt;
&lt;p&gt;do
    echo "    {\"{#CPUID}\":\"$cpu\"},"
done&lt;/p&gt;
&lt;p&gt;echo "]"&lt;/p&gt;
&lt;p&gt;echo "}"[/bash]&lt;/p&gt;
&lt;p&gt;It just uses lscpu and parses its output to find the number of CPU and then create an entry for each CPUs. &lt;/p&gt;
&lt;p&gt;I just have one item for each CPU: The CPU Utilization. &lt;/p&gt;
&lt;p&gt;I haven't created any trigger here. &lt;/p&gt;
&lt;h4&gt;Discover CPU Cores&lt;/h4&gt;

&lt;p&gt;Just before, we discovered the CPUs, but it is also interesting to discover the cores. If you don't have Hyperthreading, the result will be the same. It is especially interesting to get the temperature of each core. Here is the script: &lt;/p&gt;
&lt;p&gt;[bash]#!/bin/bash&lt;/p&gt;
&lt;p&gt;cores=&lt;code&gt;lscpu | grep "Core(s) per socket:" | awk '{print $NF}'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;cores=$(($cores-1))&lt;/p&gt;
&lt;p&gt;echo "{"&lt;/p&gt;
&lt;p&gt;echo "\"data\":["&lt;/p&gt;
&lt;p&gt;for core in $(seq 0 $cores)&lt;/p&gt;
&lt;p&gt;do
    echo "    {\"{#COREID}\":\"$core\"},"
done&lt;/p&gt;
&lt;p&gt;echo "]"&lt;/p&gt;
&lt;p&gt;echo "}"[/bash]&lt;/p&gt;
&lt;p&gt;It works in the same way as the previous script. &lt;/p&gt;
&lt;p&gt;I've only created one item prototype, to get the temperature of each core with lm_sensors. &lt;/p&gt;
&lt;h4&gt;Wrap-Up&lt;/h4&gt;

&lt;p&gt;Here are all the UserParameter necessary to make the discovery and the items works: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;### System Temperature ###&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;UserParameter=system.temperature.core[*],sensors|grep Core\ $1 |cut -d "(" -f 1|cut -d "+" -f 2|cut -c 1-4&lt;/p&gt;
&lt;h4&gt;DISK I/O&lt;/h4&gt;
&lt;p&gt;UserParameter=custom.vfs.dev.read.ops[*],cat /proc/diskstats | egrep $1 | head -1 | awk '{print $$4}'&lt;/p&gt;
&lt;p&gt;UserParameter=custom.vfs.dev.read.ms[*],cat /proc/diskstats | egrep $1 | head -1 | awk '{print $$7}'&lt;/p&gt;
&lt;p&gt;UserParameter=custom.vfs.dev.write.ops[*],cat /proc/diskstats | egrep $1 | head -1 | awk '{print $$8}'&lt;/p&gt;
&lt;p&gt;UserParameter=custom.vfs.dev.write.ms[*],cat /proc/diskstats | egrep $1 | head -1 | awk '{print $$11}'&lt;/p&gt;
&lt;p&gt;UserParameter=custom.vfs.dev.io.active[*],cat /proc/diskstats | egrep $1 | head -1 | awk '{print $$12}'&lt;/p&gt;
&lt;p&gt;UserParameter=custom.vfs.dev.io.ms[*],cat /proc/diskstats | egrep $1 | head -1 y| awk '{print $$13}'&lt;/p&gt;
&lt;p&gt;UserParameter=custom.vfs.dev.read.sectors[*],cat /proc/diskstats | egrep $1 | head -1 | awk '{print $$6}'&lt;/p&gt;
&lt;p&gt;UserParameter=custom.vfs.dev.write.sectors[*],cat /proc/diskstats | egrep $1 | head -1 | awk '{print $$10}'&lt;/p&gt;
&lt;p&gt;UserParameter=system.smartd_raw[*],sudo smartctl -A $1| egrep $2| tail -1| xargs| awk '{print $$10}'&lt;/p&gt;
&lt;p&gt;UserParameter=system.smartd_value[*],sudo smartctl -A $1| egrep $2| tail -1| xargs| awk '{print $$4}'&lt;/p&gt;
&lt;h4&gt;Discovery&lt;/h4&gt;
&lt;p&gt;UserParameter=discovery.hard_disk,/scripts/discover_hdd.sh&lt;/p&gt;
&lt;p&gt;UserParameter=discovery.cpus,/scripts/discover_cpus.sh&lt;/p&gt;
&lt;p&gt;UserParameter=discovery.cores,/scripts/discover_cores.sh&lt;/p&gt;
&lt;p&gt;(it must be set in zabbix_agentd.conf)&lt;/p&gt;
&lt;p&gt;You also need to give zabbix the right to use sudo with smartctl. For that, you have to edit your /etc/sudoers file and add this line: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ALL ALL=(ALL)NOPASSWD: /usr/sbin/smartctl&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Conclusion and Download&lt;/h4&gt;

&lt;p&gt;I hope that this helps some people to use Low Level Discovery in their Zabbix Monitoring Installation. &lt;/p&gt;
&lt;p&gt;LLD eases a lot the creation of multiple items discovery for hosts with different hardware or configuration. However, it has some problems for which I have not yet found a proper solution. First, you have to duplicate the client scripts on each host (or at least have them on a share available from each of them). Then, the configuration of each agent is also duplicated in the configuration of each host. The biggest problem I think is the fact that you cannot automatically create graph with the generated items of each discovered entities. For instance, I had to create a CPU Temperature graph in each of my host. If you have few hosts, like many, it is acceptable, but if you have hundreds of hosts, you just don't do it. &lt;/p&gt;
&lt;p&gt;All the scripts and the template export file are available in the &lt;a href="https://github.com/wichtounet/zabbix-lld" title="zabbix-lld repository"&gt;zabbix-lld&lt;/a&gt; repository. For everything to work, you need the lscpu, lm_sensors and smartmontools utilities. &lt;/p&gt;
&lt;p&gt;If you have any question or if something doesn't work (I don't offer any guarantee, but it should work on most recent Linux machines), don't hesitate to comment on this post. &lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>Others</category><category>Server</category><category>zabbix</category><guid>http://wichtounet.github.io/posts/2013/12/zabbix-low-level-discovery-cores-cpus-hard-disk.html</guid><pubDate>Mon, 30 Dec 2013 09:12:31 GMT</pubDate></item><item><title>Gentoo Tips: Avoid Gnome 3.8 from being emerged automatically</title><link>http://wichtounet.github.io/posts/2013/12/gentoo-tips-avoid-gnome-3-8-emerged-automatically.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Since Gnome 3.8 has been out in the portage tree, a lot of problems arise when you try to emerge something. If it was only when you update the system, it would be OK, but this arises every time you try to install something.&lt;/p&gt;
&lt;p&gt;For instance, if I try to update vim on my system, it tries to update empathy to version 3.8 and then pulls some other dependencies causing blocks and other USE problems. I personally don't think empathy should be emerged when emerging vim. Fortunately, you can disable this behavior by using emerge in this way:&lt;/p&gt;
&lt;p&gt;[code]emerge --ignore-built-slot-operator-deps=y ...[/code]&lt;/p&gt;
&lt;p&gt;With that, when you emerge vim, it doesn't emerge Gnome 3.8. It is very useful if you want to stay with Gnome 3.6 for the moment.&lt;/p&gt;
&lt;p&gt;I already used this tip several times. I hope that this will be useful to other people.&lt;/p&gt;&lt;/div&gt;</description><category>Gentoo</category><category>Gentoo</category><category>Linux</category><category>Tips</category><guid>http://wichtounet.github.io/posts/2013/12/gentoo-tips-avoid-gnome-3-8-emerged-automatically.html</guid><pubDate>Sat, 07 Dec 2013 06:24:17 GMT</pubDate></item><item><title>Why and how I completely left Windows for Linux</title><link>http://wichtounet.github.io/posts/2013/07/why-how-left-windows-for-linux.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;For years now, I always kept a dual-boot at home with a Linux system (currently Gentoo) and a Windows system. At work, I only use Gentoo. This week-end, I decided to completely remove it and migrate the applications I used on Windows to my Gentoo system.
&lt;/p&gt;&lt;h4&gt;Why Windows ?&lt;/h4&gt;
&lt;p&gt;So first things first, why was I keeping the Windows system ? For several reasons:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;span style="line-height: 13px;"&gt;Games :) Unfortunately, most of the games I play are not natively compatible with Linux. &lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;Office. I always liked Microsoft Office. As I hate OpenOffice/LibreOffice, I never wanted to remove it For schools we always had several teachers forcing us to use Microsoft document formats.&lt;/li&gt;
    &lt;li&gt;Hardware support. I always found that hardware support in Windows was great. Most of the time when you add new peripheral, there is nothing, it just works, which is great.&lt;/li&gt;
    &lt;li&gt;Applications. I always had some applications that I didn't found good enough Linux equivalents for. For instance, Newsleecher, iTunes or TaggedFrog.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On the other hand, I work on Linux for years now and I would like to have to work on Windows again.&lt;/p&gt;
&lt;h4&gt;What Changed ?&lt;/h4&gt;

&lt;p&gt;This weekend I upgraded my hardware configuration (Motherboard, CPU and RAM). I was afraid that I had to reinstall my Linux configurations (because of Gentoo compiled with march=native), but I never thought that I would have to reinstall Windows. I turned out the contrary: my Gentoo installation worked just fine and my Windows totally crashed (BSOD at each startup). I finally made it through Windows after disabled AHCI mode on my motherboard, but then activation was invalidated (of course...) and online activation was not working. I decided to install the new chipset drivers and launch the Windows update and after that, Windows decided to boot without any USB support (WTF...). After that, I decided that Windows what not so great at all for   hardware support...&lt;/p&gt;
&lt;p&gt;Another reason I left Windows is Windows 8. I find that Window 7 was really great, but I really don't like Windows 8 and I would never have upgraded my Seven to it. Moreover, I recently bought Microsoft Office 2013 and it turned that I had to create an account at Microsoft to install it... Seriously ??? And moreover, it turned out to be worse thant Office 2010 (which, again, was great).&lt;/p&gt;
&lt;p&gt;So all these reasons made me remove Windows.&lt;/p&gt;
&lt;h4&gt;How to migrate everything to Linux ?&lt;/h4&gt;

&lt;p&gt;First, I had no problem with my data. Most of my data are on a personal NAS and the remaining is on Dropbox, so no problem on this side.&lt;/p&gt;
&lt;p&gt;I still had some problems to resolve. First of all, I needed my games to run on Linux. I currently play only Diablo III. As I had received a year free of &lt;a title="Crossover" href="http://www.codeweavers.com/products/"&gt;Crossover&lt;/a&gt;, I decided to give it a try. Crossover is based on Wine and ensures that some software are running correctly under it and provide technical support. After some tuning, Diablo III was running almost flawlessly on my Gentoo machine :) Problem 1 solved. I will totally buy a license of Crossover, once my free year is over.&lt;/p&gt;
&lt;p&gt;I still add some applications to replace. I use iTunes as my main music player and library manager. Some time ago, I tried a lot of programs like Amarok/Rythmbox/Banshee, but I didn't liked them a lot and they were not running very well on large library of music files. This time, I tried &lt;a title="Clementine" href="http://www.clementine-player.org/"&gt;Clementine&lt;/a&gt;. Even if not very beautiful, it had all the features I needed and worked very well. I decided to stick with it. Another program I like a lot on Windows is TaggedFrog. It is a very simple program allowing to put tags on any file on the system and then search by tag on them. I haven't found a total equivalent. I first tried Tracker that is a Gnome project, but I was not satisfied with the search interface. After that, I tried the very simple &lt;a title="TMSU" href="http://tmsu.org/"&gt;TMSU&lt;/a&gt;. It is a command-line based tagging manager. All the tagging must be done in command line. In my case, it is not a problem, as I don't mind using the command-line and I don't tag files very often. What is very interesting about TMSU is that it can create a virtual file system (based on FUSE). In this file system, you have all your tags  as folder and you can see directly all the files of each tag. Moreover, you can directly make cross search (has tag X and Y and Z) by just going down in the tag folder. It is really great and has everything I needed. Finally, I also needed something to replace Newsleecher. I haven't found something as great (especially no replacement for the Supersearch function), but I installed &lt;a title="Sabnzbd" href="http://sabnzbd.org/"&gt;Sabnzbd&lt;/a&gt; which works really well and is very simple. For now, I just use the web interface and haven't installed any other front-end, but that will perhaps change in the future. &lt;a href="http://tmsu.org/"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I haven't replaced Office for now on. It occurred to me that since I left school, I haven't used it a lot, so that will probably not be a problem anymore. I will change to write the few letters I have to write on Latex and if I have Office documents, I'll probably read them on Google Drive.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Even if I lost a lot of time with all that, I think it is a great think. It makes one less configuration to maintain and some less costs on the future. Moreover, I will save some time, because I won't have to switch between Linux and Windows for different tasks. And now, I have a second SSD ready for something else, either for RAID 1 to ensure redundancy on Linux or to mount on a server, I'll see later.&lt;/p&gt;
&lt;p&gt;I will probably have some more problems in the future, but I'm convinced that there will be Linux solutions to it :)&lt;/p&gt;&lt;/div&gt;</description><category>Gentoo</category><category>Linux</category><category>Linux</category><category>Others</category><category>Personal</category><category>Windows</category><guid>http://wichtounet.github.io/posts/2013/07/why-how-left-windows-for-linux.html</guid><pubDate>Mon, 01 Jul 2013 08:24:25 GMT</pubDate></item><item><title>CMakeLatex 1.0.2 - Support for nomenclature and better filters</title><link>http://wichtounet.github.io/posts/2012/11/cmakelatex-1-0-2-nomenclature-filters.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I released a new version of CMakeLatex, the version 1.0.2. &lt;/p&gt;
&lt;p&gt;First of all, this version restore the support for nomenclature. Then, it also adds filters for makeindex (including makeglossaries and makenomenclature). The filters will hides all the information of the output stream but the errors. The filters for pdflatex are also improved. &lt;/p&gt;
&lt;p&gt;CMakeLatex is a CMake script to build Latex documents using CMake / Make. It supports glossary, indexes, bibliographies and nomenclature. It can automatically converts your images to the right format using imagemagick or cairosvg (for SVG to PDF conversion). &lt;/p&gt;
&lt;p&gt;You can download it on Github: &lt;a href="https://github.com/wichtounet/CMakeLatex" title="CMakeLatex Github repository" target="_blank"&gt;CMakeLatex Github repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have any idea for improvement, don't hesitate to contact me or to create a Feature Request on Github.&lt;/p&gt;&lt;/div&gt;</description><category>cmake</category><category>Latex</category><category>Linux</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2012/11/cmakelatex-1-0-2-nomenclature-filters.html</guid><pubDate>Mon, 05 Nov 2012 09:02:19 GMT</pubDate></item><item><title>eddic compiles with CLang 3.1</title><link>http://wichtounet.github.io/posts/2012/11/eddic-compiles-with-clang-3-1.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I finally added support for compiling eddic with LLVM CLang 3.1 !&lt;/p&gt;
&lt;p&gt;The current development version can be completely compiled with CLang. Starting with the version 1.1.4, all versions of eddic will be support GCC and CLang. &lt;/p&gt;
&lt;p&gt;The changes have not been as painful as I first thought. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;The main problem that I has was about a static const variable of a class that had no user-constructor. GCC allows that, but it is not standard compliant and CLang was complaining. &lt;/li&gt;
    &lt;li&gt;Another problem that I encountered was about the used of bit flags and Template Meta Programming. I simplified that by the use of a simple type traits and it worked. I don't really know why this does not worked at first. &lt;/li&gt;
    &lt;li&gt;The remaining effort was to fix the several warnings that CLang had. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CLang also fixed a bug in my code with a warning on a assignment that was not supposed to be an assignment, thanks CLang. &lt;/p&gt;
&lt;p&gt;The most interesting fact about CLang is that &lt;strong&gt;is it twice faster to build eddic than GCC&lt;/strong&gt;. I think I'm gonna use it during development to fasten the compile time. Moreover, even if I only worked two days with it, it seems that the error messages are indeed better than the GCC's ones. &lt;/p&gt;
&lt;p&gt;I haven't tried to compare the performances of eddic in both cases, but I will do that in the future, soon after the 1.1.4 version is released. &lt;/p&gt;
&lt;p&gt;I tried the CLang static analyzer on eddic but it didn't found any bugs. Moreover, it crashed on several of my files. I didn't found why for now, but I will continue to investigate, perhaps I'm not using it correctly. &lt;/p&gt;
&lt;p&gt;I expect to publish the next version of eddic in the next two weeks. This version has much more improvements that I thought at first and I have less time to work now that &lt;a href="http://www.baptiste-wicht.com/2012/09/back-in-berkeley-california/" title="Back in Berkeley, California" target="_blank"&gt;I'm working on my Master thesis&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;More informations on CLang: &lt;a href="http://clang.llvm.org/" title="CLang official site"&gt;The official site&lt;/a&gt;. &lt;/p&gt;&lt;/div&gt;</description><category>CLang</category><category>Compilers</category><category>EDDI</category><category>EDDI</category><category>gcc</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2012/11/eddic-compiles-with-clang-3-1.html</guid><pubDate>Thu, 01 Nov 2012 09:11:05 GMT</pubDate></item><item><title>Linux symbolic links (soft) and hard links</title><link>http://wichtounet.github.io/posts/2012/09/linux-symbolic-links-hard-links.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;On Linux, it is possible to create &lt;strong&gt;links to existing file&lt;/strong&gt;. These links can be either &lt;strong&gt;symbolic links&lt;/strong&gt; or &lt;strong&gt;hard links&lt;/strong&gt;. Each of them having advantages and drawbacks. In this small post, we will see the differences between the two kinds of links and how to use them.
&lt;/p&gt;&lt;h3&gt;Hard Link&lt;/h3&gt;
&lt;p&gt;An hard link refers directly to the physical location of another file (an inode to be precise).&lt;/p&gt;
&lt;p&gt;A hard link has some limitations: it cannot refer to a directory and cannot cross file system boundaries. It means that you can only create hard links to the same file system where the hard link is located.&lt;/p&gt;
&lt;p&gt;When the source of the link is moved or removed, the hard link still refer to the source.&lt;/p&gt;
&lt;p&gt;Symbolic link are created with the &lt;strong&gt;ln&lt;/strong&gt; command. For instance, to create a link to source_file: &lt;/p&gt;
&lt;p&gt;[bash]ln source_file link[/bash]&lt;/p&gt;
&lt;h3&gt;Symbolic Link&lt;/h3&gt;

&lt;p&gt;A symbolic link refers to a symbolic path indicating the location of the source file. You can see it as a link to a path (itself refering to an inode).&lt;/p&gt;
&lt;p&gt;A symbolic link is less limited. It can refer to a directory and can cross file system boundaries.&lt;/p&gt;
&lt;p&gt;However, when the source of the link is moved or removed, the symbolic link is not updated.&lt;/p&gt;
&lt;p&gt;Symbolic link are created with the &lt;strong&gt;ln&lt;/strong&gt; command. For instance, to create a symbolic link to source_file:&lt;/p&gt;
&lt;p&gt;[bash]ln -s source_file link[/bash]&lt;/p&gt;
&lt;h3&gt;Deletion&lt;/h3&gt;

&lt;p&gt;The deletion of a link (hard or symbolic) can be achieved with the &lt;strong&gt;rm&lt;/strong&gt; or &lt;strong&gt;unlink&lt;/strong&gt; commands: &lt;/p&gt;
&lt;p&gt;[bash]rm link&lt;/p&gt;
&lt;p&gt;unlink link[/bash]&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;And that's it!&lt;/p&gt;
&lt;p&gt;Symbolic and hard links are very useful tools and are very easy to use. &lt;/p&gt;
&lt;p&gt;I hope that this blog post helped you understand a little better the differences between the two types of links and how to use them. &lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2012/09/linux-symbolic-links-hard-links.html</guid><pubDate>Fri, 21 Sep 2012 09:16:37 GMT</pubDate></item><item><title>Memory Manager in 64bits Intel Assembly on Linux</title><link>http://wichtounet.github.io/posts/2012/08/memory-manager-intel-assembly-64-linux.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;For &lt;a title="EDDI Compiler 1.1.1 – Dynamic Memory Allocation and Constructors/Destructors" href="http://www.baptiste-wicht.com/2012/07/eddi-compiler-1-1-1-dynamic-memory-allocation-constructors-destructors/"&gt;the last version of the EDDI Compiler&lt;/a&gt;, it has been necessary to extend the dynamic memory allocator, to support free memory. In this post, we will see how to write a simple Memory Manager in Intel Assembly for Linux.&lt;/p&gt;
&lt;p&gt;In the past, we've seen &lt;a title="Dynamic memory allocation in Intel Assembly on Linux" href="http://www.baptiste-wicht.com/2011/11/dynamic-memory-allocation-intel-assembly-linux/"&gt;how to write a basic memory allocator&lt;/a&gt;, this time, we will write a more complete version.&lt;/p&gt;
&lt;p&gt;The implementation is made in 64bits Intel Assembly.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Memory Manager specification&lt;/h4&gt;
&lt;p&gt;The memory will be allocated by blocks. Each block will contain a header with two information:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;A boolean flag indicating if the block is free or not&lt;/li&gt;
    &lt;li&gt;The size of the block (including the header)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each time some memory is asked, the blocks are tested one by one until an available one is found. If no available block is found, a new block is allocated after the last one and this block is returned.&lt;/p&gt;
&lt;p&gt;The memory manager consists of three functions:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;memory_init: Init the memory manager&lt;/li&gt;
    &lt;li&gt;memory_alloc: Allocate the given number of bytes of memory&lt;/li&gt;
    &lt;li&gt;memory_free: Release the given block&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The parameter is passed in the &lt;strong&gt;r14&lt;/strong&gt; register. The return value is returned in the &lt;strong&gt;rax&lt;/strong&gt; register.&lt;/p&gt;
&lt;h4&gt;Global State&lt;/h4&gt;

&lt;p&gt;This implementation needs two global variables. One for the start address of memory and the other one for the last:&lt;/p&gt;
&lt;p&gt;[assembly]section .data&lt;/p&gt;
&lt;p&gt;mem_last dq 0&lt;/p&gt;
&lt;p&gt;mem_start dq 0[/assembly]&lt;/p&gt;
&lt;h4&gt;Init memory Manager&lt;/h4&gt;

&lt;p&gt;The init function is very simple to implement:&lt;/p&gt;
&lt;p&gt;[assembly]init:&lt;/p&gt;
&lt;p&gt;push rbp&lt;/p&gt;
&lt;p&gt;mov rbp, rsp&lt;/p&gt;
&lt;p&gt;mov rax, 12&lt;/p&gt;
&lt;p&gt;xor rdi, rdi&lt;/p&gt;
&lt;p&gt;syscall&lt;/p&gt;
&lt;p&gt;mov [mem_start], rax&lt;/p&gt;
&lt;p&gt;mov [mem_last], rax&lt;/p&gt;
&lt;p&gt;leave&lt;/p&gt;
&lt;p&gt;ret[/assembly]&lt;/p&gt;
&lt;p&gt;We just have to call sys_brk in order to get the location of &lt;em&gt;program break&lt;/em&gt;. Then, the start and the last addresses are the same.&lt;/p&gt;
&lt;h4&gt;Free memory&lt;/h4&gt;

&lt;p&gt;The free function is the simplest one:&lt;/p&gt;
&lt;p&gt;[assembly]free:&lt;/p&gt;
&lt;p&gt;push rbp&lt;/p&gt;
&lt;p&gt;mov rbp, rsp&lt;/p&gt;
&lt;p&gt;mov qword [r14 - 16], 1&lt;/p&gt;
&lt;p&gt;leave&lt;/p&gt;
&lt;p&gt;ret[/assembly]&lt;/p&gt;
&lt;p&gt;The address to free is passed in the &lt;strong&gt;r14&lt;/strong&gt; register. We have to go back 16 bytes (size of the control block) to go to the start of the block. The availability flag is set to 1 (the block is free).&lt;/p&gt;
&lt;h4&gt;The alloc function&lt;/h4&gt;

&lt;p&gt;The alloc function is the most complex:&lt;/p&gt;
&lt;p&gt;[assembly]alloc:&lt;/p&gt;
&lt;p&gt;push rbp&lt;/p&gt;
&lt;p&gt;mov rbp, rsp&lt;/p&gt;
&lt;p&gt;push rdi&lt;/p&gt;
&lt;p&gt;push r10&lt;/p&gt;
&lt;p&gt;push r11&lt;/p&gt;
&lt;p&gt;push r12&lt;/p&gt;
&lt;p&gt;push r13&lt;/p&gt;
&lt;p&gt;push r14&lt;/p&gt;
&lt;p&gt;add r14, 16&lt;/p&gt;
&lt;p&gt;mov r12, [mem_start]&lt;/p&gt;
&lt;p&gt;mov r13, [mem_last]&lt;/p&gt;
&lt;p&gt;.start:&lt;/p&gt;
&lt;p&gt;cmp r12, r13&lt;/p&gt;
&lt;p&gt;je .alloc&lt;/p&gt;
&lt;p&gt;mov r10, [r12]&lt;/p&gt;
&lt;p&gt;mov r11, [r12 + 8]&lt;/p&gt;
&lt;p&gt;cmp r10, 1&lt;/p&gt;
&lt;p&gt;jne .move&lt;/p&gt;
&lt;p&gt;cmp r11, r14&lt;/p&gt;
&lt;p&gt;jl .move&lt;/p&gt;
&lt;p&gt;mov qword [r12], 0&lt;/p&gt;
&lt;p&gt;lea rax, [r12 + 16]&lt;/p&gt;
&lt;p&gt;pop r14&lt;/p&gt;
&lt;p&gt;pop r13&lt;/p&gt;
&lt;p&gt;pop r12&lt;/p&gt;
&lt;p&gt;pop r11&lt;/p&gt;
&lt;p&gt;pop r10&lt;/p&gt;
&lt;p&gt;pop rdi&lt;/p&gt;
&lt;p&gt;leave&lt;/p&gt;
&lt;p&gt;ret&lt;/p&gt;
&lt;p&gt;.move:&lt;/p&gt;
&lt;p&gt;add r12, r11&lt;/p&gt;
&lt;p&gt;jmp .start&lt;/p&gt;
&lt;p&gt;.alloc:&lt;/p&gt;
&lt;p&gt;lea rdi, [r12 + r14]&lt;/p&gt;
&lt;p&gt;mov rax, 12&lt;/p&gt;
&lt;p&gt;syscall&lt;/p&gt;
&lt;p&gt;mov [mem_last], rdi&lt;/p&gt;
&lt;p&gt;mov qword [r12], 0&lt;/p&gt;
&lt;p&gt;mov qword [r12 + 8], r14&lt;/p&gt;
&lt;p&gt;lea rax, [r12 + 16]&lt;/p&gt;
&lt;p&gt;pop r14&lt;/p&gt;
&lt;p&gt;pop r13&lt;/p&gt;
&lt;p&gt;pop r12&lt;/p&gt;
&lt;p&gt;pop r11&lt;/p&gt;
&lt;p&gt;pop r10&lt;/p&gt;
&lt;p&gt;pop rdi&lt;/p&gt;
&lt;p&gt;leave&lt;/p&gt;
&lt;p&gt;ret[/assembly]&lt;/p&gt;
&lt;p&gt;As the function is a bit complex, I will detail it in part:&lt;/p&gt;
&lt;p&gt;[assembly]add r14, 16&lt;/p&gt;
&lt;p&gt;mov r12, [mem_start]&lt;/p&gt;
&lt;p&gt;mov r13, [mem_last]&lt;/p&gt;
&lt;p&gt;.start:&lt;/p&gt;
&lt;p&gt;cmp r12, r13&lt;/p&gt;
&lt;p&gt;je .alloc&lt;/p&gt;
&lt;p&gt;mov r10, [r12]&lt;/p&gt;
&lt;p&gt;mov r11, [r12 + 8]&lt;/p&gt;
&lt;p&gt;cmp r10, 1&lt;/p&gt;
&lt;p&gt;jne .move&lt;/p&gt;
&lt;p&gt;cmp r11, r14&lt;/p&gt;
&lt;p&gt;jl .move&lt;/p&gt;
&lt;p&gt;mov qword [r12], 0&lt;/p&gt;
&lt;p&gt;lea rax, [r12 + 16][/assembly]&lt;/p&gt;
&lt;p&gt;The necessary number of bytes is passed in the &lt;strong&gt;r14&lt;/strong&gt; register. We add 16 bytes (size of the control group) to the size as we also need some place for the header. Then, we load the start and last addresses. If both addresses are equal, we need to allocate more memory (detailed later). Then, we check the size and the availability of the current block. If the size is enough to fit the needs and the block is available, we set it to unavailable. We return the address past the control block (16 bytes).&lt;/p&gt;
&lt;p&gt;[assembly].move:&lt;/p&gt;
&lt;p&gt;add r12, r11&lt;/p&gt;
&lt;p&gt;jmp .start[/assembly]&lt;/p&gt;
&lt;p&gt;To move to the next block, we just have to add the size of the current block to the current block address.&lt;/p&gt;
&lt;p&gt;[assembly].alloc:&lt;/p&gt;
&lt;p&gt;lea rdi, [r12 + r14]&lt;/p&gt;
&lt;p&gt;mov rax, 12&lt;/p&gt;
&lt;p&gt;syscall&lt;/p&gt;
&lt;p&gt;mov [V_mem_last], rdi&lt;/p&gt;
&lt;p&gt;mov qword [r12], 0&lt;/p&gt;
&lt;p&gt;mov qword [r12 + 8], r14&lt;/p&gt;
&lt;p&gt;lea rax, [r12 + 16][/assembly]&lt;/p&gt;
&lt;p&gt;To allocate memory, we compute the new &lt;em&gt;program break&lt;/em&gt; and call &lt;em&gt;sys_brk&lt;/em&gt; again to set the new &lt;em&gt;program break&lt;/em&gt;. The block is then set to not available and the size is set. We return the address past the control block (16 bytes).&lt;/p&gt;
&lt;p&gt;The rest of the program is just here to save and restore the registers and compute the stack frames.&lt;/p&gt;
&lt;h4&gt;Wrap-Up&lt;/h4&gt;

&lt;p&gt;In this article, we saw how to implement a very simple memory manager in 64bits Intel Assembly on Linux. This memory manager is very simple, but has several drawbacks:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;The overhead for small blocks is important. For example, allocating an 8 bytes integer needs a 24 bytes block, thrice the size of the int.&lt;/li&gt;
    &lt;li&gt;In the worst-case scenario, all of the process memory need to be walked across to find a new free block&lt;/li&gt;
    &lt;li&gt;The functions are not thread-safe&lt;/li&gt;
    &lt;li&gt;This algorithm can lead to a lot of memory fragmentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the future I will try to make a more powerful version of this memory manager.&lt;/p&gt;
&lt;h4&gt;Download&lt;/h4&gt;

&lt;p&gt;All the functions are available online on the Github Repository:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_64_alloc.s"&gt;alloc&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_64_free.s"&gt;free&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_64_init.s"&gt;init&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are also available in 32bits Intel Assembly:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_32_alloc.s"&gt;alloc&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_32_free.s"&gt;free&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_32_init.s"&gt;init&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Assembly</category><category>Assembly</category><category>Intel</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2012/08/memory-manager-intel-assembly-64-linux.html</guid><pubDate>Thu, 02 Aug 2012 08:05:30 GMT</pubDate></item><item><title>taskwarrior-php 0.1 : A simple PHP Frontend for Taskwarrior</title><link>http://wichtounet.github.io/posts/2012/07/taskwarrior-php-frontend-0-1.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I released the version 0.1 of &lt;strong&gt;taskwarrior-php&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This project is a simple PHP Frontend for Taskwarrior. For now, the frontend is quite basic. All the tasks are displayed and sorted by projects. The completion of each project is also computed.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/?attachment_id=2035" rel="attachment wp-att-2035"&gt;&lt;img class="size-medium wp-image-2035" title="taskwarrior-php Screenshot" src="http://wichtounet.github.io/wp-content/uploads/2012/07/taskwarrior-php-1-300x271.png" alt="taskwarrior-php Screenshot" width="300" height="271"&gt;&lt;/a&gt; taskwarrior-php Screenshot&lt;/p&gt;
&lt;p&gt;You can also insert a new task. For now, only the project and the description of the task can be modified.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Download&lt;/h3&gt;
&lt;p&gt;The application is available on the Git repository : &lt;a href="https://github.com/wichtounet/taskwarrior-php"&gt;https://github.com/wichtounet/taskwarrior-php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The installation is simple, you just have to put all the files in a folder of a PHP server. Then, you have to edit the config.php to set the location of your Taskwarrior files.&lt;/p&gt;
&lt;p&gt;It is necessary that the Taskwarrior files are on the PHP server as well. For that, you can use the FTP pull and push commands of Taskwarrior.&lt;/p&gt;
&lt;p&gt;Don't hesitate to contact me if you have some ideas for this project or if you find some bugs.&lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>Releases</category><category>Tools</category><category>Web</category><category>Web</category><guid>http://wichtounet.github.io/posts/2012/07/taskwarrior-php-frontend-0-1.html</guid><pubDate>Mon, 09 Jul 2012 09:21:14 GMT</pubDate></item></channel></rss>