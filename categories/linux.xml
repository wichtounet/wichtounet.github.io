<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>@Blog("Baptiste Wicht") (Linux)</title><link>http://wichtounet.github.io/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://wichtounet.github.io/categories/linux.xml"></atom:link><language>en</language><lastBuildDate>Thu, 27 Mar 2014 18:08:53 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>budgetwarrior 0.3.0 - Objective and wish management</title><link>http://wichtounet.github.io/posts/2014/02/budgetwarrior-0-3-0-objective-wish-management.html</link><description>&lt;div&gt;&lt;p&gt;I'm pleased to announce the release of another budgetwarrior release, the version 0.3.0.&lt;/p&gt;
&lt;h3&gt;Changes&lt;/h3&gt;
&lt;p&gt;This version contains several important changes.&lt;/p&gt;
&lt;p&gt;The first one is the addition of a new module to manage objectives. You can add objective with &lt;em&gt;budget objective add). &lt;/em&gt;For instance, you can add an objective saying you want to save 10000$ a year or 200$ a month. When you set your objectives, budget warrior computes how well you complete them. For instance, here is the status of my objectives:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113057-e1391337197470.png"&gt;&lt;img alt="Objective Status" src="http://wichtounet.github.io/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113057-e1391337197470-300x83.png" title="Objective Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another module has been added to manage wishes. You can add wishes to budgetwarrior (&lt;em&gt;budget wish add&lt;/em&gt;) and then budgetwarrior will tell you if it is a good time to buy them. Here is an example of wish status:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113814.png"&gt;&lt;img class="size-medium wp-image-2665" alt="Wish Status" src="http://wichtounet.github.io/wp-content/uploads/2014/02/Screenshot-from-2014-02-02-113814-e1391337576857-300x96.png" width="300" height="96"&gt;&lt;/a&gt; Wish Status&lt;/p&gt;
&lt;p&gt;The diagnostics tells you where the money will be taken: On savings, on year savings or on month savings (ideal case). It also checks the objectives to see if the payment doesn't break the fulfillment of some of them.&lt;/p&gt;
&lt;p&gt;For complete diagnostics, it is necessary to you register your fortune (&lt;em&gt;budget fortune check&lt;/em&gt;), ideally once a month.&lt;/p&gt;
&lt;p&gt;Of course, this is only a tool, you should not only use that to decide when to buy something, but it may have a good point of view ;)&lt;/p&gt;
&lt;p&gt;Moreover, the version also have other smaller changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you make an error when creating a new item (expense, earning, ...), the tool now lets you retry without losing what you typed before.&lt;/li&gt;
&lt;li&gt;Confirmation messages are now shown after each modification command (delete, add and edit).&lt;/li&gt;
&lt;li&gt;The license has been changed from Boost to MIT. The sense is almost the same, but the MIT is more well known and I thought it would be easier for people to know what this means.&lt;/li&gt;
&lt;li&gt;There have several changes to the code base, but that doesn't impact the usage of the tool.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I hope you'll found these changes interesting :)&lt;/p&gt;
&lt;p&gt;If you are interested by the tool, you can download it on Github: &lt;a title="budgetwarrior repository" href="https://github.com/wichtounet/budgetwarrior"&gt;budgetwarrior&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is now Gentoo and Arch Linux installation packages available for ease of installation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have a suggestion or you found a bug, please post an issue on the github project: &lt;a title="https://github.com/wichtounet/budgetwarrior" href="https://github.com/wichtounet/budgetwarrior"&gt;https://github.com/wichtounet/budgetwarrior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any comment, don't hesitate to contact me, either by letting a comment on this post or by email.&lt;/p&gt;&lt;/div&gt;</description><category>budgetwarrior</category><category>C++</category><category>Linux</category><category>projects</category><guid>http://wichtounet.github.io/posts/2014/02/budgetwarrior-0-3-0-objective-wish-management.html</guid><pubDate>Mon, 03 Feb 2014 08:21:29 GMT</pubDate></item><item><title>budgetwarrior 0.2.1 - Minor changes and Gentoo ebuild</title><link>http://wichtounet.github.io/posts/2014/01/budgetwarrior-0-2-1-minor-changes-gentoo-ebuild.html</link><description>&lt;div&gt;&lt;p&gt;I've released a new version of budgetwarrior, the release 0.2.1. budgetwarrior is a simple command line application to manage a personal budget.&lt;/p&gt;
&lt;p&gt;The version 0.2.1 contains several bug fixes about archived accounts and bug fixes for budget across several years.&lt;/p&gt;
&lt;p&gt;The application as well as the source code is available online: &lt;a href="https://github.com/wichtounet/budgetwarrior"&gt;https://github.com/wichtounet/budgetwarrior&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've created Gentoo ebuilds for this application. They are available on my Portage overlay: &lt;a href="https://github.com/wichtounet/portage-overlay"&gt;https://github.com/wichtounet/portage-overlay&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Gentoo Installation&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;Edit overlays section of /etc/layman/layman.cfg. Here's an example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;overlays: http://www.gentoo.org/proj/en/overlays/repositories.xml
           http://github.com/wichtounet/portage-overlay/raw/master/repository.xml&lt;/code&gt;
&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;Sync layman&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;layman -S&lt;/pre&gt;

&lt;ul&gt;
    &lt;li&gt;Add the overlay:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;layman -a wichtounet&lt;/pre&gt;

&lt;ul&gt;
    &lt;li&gt;Install budgetwarrior&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;emerge budgetwarrior&lt;/pre&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;If you find any issues with the tool, don't hesitate to post an issue on Github. If you have comments about it, you can post a comment on this post or contact me by email.&lt;/p&gt;&lt;/div&gt;</description><category>budgetwarrior</category><category>Gentoo</category><category>Linux</category><category>Tools</category><guid>http://wichtounet.github.io/posts/2014/01/budgetwarrior-0-2-1-minor-changes-gentoo-ebuild.html</guid><pubDate>Thu, 16 Jan 2014 11:41:00 GMT</pubDate></item><item><title>Zabbix - Low Level Discovery of cores, CPUs and Hard Disk</title><link>http://wichtounet.github.io/posts/2013/12/zabbix-low-level-discovery-cores-cpus-hard-disk.html</link><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2013/12/Screenshot-from-2013-12-29-165743-e1388332859892.png"&gt;&lt;img src="http://wichtounet.github.io/wp-content/uploads/2013/12/Screenshot-from-2013-12-29-165743-e1388332859892-300x151.png" alt="Zabbix SSD Status, configured with Low Level Discovery" width="300" height="151" class="size-medium wp-image-2644"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At home, I'm using Zabbix to monitor my servers, it has plenty of interesting features and can be extended a lot by using User Parameter.&lt;/p&gt;
&lt;p&gt;In this post, I'm gonna talk about Low Level Discovery (LLD). If you are only interested in the final result, go the Conclusion section, you can download my template containing all the rules ;)&lt;/p&gt;
&lt;h4&gt;Low Level Discovery (LLD)&lt;/h4&gt;

&lt;p&gt;LLD is a feature to automatically discover some properties of the monitored host and create items, triggers and graphs.&lt;/p&gt;
&lt;p&gt;By default, Zabbix support three types of item discovery:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Mounted filesystems&lt;/li&gt;
    &lt;li&gt;Network interface&lt;/li&gt;
    &lt;li&gt;SNMP's OIDs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two are very useful, since they will give you by default, for instance, the free space of each mounted file system or the bandwith going in and out of each network interface. As I only monitor Linux servers, I don't use the last one, but it will eventually interest other people.&lt;/p&gt;
&lt;p&gt;Another very interesting thing about this feature is that you can extend it by discovering more items. In this article, I will show how to discover CPUs, CPU Cores and Hard Disk.&lt;/p&gt;
&lt;p&gt;The most important part of custom discovery is to create a script on the monitored machines that can "discover" something. It can be any executable, the only thing important is that it outputs data in the correct format. I have to say that the format is quite ugly, but that is probably not very important ;) Here is the output of my hard disk discovery script:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s2"&gt;"data"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"{#DISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"/dev/sda"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"{#SHORTDISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"sda"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"{#DISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"/dev/sdb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"{#SHORTDISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"sdb"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"{#DISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"/dev/sdc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"{#SHORTDISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"sdc"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"{#DISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"/dev/sdd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"{#SHORTDISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"sdd"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"{#DISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"/dev/sde"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"{#SHORTDISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"sde"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"{#DISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"/dev/sdf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"{#SHORTDISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"sdf"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"{#DISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"/dev/sdg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"{#SHORTDISKNAME}"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"sdg"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can have as many keys for each discovered items, but the format must remains the same. In the item, trigger and graph prototypes, you will then use {#DISKNAME} or {#SHORTDISKNAME} to use the discovered values. &lt;/p&gt;
&lt;p&gt;Once you have created your scripts, you have to register it in the zabbix configuration as a user parameter. For instance, if you use the zabbix daemon, you need these lines in /etc/zabbix/zabbix_agentd.conf: &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nv"&gt;EnableRemoteCommands&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
...
&lt;span class="nv"&gt;UnsafeUserParameters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
...
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;discovery.hard_disk,/scripts/discover_hdd.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, when you will create the discovery rule, you can use discovery.hard_disk as the key. &lt;/p&gt;
&lt;p&gt;A discovery rule in itself is useful without prototypes, you can create three types of prototypes: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Item Prototype: This will create a new item for each discovered entity&lt;/li&gt;
    &lt;li&gt;Trigger Prototype: This will create a new trigger for each discovered entity. &lt;/li&gt;
    &lt;li&gt;Graph Prototype: This will create a graph for each discovered entity. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most useful are by far the item and trigger prototypes. The biggest problem with graphs is that you cannot create an aggregate graph of each discovered items. For instance, if you record the temperature of your CPU cores, you cannot automatically create a graph with the temperature of each discovered cores. For that, you have to create the graph in each host. Which makes, imho, graph prototypes pretty useless. Anyway...&lt;/p&gt;
&lt;p&gt;In the next section, I'll show how I have created discovery rules for Hard Disk, CPU and CPU cores. &lt;/p&gt;
&lt;h4&gt;Discover Hard Disk&lt;/h4&gt;

&lt;p&gt;The discovery script is really simple: &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;disks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ls -l /dev/sd* | awk &lt;span class="s1"&gt;'{print $NF}'&lt;/span&gt; | sed &lt;span class="s1"&gt;'s/[0-9]//g'&lt;/span&gt; | uniq&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"{"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"\"data\":["&lt;/span&gt;
&lt;span class="k"&gt;for &lt;/span&gt;disk in &lt;span class="nv"&gt;$disks&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"    {\"{#DISKNAME}\":\"$disk\",\"{#SHORTDISKNAME}\":\"${disk:5}\"},"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It just lists all the /dev/sdX devices, remove the partition number and remove the duplicates, to have only the hard disk at the end. &lt;/p&gt;
&lt;p&gt;I've created several item prototypes for each hard disk. Here are some examples using S.M.A.R.T. (you can download the template with all the items in the Conclusion section): &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Raw Read Error Rate&lt;/li&gt;
    &lt;li&gt;Spin Up Time&lt;/li&gt;
    &lt;li&gt;SSD Life Left&lt;/li&gt;
    &lt;li&gt;Temperature&lt;/li&gt;
    &lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may notice that some of them only make sense for SSD (SSD Life Left) and some others do not make any sense for SSD (Spin Up Time). This is not a problem since they will just be marked as Not Supported by Zabbix. &lt;/p&gt;
&lt;p&gt;All these datas are collected using the smartctl utility. &lt;/p&gt;
&lt;p&gt;I've also created some trigger to indicate the coming failure of an hard disk: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;SSD Life Left too low&lt;/li&gt;
    &lt;li&gt;Reallocated Sector Count too low&lt;/li&gt;
    &lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've just used the threshold reported by smartctl, they may be different from one disk manufacturers to another. I don't put a lot of faith on these values, since disk generally fail before going to threshold, but it could be a good indicator anyway. &lt;/p&gt;
&lt;h4&gt;Discover CPUs&lt;/h4&gt;

&lt;p&gt;Here is the script to discover CPUs: &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;cpus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;lscpu | grep &lt;span class="s2"&gt;"CPU(s):"&lt;/span&gt; | head -1 | awk &lt;span class="s1"&gt;'{print $NF}'&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;cpus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$cpus&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"{"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"\"data\":["&lt;/span&gt;
&lt;span class="k"&gt;for &lt;/span&gt;cpu in &lt;span class="k"&gt;$(&lt;/span&gt;seq 0 &lt;span class="nv"&gt;$cpus&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"    {\"{#CPUID}\":\"$cpu\"},"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It just uses lscpu and parses its output to find the number of CPU and then create an entry for each CPUs. &lt;/p&gt;
&lt;p&gt;I just have one item for each CPU: The CPU Utilization. &lt;/p&gt;
&lt;p&gt;I haven't created any trigger here. &lt;/p&gt;
&lt;h4&gt;Discover CPU Cores&lt;/h4&gt;

&lt;p&gt;Just before, we discovered the CPUs, but it is also interesting to discover the cores. If you don't have Hyperthreading, the result will be the same. It is especially interesting to get the temperature of each core. Here is the script: &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;cores&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;lscpu | grep &lt;span class="s2"&gt;"Core(s) per socket:"&lt;/span&gt; | awk &lt;span class="s1"&gt;'{print $NF}'&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;cores&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$cores&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"{"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"\"data\":["&lt;/span&gt;
&lt;span class="k"&gt;for &lt;/span&gt;core in &lt;span class="k"&gt;$(&lt;/span&gt;seq 0 &lt;span class="nv"&gt;$cores&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"    {\"{#COREID}\":\"$core\"},"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works in the same way as the previous script. &lt;/p&gt;
&lt;p&gt;I've only created one item prototype, to get the temperature of each core with lm_sensors. &lt;/p&gt;
&lt;h4&gt;Wrap-Up&lt;/h4&gt;

&lt;p&gt;Here are all the UserParameter necessary to make the discovery and the items works: &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;### System Temperature ###&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;system.temperature.core&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;,sensors|grep Core&lt;span class="se"&gt;\ &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt; |cut -d &lt;span class="s2"&gt;"("&lt;/span&gt; -f 1|cut -d &lt;span class="s2"&gt;"+"&lt;/span&gt; -f 2|cut -c 1-4
&lt;span class="c"&gt;### DISK I/O###&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom.vfs.dev.read.ops&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;,cat /proc/diskstats | egrep &lt;span class="nv"&gt;$1&lt;/span&gt; | head -1 | awk &lt;span class="s1"&gt;'{print $$4}'&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom.vfs.dev.read.ms&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;,cat /proc/diskstats | egrep &lt;span class="nv"&gt;$1&lt;/span&gt; | head -1 | awk &lt;span class="s1"&gt;'{print $$7}'&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom.vfs.dev.write.ops&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;,cat /proc/diskstats | egrep &lt;span class="nv"&gt;$1&lt;/span&gt; | head -1 | awk &lt;span class="s1"&gt;'{print $$8}'&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom.vfs.dev.write.ms&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;,cat /proc/diskstats | egrep &lt;span class="nv"&gt;$1&lt;/span&gt; | head -1 | awk &lt;span class="s1"&gt;'{print $$11}'&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom.vfs.dev.io.active&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;,cat /proc/diskstats | egrep &lt;span class="nv"&gt;$1&lt;/span&gt; | head -1 | awk &lt;span class="s1"&gt;'{print $$12}'&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom.vfs.dev.io.ms&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;,cat /proc/diskstats | egrep &lt;span class="nv"&gt;$1&lt;/span&gt; | head -1 y| awk &lt;span class="s1"&gt;'{print $$13}'&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom.vfs.dev.read.sectors&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;,cat /proc/diskstats | egrep &lt;span class="nv"&gt;$1&lt;/span&gt; | head -1 | awk &lt;span class="s1"&gt;'{print $$6}'&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom.vfs.dev.write.sectors&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;,cat /proc/diskstats | egrep &lt;span class="nv"&gt;$1&lt;/span&gt; | head -1 | awk &lt;span class="s1"&gt;'{print $$10}'&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;system.smartd_raw&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;,sudo smartctl -A &lt;span class="nv"&gt;$1&lt;/span&gt;| egrep &lt;span class="nv"&gt;$2&lt;/span&gt;| tail -1| xargs| awk &lt;span class="s1"&gt;'{print $$10}'&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;system.smartd_value&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;,sudo smartctl -A &lt;span class="nv"&gt;$1&lt;/span&gt;| egrep &lt;span class="nv"&gt;$2&lt;/span&gt;| tail -1| xargs| awk &lt;span class="s1"&gt;'{print $$4}'&lt;/span&gt;
&lt;span class="c"&gt;### Discovery ###&lt;/span&gt;
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;discovery.hard_disk,/scripts/discover_hdd.sh
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;discovery.cpus,/scripts/discover_cpus.sh
&lt;span class="nv"&gt;UserParameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;discovery.cores,/scripts/discover_cores.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(it must be set in zabbix_agentd.conf)&lt;/p&gt;
&lt;p&gt;You also need to give zabbix the right to use sudo with smartctl. For that, you have to edit your /etc/sudoers file and add this line: &lt;/p&gt;
&lt;pre&gt;ALL ALL=(ALL)NOPASSWD: /usr/sbin/smartctl&lt;/pre&gt;

&lt;h4&gt;Conclusion and Download&lt;/h4&gt;

&lt;p&gt;I hope that this helps some people to use Low Level Discovery in their Zabbix Monitoring Installation. &lt;/p&gt;
&lt;p&gt;LLD eases a lot the creation of multiple items discovery for hosts with different hardware or configuration. However, it has some problems for which I have not yet found a proper solution. First, you have to duplicate the client scripts on each host (or at least have them on a share available from each of them). Then, the configuration of each agent is also duplicated in the configuration of each host. The biggest problem I think is the fact that you cannot automatically create graph with the generated items of each discovered entities. For instance, I had to create a CPU Temperature graph in each of my host. If you have few hosts, like many, it is acceptable, but if you have hundreds of hosts, you just don't do it. &lt;/p&gt;
&lt;p&gt;All the scripts and the template export file are available in the &lt;a href="https://github.com/wichtounet/zabbix-lld" title="zabbix-lld repository"&gt;zabbix-lld&lt;/a&gt; repository. For everything to work, you need the lscpu, lm_sensors and smartmontools utilities. &lt;/p&gt;
&lt;p&gt;If you have any question or if something doesn't work (I don't offer any guarantee, but it should work on most recent Linux machines), don't hesitate to comment on this post.&lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>Others</category><category>Server</category><category>zabbix</category><guid>http://wichtounet.github.io/posts/2013/12/zabbix-low-level-discovery-cores-cpus-hard-disk.html</guid><pubDate>Mon, 30 Dec 2013 08:12:31 GMT</pubDate></item><item><title>Gentoo Tips: Avoid Gnome 3.8 from being emerged automatically</title><link>http://wichtounet.github.io/posts/2013/12/gentoo-tips-avoid-gnome-3-8-emerged-automatically.html</link><description>&lt;div&gt;&lt;p&gt;Since Gnome 3.8 has been out in the portage tree, a lot of problems arise when you try to emerge something. If it was only when you update the system, it would be OK, but this arises every time you try to install something.&lt;/p&gt;
&lt;p&gt;For instance, if I try to update vim on my system, it tries to update empathy to version 3.8 and then pulls some other dependencies causing blocks and other USE problems. I personally don't think empathy should be emerged when emerging vim. Fortunately, you can disable this behavior by using emerge in this way:&lt;/p&gt;
&lt;pre&gt;emerge --ignore-built-slot-operator-deps=y ...&lt;/pre&gt;

&lt;p&gt;With that, when you emerge vim, it doesn't emerge Gnome 3.8. It is very useful if you want to stay with Gnome 3.6 for the moment.&lt;/p&gt;
&lt;p&gt;I already used this tip several times. I hope that this will be useful to other people.&lt;/p&gt;&lt;/div&gt;</description><category>Gentoo</category><category>Linux</category><category>Tips</category><guid>http://wichtounet.github.io/posts/2013/12/gentoo-tips-avoid-gnome-3-8-emerged-automatically.html</guid><pubDate>Sat, 07 Dec 2013 05:24:17 GMT</pubDate></item><item><title>Why and how I completely left Windows for Linux</title><link>http://wichtounet.github.io/posts/2013/07/why-how-left-windows-for-linux.html</link><description>&lt;div&gt;&lt;p&gt;For years now, I always kept a dual-boot at home with a Linux system (currently Gentoo) and a Windows system. At work, I only use Gentoo. This week-end, I decided to completely remove it and migrate the applications I used on Windows to my Gentoo system.&lt;/p&gt;
&lt;h4&gt;Why Windows ?&lt;/h4&gt;

&lt;p&gt;So first things first, why was I keeping the Windows system ? For several reasons:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Games :) Unfortunately, most of the games I play are not natively compatible with Linux.&lt;/li&gt;
    &lt;li&gt;Office. I always liked Microsoft Office. As I hate OpenOffice/LibreOffice, I never wanted to remove it For schools we always had several teachers forcing us to use Microsoft document formats.&lt;/li&gt;
    &lt;li&gt;Hardware support. I always found that hardware support in Windows was great. Most of the time when you add new peripheral, there is nothing, it just works, which is great.&lt;/li&gt;
    &lt;li&gt;Applications. I always had some applications that I didn't found good enough Linux equivalents for. For instance, Newsleecher, iTunes or TaggedFrog.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On the other hand, I work on Linux for years now and I would like to have to work on Windows again.&lt;/p&gt;
&lt;h4&gt;What Changed ?&lt;/h4&gt;

&lt;p&gt;This weekend I upgraded my hardware configuration (Motherboard, CPU and RAM). I was afraid that I had to reinstall my Linux configurations (because of Gentoo compiled with march=native), but I never thought that I would have to reinstall Windows. I turned out the contrary: my Gentoo installation worked just fine and my Windows totally crashed (BSOD at each startup). I finally made it through Windows after disabled AHCI mode on my motherboard, but then activation was invalidated (of course...) and online activation was not working. I decided to install the new chipset drivers and launch the Windows update and after that, Windows decided to boot without any USB support (WTF...). After that, I decided that Windows what not so great at all for   hardware support...&lt;/p&gt;
&lt;p&gt;Another reason I left Windows is Windows 8. I find that Window 7 was really great, but I really don't like Windows 8 and I would never have upgraded my Seven to it. Moreover, I recently bought Microsoft Office 2013 and it turned that I had to create an account at Microsoft to install it... Seriously ??? And moreover, it turned out to be worse thant Office 2010 (which, again, was great).&lt;/p&gt;
&lt;p&gt;So all these reasons made me remove Windows.&lt;/p&gt;
&lt;h4&gt;How to migrate everything to Linux ?&lt;/h4&gt;

&lt;p&gt;First, I had no problem with my data. Most of my data are on a personal NAS and the remaining is on Dropbox, so no problem on this side.&lt;/p&gt;
&lt;p&gt;I still had some problems to resolve. First of all, I needed my games to run on Linux. I currently play only Diablo III. As I had received a year free of &lt;a title="Crossover" href="http://www.codeweavers.com/products/"&gt;Crossover&lt;/a&gt;, I decided to give it a try. Crossover is based on Wine and ensures that some software are running correctly under it and provide technical support. After some tuning, Diablo III was running almost flawlessly on my Gentoo machine :) Problem 1 solved. I will totally buy a license of Crossover, once my free year is over.&lt;/p&gt;
&lt;p&gt;I still add some applications to replace. I use iTunes as my main music player and library manager. Some time ago, I tried a lot of programs like Amarok/Rythmbox/Banshee, but I didn't liked them a lot and they were not running very well on large library of music files. This time, I tried &lt;a title="Clementine" href="http://www.clementine-player.org/"&gt;Clementine&lt;/a&gt;. Even if not very beautiful, it had all the features I needed and worked very well. I decided to stick with it. Another program I like a lot on Windows is TaggedFrog. It is a very simple program allowing to put tags on any file on the system and then search by tag on them. I haven't found a total equivalent. I first tried Tracker that is a Gnome project, but I was not satisfied with the search interface. After that, I tried the very simple &lt;a title="TMSU" href="http://tmsu.org/"&gt;TMSU&lt;/a&gt;. It is a command-line based tagging manager. All the tagging must be done in command line. In my case, it is not a problem, as I don't mind using the command-line and I don't tag files very often. What is very interesting about TMSU is that it can create a virtual file system (based on FUSE). In this file system, you have all your tags  as folder and you can see directly all the files of each tag. Moreover, you can directly make cross search (has tag X and Y and Z) by just going down in the tag folder. It is really great and has everything I needed. Finally, I also needed something to replace Newsleecher. I haven't found something as great (especially no replacement for the Supersearch function), but I installed &lt;a title="Sabnzbd" href="http://sabnzbd.org/"&gt;Sabnzbd&lt;/a&gt; which works really well and is very simple. For now, I just use the web interface and haven't installed any other front-end, but that will perhaps change in the future.&lt;/p&gt;
&lt;p&gt;I haven't replaced Office for now on. It occurred to me that since I left school, I haven't used it a lot, so that will probably not be a problem anymore. I will change to write the few letters I have to write on Latex and if I have Office documents, I'll probably read them on Google Drive.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Even if I lost a lot of time with all that, I think it is a great think. It makes one less configuration to maintain and some less costs on the future. Moreover, I will save some time, because I won't have to switch between Linux and Windows for different tasks. And now, I have a second SSD ready for something else, either for RAID 1 to ensure redundancy on Linux or to mount on a server, I'll see later.&lt;/p&gt;
&lt;p&gt;I will probably have some more problems in the future, but I'm convinced that there will be Linux solutions to it :)&lt;/p&gt;&lt;/div&gt;</description><category>Gentoo</category><category>Linux</category><category>Others</category><category>Personal</category><category>Windows</category><guid>http://wichtounet.github.io/posts/2013/07/why-how-left-windows-for-linux.html</guid><pubDate>Mon, 01 Jul 2013 06:24:25 GMT</pubDate></item><item><title>CMakeLatex 1.0.2 - Support for nomenclature and better filters</title><link>http://wichtounet.github.io/posts/2012/11/cmakelatex-1-0-2-nomenclature-filters.html</link><description>&lt;div&gt;&lt;p&gt;I released a new version of CMakeLatex, the version 1.0.2. &lt;/p&gt;
&lt;p&gt;First of all, this version restore the support for nomenclature. Then, it also adds filters for makeindex (including makeglossaries and makenomenclature). The filters will hides all the information of the output stream but the errors. The filters for pdflatex are also improved. &lt;/p&gt;
&lt;p&gt;CMakeLatex is a CMake script to build Latex documents using CMake / Make. It supports glossary, indexes, bibliographies and nomenclature. It can automatically converts your images to the right format using imagemagick or cairosvg (for SVG to PDF conversion). &lt;/p&gt;
&lt;p&gt;You can download it on Github: &lt;a href="https://github.com/wichtounet/CMakeLatex" title="CMakeLatex Github repository" target="_blank"&gt;CMakeLatex Github repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have any idea for improvement, don't hesitate to contact me or to create a Feature Request on Github.&lt;/p&gt;&lt;/div&gt;</description><category>cmake</category><category>Latex</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2012/11/cmakelatex-1-0-2-nomenclature-filters.html</guid><pubDate>Mon, 05 Nov 2012 08:02:19 GMT</pubDate></item><item><title>eddic compiles with CLang 3.1</title><link>http://wichtounet.github.io/posts/2012/11/eddic-compiles-with-clang-3-1.html</link><description>&lt;div&gt;&lt;p&gt;I finally added support for compiling eddic with LLVM CLang 3.1 !&lt;/p&gt;
&lt;p&gt;The current development version can be completely compiled with CLang. Starting with the version 1.1.4, all versions of eddic will be support GCC and CLang. &lt;/p&gt;
&lt;p&gt;The changes have not been as painful as I first thought. &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;The main problem that I has was about a static const variable of a class that had no user-constructor. GCC allows that, but it is not standard compliant and CLang was complaining. &lt;/li&gt;
    &lt;li&gt;Another problem that I encountered was about the used of bit flags and Template Meta Programming. I simplified that by the use of a simple type traits and it worked. I don't really know why this does not worked at first. &lt;/li&gt;
    &lt;li&gt;The remaining effort was to fix the several warnings that CLang had. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CLang also fixed a bug in my code with a warning on a assignment that was not supposed to be an assignment, thanks CLang. &lt;/p&gt;
&lt;p&gt;The most interesting fact about CLang is that &lt;strong&gt;is it twice faster to build eddic than GCC&lt;/strong&gt;. I think I'm gonna use it during development to fasten the compile time. Moreover, even if I only worked two days with it, it seems that the error messages are indeed better than the GCC's ones. &lt;/p&gt;
&lt;p&gt;I haven't tried to compare the performances of eddic in both cases, but I will do that in the future, soon after the 1.1.4 version is released. &lt;/p&gt;
&lt;p&gt;I tried the CLang static analyzer on eddic but it didn't found any bugs. Moreover, it crashed on several of my files. I didn't found why for now, but I will continue to investigate, perhaps I'm not using it correctly. &lt;/p&gt;
&lt;p&gt;I expect to publish the next version of eddic in the next two weeks. This version has much more improvements that I thought at first and I have less time to work now that &lt;a href="http://www.baptiste-wicht.com/2012/09/back-in-berkeley-california/" title="Back in Berkeley, California" target="_blank"&gt;I'm working on my Master thesis&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;More informations on CLang: &lt;a href="http://clang.llvm.org/" title="CLang official site"&gt;The official site&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>CLang</category><category>Compilers</category><category>EDDI</category><category>gcc</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2012/11/eddic-compiles-with-clang-3-1.html</guid><pubDate>Thu, 01 Nov 2012 08:11:05 GMT</pubDate></item><item><title>Linux symbolic links (soft) and hard links</title><link>http://wichtounet.github.io/posts/2012/09/linux-symbolic-links-hard-links.html</link><description>&lt;div&gt;&lt;p&gt;On Linux, it is possible to create &lt;strong&gt;links to existing file&lt;/strong&gt;. These links can be either &lt;strong&gt;symbolic links&lt;/strong&gt; or &lt;strong&gt;hard links&lt;/strong&gt;. Each of them having advantages and drawbacks. In this small post, we will see the differences between the two kinds of links and how to use them.&lt;/p&gt;
&lt;h3&gt;Hard Link&lt;/h3&gt;

&lt;p&gt;An hard link refers directly to the physical location of another file (an inode to be precise).&lt;/p&gt;
&lt;p&gt;A hard link has some limitations: it cannot refer to a directory and cannot cross file system boundaries. It means that you can only create hard links to the same file system where the hard link is located.&lt;/p&gt;
&lt;p&gt;When the source of the link is moved or removed, the hard link still refer to the source.&lt;/p&gt;
&lt;p&gt;Symbolic link are created with the &lt;strong&gt;ln&lt;/strong&gt; command. For instance, to create a link to source_file: &lt;/p&gt;
&lt;pre&gt;ln source_file link&lt;/pre&gt;

&lt;h3&gt;Symbolic Link&lt;/h3&gt;

&lt;p&gt;A symbolic link refers to a symbolic path indicating the location of the source file. You can see it as a link to a path (itself refering to an inode).&lt;/p&gt;
&lt;p&gt;A symbolic link is less limited. It can refer to a directory and can cross file system boundaries.&lt;/p&gt;
&lt;p&gt;However, when the source of the link is moved or removed, the symbolic link is not updated.&lt;/p&gt;
&lt;p&gt;Symbolic link are created with the &lt;strong&gt;ln&lt;/strong&gt; command. For instance, to create a symbolic link to source_file:&lt;/p&gt;
&lt;pre&gt;ln -s source_file link&lt;/pre&gt;

&lt;h3&gt;Deletion&lt;/h3&gt;

&lt;p&gt;The deletion of a link (hard or symbolic) can be achieved with the &lt;strong&gt;rm&lt;/strong&gt; or &lt;strong&gt;unlink&lt;/strong&gt; commands: &lt;/p&gt;
&lt;pre&gt;rm link
unlink link&lt;/pre&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;And that's it!&lt;/p&gt;
&lt;p&gt;Symbolic and hard links are very useful tools and are very easy to use. &lt;/p&gt;
&lt;p&gt;I hope that this blog post helped you understand a little better the differences between the two types of links and how to use them.&lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><guid>http://wichtounet.github.io/posts/2012/09/linux-symbolic-links-hard-links.html</guid><pubDate>Fri, 21 Sep 2012 07:16:37 GMT</pubDate></item><item><title>Memory Manager in 64bits Intel Assembly on Linux</title><link>http://wichtounet.github.io/posts/2012/08/memory-manager-intel-assembly-64-linux.html</link><description>&lt;div&gt;&lt;p&gt;For &lt;a title="EDDI Compiler 1.1.1 – Dynamic Memory Allocation and Constructors/Destructors" href="http://www.baptiste-wicht.com/2012/07/eddi-compiler-1-1-1-dynamic-memory-allocation-constructors-destructors/"&gt;the last version of the EDDI Compiler&lt;/a&gt;, it has been necessary to extend the dynamic memory allocator, to support free memory. In this post, we will see how to write a simple Memory Manager in Intel Assembly for Linux.&lt;/p&gt;
&lt;p&gt;In the past, we've seen &lt;a title="Dynamic memory allocation in Intel Assembly on Linux" href="http://www.baptiste-wicht.com/2011/11/dynamic-memory-allocation-intel-assembly-linux/"&gt;how to write a basic memory allocator&lt;/a&gt;, this time, we will write a more complete version.&lt;/p&gt;
&lt;p&gt;The implementation is made in 64bits Intel Assembly.&lt;/p&gt;
&lt;h4&gt;Memory Manager specification&lt;/h4&gt;

&lt;p&gt;The memory will be allocated by blocks. Each block will contain a header with two information:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;A boolean flag indicating if the block is free or not&lt;/li&gt;
    &lt;li&gt;The size of the block (including the header)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each time some memory is asked, the blocks are tested one by one until an available one is found. If no available block is found, a new block is allocated after the last one and this block is returned.&lt;/p&gt;
&lt;p&gt;The memory manager consists of three functions:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;memory_init: Init the memory manager&lt;/li&gt;
    &lt;li&gt;memory_alloc: Allocate the given number of bytes of memory&lt;/li&gt;
    &lt;li&gt;memory_free: Release the given block&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The parameter is passed in the &lt;strong&gt;r14&lt;/strong&gt; register. The return value is returned in the &lt;strong&gt;rax&lt;/strong&gt; register.&lt;/p&gt;
&lt;h4&gt;Global State&lt;/h4&gt;

&lt;p&gt;This implementation needs two global variables. One for the start address of memory and the other one for the last:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;section&lt;/span&gt; &lt;span class="nv"&gt;.data&lt;/span&gt;
&lt;span class="nf"&gt;mem_last&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;mem_start&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Init memory Manager&lt;/h4&gt;

&lt;p&gt;The init function is very simple to implement:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nl"&gt;init:&lt;/span&gt;
&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nb"&gt;rbp&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rsp&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;
&lt;span class="nf"&gt;syscall&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;mem_start&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;mem_last&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
&lt;span class="nf"&gt;leave&lt;/span&gt;
&lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We just have to call sys_brk in order to get the location of &lt;em&gt;program break&lt;/em&gt;. Then, the start and the last addresses are the same.&lt;/p&gt;
&lt;h4&gt;Free memory&lt;/h4&gt;

&lt;p&gt;The free function is the simplest one:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nl"&gt;free:&lt;/span&gt;
&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nb"&gt;rbp&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rsp&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r14&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nf"&gt;leave&lt;/span&gt;
&lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The address to free is passed in the &lt;strong&gt;r14&lt;/strong&gt; register. We have to go back 16 bytes (size of the control block) to go to the start of the block. The availability flag is set to 1 (the block is free).&lt;/p&gt;
&lt;h4&gt;The alloc function&lt;/h4&gt;

&lt;p&gt;The alloc function is the most complex:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nl"&gt;alloc:&lt;/span&gt;
&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nb"&gt;rbp&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rsp&lt;/span&gt;
&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;
&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;r10&lt;/span&gt;
&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;r11&lt;/span&gt;
&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;r12&lt;/span&gt;
&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;r13&lt;/span&gt;
&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;
&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;mem_start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;r13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;mem_last&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nl"&gt;.start:&lt;/span&gt;
&lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;r13&lt;/span&gt;
&lt;span class="nf"&gt;je&lt;/span&gt; &lt;span class="nv"&gt;.alloc&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;r10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;r11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="nv"&gt;r10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nf"&gt;jne&lt;/span&gt; &lt;span class="nv"&gt;.move&lt;/span&gt;
&lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="nv"&gt;r11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;
&lt;span class="nf"&gt;jl&lt;/span&gt; &lt;span class="nv"&gt;.move&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;r13&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;r12&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;r11&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;r10&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;
&lt;span class="nf"&gt;leave&lt;/span&gt;
&lt;span class="nf"&gt;ret&lt;/span&gt;

&lt;span class="nl"&gt;.move:&lt;/span&gt;
&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;r11&lt;/span&gt;
&lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="nv"&gt;.start&lt;/span&gt;

&lt;span class="nl"&gt;.alloc:&lt;/span&gt;
&lt;span class="nf"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="nf"&gt;syscall&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;mem_last&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;
&lt;span class="nf"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;r13&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;r12&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;r11&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;r10&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;
&lt;span class="nf"&gt;leave&lt;/span&gt;
&lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As the function is a bit complex, I will detail it in part:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;mem_start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;r13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;mem_last&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nl"&gt;.start:&lt;/span&gt;
&lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;r13&lt;/span&gt;
&lt;span class="nf"&gt;je&lt;/span&gt; &lt;span class="nv"&gt;.alloc&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;r10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;r11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="nv"&gt;r10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nf"&gt;jne&lt;/span&gt; &lt;span class="nv"&gt;.move&lt;/span&gt;
&lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="nv"&gt;r11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;
&lt;span class="nf"&gt;jl&lt;/span&gt; &lt;span class="nv"&gt;.move&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The necessary number of bytes is passed in the &lt;strong&gt;r14&lt;/strong&gt; register. We add 16 bytes (size of the control group) to the size as we also need some place for the header. Then, we load the start and last addresses. If both addresses are equal, we need to allocate more memory (detailed later). Then, we check the size and the availability of the current block. If the size is enough to fit the needs and the block is available, we set it to unavailable. We return the address past the control block (16 bytes).&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nl"&gt;.move:&lt;/span&gt;
&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;r11&lt;/span&gt;
&lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="nv"&gt;.start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To move to the next block, we just have to add the size of the current block to the current block address.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nl"&gt;.alloc:&lt;/span&gt;
&lt;span class="nf"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="nf"&gt;syscall&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;V_mem_last&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;qword&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;
&lt;span class="nf"&gt;lea&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To allocate memory, we compute the new &lt;em&gt;program break&lt;/em&gt; and call &lt;em&gt;sys_brk&lt;/em&gt; again to set the new &lt;em&gt;program break&lt;/em&gt;. The block is then set to not available and the size is set. We return the address past the control block (16 bytes).&lt;/p&gt;
&lt;p&gt;The rest of the program is just here to save and restore the registers and compute the stack frames.&lt;/p&gt;
&lt;h4&gt;Wrap-Up&lt;/h4&gt;

&lt;p&gt;In this article, we saw how to implement a very simple memory manager in 64bits Intel Assembly on Linux. This memory manager is very simple, but has several drawbacks:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;The overhead for small blocks is important. For example, allocating an 8 bytes integer needs a 24 bytes block, thrice the size of the int.&lt;/li&gt;
    &lt;li&gt;In the worst-case scenario, all of the process memory need to be walked across to find a new free block&lt;/li&gt;
    &lt;li&gt;The functions are not thread-safe&lt;/li&gt;
    &lt;li&gt;This algorithm can lead to a lot of memory fragmentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the future I will try to make a more powerful version of this memory manager.&lt;/p&gt;
&lt;h4&gt;Download&lt;/h4&gt;

&lt;p&gt;All the functions are available online on the Github Repository:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_64_alloc.s"&gt;alloc&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_64_free.s"&gt;free&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_64_init.s"&gt;init&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are also available in 32bits Intel Assembly:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_32_alloc.s"&gt;alloc&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_32_free.s"&gt;free&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/wichtounet/eddic/blob/develop/functions/x86_32_init.s"&gt;init&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>Assembly</category><category>Intel</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2012/08/memory-manager-intel-assembly-64-linux.html</guid><pubDate>Thu, 02 Aug 2012 06:05:30 GMT</pubDate></item><item><title>taskwarrior-php 0.1 : A simple PHP Frontend for Taskwarrior</title><link>http://wichtounet.github.io/posts/2012/07/taskwarrior-php-frontend-0-1.html</link><description>&lt;div&gt;&lt;p&gt;I released the version 0.1 of &lt;strong&gt;taskwarrior-php&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This project is a simple PHP Frontend for Taskwarrior. For now, the frontend is quite basic. All the tasks are displayed and sorted by projects. The completion of each project is also computed.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/?attachment_id=2035" rel="attachment wp-att-2035"&gt;&lt;img class="size-medium wp-image-2035" title="taskwarrior-php Screenshot" src="http://wichtounet.github.io/wp-content/uploads/2012/07/taskwarrior-php-1-300x271.png" alt="taskwarrior-php Screenshot" width="300" height="271"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also insert a new task. For now, only the project and the description of the task can be modified.&lt;/p&gt;
&lt;h3&gt;Download&lt;/h3&gt;

&lt;p&gt;The application is available on the Git repository : &lt;a href="https://github.com/wichtounet/taskwarrior-php"&gt;https://github.com/wichtounet/taskwarrior-php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The installation is simple, you just have to put all the files in a folder of a PHP server. Then, you have to edit the config.php to set the location of your Taskwarrior files.&lt;/p&gt;
&lt;p&gt;It is necessary that the Taskwarrior files are on the PHP server as well. For that, you can use the FTP pull and push commands of Taskwarrior.&lt;/p&gt;
&lt;p&gt;Don't hesitate to contact me if you have some ideas for this project or if you find some bugs.&lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>Releases</category><category>Tools</category><category>Web</category><guid>http://wichtounet.github.io/posts/2012/07/taskwarrior-php-frontend-0-1.html</guid><pubDate>Mon, 09 Jul 2012 07:21:14 GMT</pubDate></item><item><title>Compiler Architecture refinements for eddic</title><link>http://wichtounet.github.io/posts/2012/05/compiler-architecture-refinements-eddic.html</link><description>&lt;div&gt;&lt;p&gt;The next version of eddic will see an &lt;strong&gt;improved compiler architecture&lt;/strong&gt;. There are two new main changes in this version:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;A better separation between the front end and the back end&lt;/li&gt;
    &lt;li&gt;A new intermediate representation to improve and ease code generation&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Front end and Back End&lt;/h4&gt;

&lt;p&gt;First, the front and back ends have been clearly separated. The general compiler architecture is currently something like that:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/2012/05/compiler-architecture-refinements-eddic/general-architecture/" rel="attachment wp-att-1973"&gt;&lt;img class="aligncenter size-full wp-image-1973" title="EDDI Compiler General Architecture" src="http://wichtounet.github.io/wp-content/uploads/2012/05/general-architecture.svg" alt="EDDI Compiler General Architecture"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first part didn't change, but the Compiler was part was clearly separated between front and back ends:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/2012/05/compiler-architecture-refinements-eddic/compiler-architecture/" rel="attachment wp-att-1976"&gt;&lt;img class="aligncenter size-full wp-image-1976" title="EDDI Compiler Architecture" src="http://wichtounet.github.io/wp-content/uploads/2012/05/compiler-architecture.svg" alt="EDDI Compiler Architecture"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The backend has no information about the source language. It only sees the intermediate representation provided by the front-end, named: Medium-Level Three Address Code (MTAC).&lt;/p&gt;
&lt;p&gt;There are several advantages to this model. The main one is that it is easy to add support for a new programming language to the compiler. Only the front end needs to be changed. The same can be achieved if a new output is necessary, for example output ARM assembly instead of Intel assembly.&lt;/p&gt;
&lt;h4&gt;New intermediate representation&lt;/h4&gt;

&lt;p&gt;In the previous versions of the compiler, the code generators were fairly complex. Indeed, they had to transform the MTAC intermediate representation directly into assembly. This process involves several things:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;instruction selection&lt;/li&gt;
    &lt;li&gt;register allocation&lt;/li&gt;
    &lt;li&gt;low-level optimization (replace a  mov rax, 0 with xor rax, rax for example)&lt;/li&gt;
    &lt;li&gt;handle basic blocks management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this version, I decided to change it to a better architecture. This architecture uses a new intermediate representation: Low-Level Three Address Code (LTAC). As its name states, it is a low-level representation, close to assembly. In this  representation there are addresses, registers and abstracted instructions. This representation is platform independent (the differences between 32 and 64 bits are moved to the code generators). There are no more basic blocks here, only functions containing statements.&lt;/p&gt;
&lt;p&gt;The next figure presents the structure of the backend:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/2012/05/compiler-architecture-refinements-eddic/backend-architecture/" rel="attachment wp-att-1977"&gt;&lt;img class="aligncenter size-full wp-image-1977" title="EDDI Compiler Backend architecture" src="http://wichtounet.github.io/wp-content/uploads/2012/05/backend-architecture.svg" alt="EDDI Compiler Backend architecture"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The compiler is responsible for transforming the MTAC Representation in LTAC Representation. It does not do any low-level optimization. The instruction selection is easier as it is platform independent. The peephole optimizer is responsible for the low-levels optimizations. In the 1.0 release, there would be only few things done at this level. In the future, I will try to invest some time to complete it to generate better assembly code. The optimizations are far simpler than the one done in the MTAC optimization engine. Indeed, a peephole optimizer is generally working only in a small window of instructions, like three or four instructions at a time. And finally, the code generators performs the instruction selection process and address resolving. It also has to translate symbolic registers into physical ones.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;I hope that these refinements in the compiler architecture will allow the compiler to produce better code.&lt;/p&gt;
&lt;p&gt;The 1.0 version of the compiler will include another new features:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Basic support for custom structures&lt;/li&gt;
    &lt;li&gt;Global optimizations&lt;/li&gt;
    &lt;li&gt;Some bug fixes found with the new set of unit tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, feel free to comment on the new architecture, the compiler itself, the project or whatever&lt;/p&gt;&lt;/div&gt;</description><category>Assembly</category><category>Compilers</category><category>EDDI</category><category>Intel</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2012/05/compiler-architecture-refinements-eddic.html</guid><pubDate>Mon, 07 May 2012 07:34:30 GMT</pubDate></item><item><title>Install Valgrind on Gentoo Linux</title><link>http://wichtounet.github.io/posts/2012/04/install-valgrind-on-gentoo-linux.html</link><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Valgrind&lt;/strong&gt; is very powerful suite of software for dynamic analysis of binary programs. Valgrind is available in an ebuild on the Gentoo portage tree, but if you want to install valgrind on your Gentoo distribution, there is a problem with the build with the standard library. On Gentoo, the standard C library (glibc) is stripped and Valgrind needs the debug symbols to work. If you try to launch valgrind without the debug symbols, you will get the following error: &lt;/p&gt;
&lt;pre&gt;valgrind:  Fatal error at startup: a function redirection
valgrind:  which is mandatory for this platform-tool combination
valgrind:  cannot be set up.  Details of the redirection are:
valgrind:  
valgrind:  A must-be-redirected function
valgrind:  whose name matches the pattern:      strlen
valgrind:  in an object with soname matching:   ld-linux-x86-64.so.2
valgrind:  was not found whilst processing
valgrind:  symbols from the object with soname: ld-linux-x86-64.so.2
valgrind:  
valgrind:  Possible fixes: (1, short term): install glibc's debuginfo
valgrind:  package on this machine.  (2, longer term): ask the packagers
valgrind:  for your Linux distribution to please in future ship a non-
valgrind:  stripped ld.so (or whatever the dynamic linker .so is called)
valgrind:  that exports the above-named function using the standard
valgrind:  calling conventions for this platform.
valgrind:  
valgrind:  Cannot continue -- exiting now.  Sorry.&lt;/pre&gt;

&lt;p&gt;So first, you have to activate the debug symbols for the libraries in your &lt;em&gt;/etc/make.conf&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;FEATURES="splitdebug"&lt;/pre&gt;

&lt;p&gt;Then, you can emerge again the glibc: &lt;/p&gt;
&lt;pre&gt;sudo emerge glibc&lt;/pre&gt;

&lt;p&gt;If you already had emerged valgrind, there is no need to emerge it again, it should work now. &lt;/p&gt;
&lt;p&gt;And finally, you can emerge valgrind: &lt;/p&gt;
&lt;pre&gt;sudo emerge valgrind&lt;/pre&gt;

&lt;p&gt;And everything will work fine.&lt;/p&gt;&lt;/div&gt;</description><category>Gentoo</category><category>Linux</category><category>Tools</category><guid>http://wichtounet.github.io/posts/2012/04/install-valgrind-on-gentoo-linux.html</guid><pubDate>Fri, 13 Apr 2012 06:57:38 GMT</pubDate></item><item><title>Switching to Gentoo Linux</title><link>http://wichtounet.github.io/posts/2012/04/switching-gentoo-linux.html</link><description>&lt;div&gt;&lt;p&gt;After having switched to Mint from Ubuntu, I'm on the verge of switching to &lt;strong&gt;Gentoo Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Gentoo is a powerful operating system base on Linux. This operating system provides extreme configurability and performance. Gentoo is very lightweight on its own, by default, there is not even a window manager installed. A big advantage of this system is that you can customize your system to your exact needs. You can use it as a server, a desktop distribution or whatever you needs. You install only the program you needs. This advantage leads to an inconvenient: you will need an advanced knowledge on Linux to install your system. Indeed, you will have to configure your kernel, choose compilation flags, choose your packages carefully and know your hardware as well.&lt;/p&gt;
&lt;p&gt;Gentoo is based on a very powerful software distribution system, &lt;strong&gt;Portage&lt;/strong&gt;. Portage is used to install new packages, get the latest software for Gentoo or upgrade your system. Except for some proprietary software, all the packages are built from the sources. This allow to a deep customization of your software. The installation of some package can take a big amount of time to compile. Count at least several hours to install a system based on Gnome Shell for example.&lt;/p&gt;
&lt;p&gt;If you plan to install a full installation of Gentoo, reserve some days for that. I've spent several days working on my installation before getting to something fully working.&lt;/p&gt;
&lt;p&gt;Here is my current configuration:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Gentoo operating system&lt;/li&gt;
    &lt;li&gt;Linux Kernel 3.3&lt;/li&gt;
    &lt;li&gt;Gnome Shell 3.2.1&lt;/li&gt;
    &lt;li&gt;Google Chrome 18&lt;/li&gt;
    &lt;li&gt;NVidia Drivers 295.33&lt;/li&gt;
    &lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I've stripped my kernel and my init scripts to the maximum, my boot time is much faster and my installation takes much less space than my Mint installation.&lt;/p&gt;
&lt;p&gt;I said that I'm on the verge of switching because I still have some applications that are not installed on my new Gentoo distribution. For example, I have no multimedia support for now, but I already spent most of my time on my new distribution.&lt;/p&gt;
&lt;p&gt;I will try to write some posts on Gentoo in the future.&lt;/p&gt;&lt;/div&gt;</description><category>Gentoo</category><category>Linux</category><category>Mint</category><guid>http://wichtounet.github.io/posts/2012/04/switching-gentoo-linux.html</guid><pubDate>Tue, 10 Apr 2012 07:28:37 GMT</pubDate></item><item><title>Linux Kernel Tip : Do not disable System V IPC for X.Org and Chrome</title><link>http://wichtounet.github.io/posts/2012/04/linux-kernel-tip-do-not-disable-system-v-ipc-for-x-org-and-chrome.html</link><description>&lt;div&gt;&lt;p&gt;Yesterday I recompiled my Linux Kernel stripping it again and I found out that X.org was not working very anymore. Some windows were frozen and there was some troubles with the mouse. Another problem was that Google Chrome wouldn't display anything but blank pages. &lt;/p&gt;
&lt;p&gt;The solution was easy: Do not disable the &lt;strong&gt;System V IPC&lt;/strong&gt; option on the kernel.&lt;/p&gt;&lt;/div&gt;</description><category>Gentoo</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2012/04/linux-kernel-tip-do-not-disable-system-v-ipc-for-x-org-and-chrome.html</guid><pubDate>Sat, 07 Apr 2012 07:02:01 GMT</pubDate></item><item><title>Assembly Language Step By Step, Programming with Linux - Book Review</title><link>http://wichtounet.github.io/posts/2012/02/assembly-language-step-by-step-book-review.html</link><description>&lt;div&gt;&lt;p&gt;To improve my skills in Intel Assembly, I ordered and read &lt;strong&gt;Assembly Language Step by Step&lt;/strong&gt;, Programming with Linux, by Jeff Duntemann. Just for the record, I read it on my Amazon Kindle. &lt;/p&gt;
&lt;p&gt;This book is really made for &lt;strong&gt;very&lt;/strong&gt; beginners. The author uses a lot of metaphor to explain some concepts, comparing assembly to a game he explains in several pages... I didn't liked the writing style of this book. In my opinion, the author uses way too much metaphor and some things takes too many pages to be explained. Another problem of this book is the examples, there are covering tens of pages each. It is a good thing to have complete examples in a book, but having examples of more than 100 lines of code (not counting the comments) in a book is not really convenient (again, only in my opinion). &lt;/p&gt;
&lt;p&gt;Another lack of this book is that it covers only 32 bit programming. For a book written in 2009, it is quite limited. And finally, I found it bad to not cover floating point. I think that this is an important subject. &lt;/p&gt;
&lt;p&gt;Even if I'm not a fan of this book, most of the content is still interesting and you can learn the basis of assembler with it if you're patient with the writing style, the metaphors and the long examples. &lt;/p&gt;
&lt;p&gt;If you are a real beginner in assembly and in programming in general, this book can still be valuable for you. &lt;/p&gt;
&lt;p&gt;The first chapters are covering computer programming, processors, arithmetic in different bases and memory locations. Then, the following chapters are covering the tools (assembler, linker and visual tools for editing and debugging). After that, we are jumping in the heart of the subject by learning arithmetic computations, system calls and stack control. The bits instructions are covered in details in a whole chapter. Then, you will be introduced to the writing of functions and how to use string instructions to simplify your programs. The last (and very big) chapter is about using the functions of the C library to performs work like I/O operations, time calculations, print formatted text and generate random numbers. For this last I would have preferred to learn how to do all that operations using only assembly, but it is important to know how to call C functions. &lt;/p&gt;
&lt;p&gt;To conclude, I will advice this book only to people who learn assembly as their first programming language. For the others, there is a high risk of be deceived. &lt;/p&gt;
&lt;p&gt;Note that, if you want to follow the examples of this book, you'll certainly need the Insight Debugger. You can install this debugger by following the procedure described &lt;a href="http://www.baptiste-wicht.com/2012/01/install-insight-debugger-linux-mint-ubuntu/" title="Install the Insight Debugger on Linux Mint (works for Ubuntu too)"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Assembly</category><category>Intel</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2012/02/assembly-language-step-by-step-book-review.html</guid><pubDate>Fri, 17 Feb 2012 08:21:57 GMT</pubDate></item><item><title>Install the Insight Debugger on Linux Mint (works for Ubuntu too)</title><link>http://wichtounet.github.io/posts/2012/01/install-insight-debugger-linux-mint-ubuntu.html</link><description>&lt;div&gt;&lt;p&gt;Insight is a very good debugger based on gdb. I prefer it over ddd or kdbg as I find it clearer and easier to use. Moreover, this debugger is also the one used in the book &lt;strong&gt;Assembly language Step by Step, for Linux&lt;/strong&gt;. However, Insight has been removed from Debian packages already more than a year ago. &lt;/p&gt;
&lt;p&gt;But, thanks to SevenMachines, a PPA repository is available to install it on Linux Mint (works also on Ubuntu and Ubuntu-based Linux distributions). &lt;/p&gt;
&lt;p&gt;To add the repository to your apt sources, add the following lines to the /etc/apt/sources.list file:&lt;/p&gt;
&lt;pre&gt;deb http://ppa.launchpad.net/sevenmachines/dev/ubuntu natty main 
deb-src http://ppa.launchpad.net/sevenmachines/dev/ubuntu natty main &lt;/pre&gt;

&lt;p&gt;and update your apt sources: &lt;/p&gt;
&lt;pre&gt;sudo apt-get update&lt;/pre&gt;

&lt;p&gt;Then you can install insight: &lt;/p&gt;
&lt;pre&gt;sudo apt-get install insight&lt;/pre&gt;

&lt;p&gt;And now you are ready to use Insight as your debugger. &lt;/p&gt;
&lt;p&gt;If you don't trust this PPA repository, you can also try it to install it from the sources (http://sources.redhat.com/insight/), but doesn't seem to very simple to install it. I wasn't able to build it on my Linux Mint 12.&lt;/p&gt;&lt;/div&gt;</description><category>Assembly</category><category>C++</category><category>gcc</category><category>Linux</category><category>Mint</category><category>Tools</category><guid>http://wichtounet.github.io/posts/2012/01/install-insight-debugger-linux-mint-ubuntu.html</guid><pubDate>Thu, 26 Jan 2012 08:28:41 GMT</pubDate></item><item><title>Install Cinnamon in Linux Mint - A forked Gnome Shell</title><link>http://wichtounet.github.io/posts/2012/01/install-cinnamon-linux-mint.html</link><description>&lt;div&gt;&lt;p&gt;In the last Linux Mint version (12), the developers have introduced a set of extensions to the Gnome Shell, Mint Gnome Shell Extensions (MGSE).&lt;/p&gt;
&lt;p&gt;But, plugins can't do everything the developers want. So they forked Gnome Shell and started building their own shell : Cinnamon.&lt;/p&gt;
&lt;p&gt;At the time of writing, the appearance of this new shell is similar to MGSE in Linux Mint 12, but with some differences : only one status bar, the left bottom menu was changed, notification bar in the bottom bar, ...&lt;/p&gt;
&lt;p&gt;You can try it on your Linux Mint right now :&lt;/p&gt;
&lt;pre&gt;sudo apt-get update
sudo apt-get install cinnamon-session&lt;/pre&gt;

&lt;p&gt;Then, you have to logout and select Cinnamon in the Logon screen as the desktop environment. &lt;/p&gt;
&lt;p&gt;Personally, I still prefer MGSE, because I like having two bars, but that will perhaps change with some more tests on Cinnamon. And you, what do you think about Cinnamon ? Or about MGSE ? &lt;/p&gt;
&lt;p&gt;If you want more informations about this new shell, you can read &lt;a href="http://cinnamon.linuxmint.com/" title="Cinnamon Official Site" target="_blank"&gt;the official site&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>Mint</category><category>Releases</category><guid>http://wichtounet.github.io/posts/2012/01/install-cinnamon-linux-mint.html</guid><pubDate>Thu, 05 Jan 2012 07:11:19 GMT</pubDate></item><item><title>Dynamic memory allocation in Intel Assembly on Linux</title><link>http://wichtounet.github.io/posts/2011/11/dynamic-memory-allocation-intel-assembly-linux.html</link><description>&lt;div&gt;&lt;p&gt;For the version 0.6.0 of the EDDI Compiler, I have written a simple dynamic memory allocation function in assembly. I did that to avoid using malloc in my assembly code. As this is not an easy subject, this article will explain the main parts of writing this function.&lt;/p&gt;
&lt;p&gt;As the EDDI Compiler creates program for Linux platform, this article will focus on writing a little memory allocator for Linux in Intel Assembly.&lt;/p&gt;
&lt;p&gt;In this article I will follow the &lt;em&gt;AT&amp;amp;T notation&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Specifications&lt;/h4&gt;

&lt;p&gt;The function works like malloc but is simpler. The specifications are the following ones:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;We call the function with one argument: the dynamic memory size we need&lt;/li&gt;
    &lt;li&gt;The function returns the start address of the allocated memory in the &lt;strong&gt;%eax&lt;/strong&gt; register&lt;/li&gt;
    &lt;li&gt;There is no need to deallocate the allocated memory&lt;/li&gt;
    &lt;li&gt;The size that we ask will generally small and always less than 16384 octets&lt;/li&gt;
    &lt;li&gt;Having some gaps in the memory is not a problem for now&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So as you can see there are several limitations to this memory allocator. These limitations are the one I had for EDDI, so I'll follow them in this article.&lt;/p&gt;
&lt;h4&gt;Dynamic memory allocation&lt;/h4&gt;

&lt;p&gt;In Linux, there are two ways for performing dynamic memory allocation:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;brk&lt;/strong&gt;: Increment the size of the data segment after the end of the program. This memory is directly after the program and is always contiguous. It's the easiest way for allocating memory. This technique is not perfect for large blocks of data.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;mmap&lt;/strong&gt;: Creates a new memory mapping in the virtual address space. The kernel gives you memory in virtually every place of the memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our case, as we need only small blocks, we will use &lt;strong&gt;brk&lt;/strong&gt; to dynamically allocate memory.&lt;/p&gt;
&lt;p&gt;We can call these procedures using system calls. In assembly, you can use system calls with interruptions (0x80).&lt;/p&gt;
&lt;h4&gt;Implementation&lt;/h4&gt;

&lt;p&gt;We need two variables for this function. One to keep track of the remaining size and another one to keep track of the current address of the allocated memory.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="na"&gt;.data&lt;/span&gt;
&lt;span class="na"&gt;.size&lt;/span&gt; &lt;span class="no"&gt;VIeddi_remaining&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="nl"&gt;VIeddi_remaining:&lt;/span&gt;
&lt;span class="na"&gt;.long&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;.size&lt;/span&gt; &lt;span class="no"&gt;VIeddi_current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="nl"&gt;VIeddi_current:&lt;/span&gt;
&lt;span class="na"&gt;.long&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both variables are initialized to 0.&lt;/p&gt;
&lt;p&gt;And here is the function I've developed :&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nl"&gt;eddi_alloc:&lt;/span&gt;
&lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="nv"&gt;%ebp&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%esp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebp&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%ebp&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;VIeddi_remaining&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;cmpl&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;
&lt;span class="nf"&gt;jle&lt;/span&gt; &lt;span class="no"&gt;alloc_normal&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt;  &lt;span class="no"&gt;$0x80&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%esi&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;addl&lt;/span&gt; &lt;span class="no"&gt;$16384&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt;  &lt;span class="no"&gt;$0x80&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%esi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$16384&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;VIeddi_remaining&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%esi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;VIeddi_current&lt;/span&gt;

&lt;span class="nl"&gt;alloc_normal:&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;VIeddi_current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;VIeddi_current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;addl&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;VIeddi_current&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;VIeddi_remaining&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;subl&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;VIeddi_remaining&lt;/span&gt;
&lt;span class="nf"&gt;leave&lt;/span&gt;
&lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I will describe now each part of the alloc function.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%ebp&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;VIeddi_remaining&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;cmpl&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;
&lt;span class="nf"&gt;jle&lt;/span&gt; &lt;span class="no"&gt;alloc_normal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this part we test if there is enough remaining size for the dynamic memory allocation request. It's equivalent to &lt;em&gt;if(remaining &amp;gt;= size)&lt;/em&gt;. If there is enough size, we jump to the normal allocation part :&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nl"&gt;alloc_normal:&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;VIeddi_current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;VIeddi_current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;addl&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;VIeddi_current&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;VIeddi_remaining&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;subl&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;VIeddi_remaining&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, we move the current address of memory into the &lt;strong&gt;%eax&lt;/strong&gt; register for the return value. Then we add the size of the new allocated block to the current address. Finally we remove the size of the new allocated block from the remaining size. After that, we can leave the function.&lt;/p&gt;
&lt;p&gt;The most interesting part is what we do when we have to allocate more memory :&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt;  &lt;span class="no"&gt;$0x80&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%esi&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;addl&lt;/span&gt; &lt;span class="no"&gt;$16384&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt;  &lt;span class="no"&gt;$0x80&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$16384&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;VIeddi_remaining&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%esi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;VIeddi_current&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We start by doing an interruption to execute a system call. The &lt;strong&gt;45&lt;/strong&gt; in the &lt;strong&gt;%eax&lt;/strong&gt; register indicates a &lt;strong&gt;sys_brk&lt;/strong&gt; call. The 0 in the &lt;strong&gt;%ebx&lt;/strong&gt; register, indicates that we want the current position of brk space. We save this current position into the &lt;strong&gt;%esi&lt;/strong&gt; register. Then we add 16384 bits (4K octets) to this address. We call again the &lt;strong&gt;sys_brk&lt;/strong&gt; routine to set the address of the brk space to the calculated address. This is the way to dynamically allocates 4K of memory. Finally, we add 4K to the remaining size in octets and we put the current address (before the add) as the current address.&lt;/p&gt;
&lt;h4&gt;Possible improvements&lt;/h4&gt;

&lt;p&gt;We should make some optimization if this function has to be invoked frequently. The first interruption (call to sys_brk) has only to be done once. The very first time we need to get the start address. Then, we can use the current address as the base address when we do the new allocation.&lt;/p&gt;
&lt;p&gt;Another improvement is to avoid having gaps between the used blocks. For that, we can avoid setting the current address directly to the newly allocated address but just add 4K to the remaining size. The blocks will overlap 2 allocated blocks.&lt;/p&gt;
&lt;p&gt;We could also check that the value returned by the &lt;strong&gt;sys_brk&lt;/strong&gt; is valid. On error, the procedure can return -1.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;In this post, we developed a basic dynamic memory allocation function in Intel assembly on the Linux platform. I hope that this information can helps some of you.&lt;/p&gt;
&lt;p&gt;Don't hesitate if you have a question or a comment on my implementation.&lt;/p&gt;&lt;/div&gt;</description><category>Assembly</category><category>EDDI</category><category>Intel</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2011/11/dynamic-memory-allocation-intel-assembly-linux.html</guid><pubDate>Tue, 29 Nov 2011 08:16:26 GMT</pubDate></item><item><title>Linux Mint 12 (Lisa) released!</title><link>http://wichtounet.github.io/posts/2011/11/linux-mint-12-lisa-released.html</link><description>&lt;div&gt;&lt;p&gt;Linux Mint 12 has just been released!&lt;/p&gt;
&lt;p&gt;This new version includes a Gnome 3 using a specific extension MGSE (Mint Gnome Sheel Extensions) and a Gnome 2 UI (MATE). You will find also a lot of other improvements. &lt;/p&gt;
&lt;p&gt;From several months, Linux Mint is the most used Linux distribution. &lt;/p&gt;
&lt;p&gt;For more informations, you can read &lt;a href="http://blog.linuxmint.com/?p=1889" title="Linux Mint 12 “Lisa” released!" target="_blank"&gt;the official announcement&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>Releases</category><guid>http://wichtounet.github.io/posts/2011/11/linux-mint-12-lisa-released.html</guid><pubDate>Sat, 26 Nov 2011 06:08:45 GMT</pubDate></item><item><title>How to print strings and integers in Intel Assembly on Linux ?</title><link>http://wichtounet.github.io/posts/2011/11/print-strings-integers-intel-assembly.html</link><description>&lt;div&gt;&lt;p&gt;In this post, we'll learn how to print strings and integers to the console on Linux using Intel Assembly. In this post, I'll use the AT&amp;amp;T notation, because it's the notation used in EDDI. &lt;/p&gt;
&lt;p&gt;In EDDI, I have to print strings and numbers to the console, as this is not an easy exercise, I wanted to share my experience here. &lt;/p&gt;
&lt;p&gt;On Linux, the only way to print something on the console is to use a system call. For that, we have to use the 0x08 interrupt code. &lt;/p&gt;
&lt;h4&gt;Declare strings&lt;/h4&gt;

&lt;p&gt;First, we'll see how to declare strings in an Intel Assembly file. You can use the &lt;strong&gt;.string&lt;/strong&gt; instruction to achieve that : &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nl"&gt;StringToPrint:&lt;/span&gt;
&lt;span class="na"&gt;.string&lt;/span&gt; &lt;span class="s"&gt;"Hello"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Print strings&lt;/h4&gt;

&lt;p&gt;Then, to print, we will call the &lt;em&gt;sys_write&lt;/em&gt; system call : &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$StringToPrint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%edx&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The value in &lt;strong&gt;%eax&lt;/strong&gt; (4) indicates the system call we need (&lt;em&gt;sys_write&lt;/em&gt;). The 1 in &lt;strong&gt;%ebx&lt;/strong&gt; indicates that we want to write in the console. Finally the two last parameters indicates the string to print and the size of the string. In Intel assembly, the &lt;strong&gt;int&lt;/strong&gt; instruction launch an interrupt and the 0x80 in the interrupt table is set to the system call in the Linux Kernel. &lt;/p&gt;
&lt;p&gt;As you can see, this code does use 4 registers and does not save any of them. Ideally, you will save the registers before and restore them. It depends on when you use this routine. &lt;/p&gt;
&lt;h4&gt;Print integers&lt;/h4&gt;

&lt;p&gt;Writing an integer is a bit more complicated. If you have the integer in the string, there is no problem, but if you have only a long on your assembly, you'll have to convert the int into a string to print it. We will convert the integer char after char and use the stack as storage for our string. Then every char will be printed to the console using the same system as before. &lt;/p&gt;
&lt;p&gt;So let's say we have our number in the &lt;strong&gt;%eax&lt;/strong&gt; register : &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$9234&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So let's take a look at the code : &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%esi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%esi&lt;/span&gt;

&lt;span class="nl"&gt;loop:&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%edx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;divl&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;addl&lt;/span&gt; &lt;span class="no"&gt;$48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%edx&lt;/span&gt;
&lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="nv"&gt;%edx&lt;/span&gt;
&lt;span class="nf"&gt;incl&lt;/span&gt; &lt;span class="nv"&gt;%esi&lt;/span&gt;
&lt;span class="nf"&gt;cmpl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;jz&lt;/span&gt;   &lt;span class="no"&gt;next&lt;/span&gt;
&lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;loop&lt;/span&gt;

&lt;span class="nl"&gt;next:&lt;/span&gt;
&lt;span class="nf"&gt;cmpl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%esi&lt;/span&gt;
&lt;span class="nf"&gt;jz&lt;/span&gt;   &lt;span class="no"&gt;exit&lt;/span&gt;
&lt;span class="nf"&gt;decl&lt;/span&gt; &lt;span class="nv"&gt;%esi&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%esp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ebx&lt;/span&gt;
&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%edx&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt;  &lt;span class="no"&gt;$0x80&lt;/span&gt;
&lt;span class="nf"&gt;addl&lt;/span&gt; &lt;span class="no"&gt;$4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%esp&lt;/span&gt;
&lt;span class="nf"&gt;jmp&lt;/span&gt;  &lt;span class="no"&gt;next&lt;/span&gt;

&lt;span class="nl"&gt;exit:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first part of the code consists in dividing the value by 10 until we reach zero. The remainder of the division is pushed onto the stack. For example, for our number, after this part, we'll have 4-3-2-9 on the stack. The order is reversed, which is logic because we stack the remainders from the right. During this phase, we count the number of elements using the &lt;strong&gt;%esi&lt;/strong&gt; register. &lt;/p&gt;
&lt;p&gt;Once this is done, we print each characters one by one starting with the last that has been pushed. Here we decrement the counter for each char and we use the &lt;strong&gt;sys_write&lt;/strong&gt; call with &lt;strong&gt;%esp&lt;/strong&gt; as the address of the string of one character. After each character, we incremetn the &lt;strong&gt;%esp&lt;/strong&gt; to cancel the push that we used. &lt;/p&gt;
&lt;p&gt;We have to do this in two phases in order to get the characters in the good order and not in reverse order. &lt;/p&gt;
&lt;h4&gt;Handle negative numbers&lt;/h4&gt;

&lt;p&gt;As you may have noticed, we do not manage negative numbers in our code. They will be printed, but it will be positive number. Indeed, in Intel Assembly (and in processors in general), negative numbers are handled with two's complement. Handling negative numbers in our code is not a big deal. We can add this code at the beginning : &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nf"&gt;cmpl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;jge&lt;/span&gt; &lt;span class="no"&gt;loop&lt;/span&gt;
&lt;span class="nf"&gt;neg&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nf"&gt;Print&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; 
&lt;span class="no"&gt;popl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First of all, we check if the number is smaller than 0, if it's not the case, we directly jump to the code we used before. If it's smaller, we negate the number and print a - before printing the real number. We have to save the &lt;strong&gt;%eax&lt;/strong&gt; register before printing the - character because &lt;strong&gt;%eax&lt;/strong&gt; is used for printing. &lt;/p&gt;
&lt;p&gt;You'll now have a complete procedure to print an integer on the console in assembly. &lt;/p&gt;
&lt;p&gt;I hope that this could be of some help for somebody.&lt;/p&gt;&lt;/div&gt;</description><category>Assembly</category><category>EDDI</category><category>Intel</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2011/11/print-strings-integers-intel-assembly.html</guid><pubDate>Wed, 23 Nov 2011 08:11:59 GMT</pubDate></item><item><title>How to install git-flow on Linux</title><link>http://wichtounet.github.io/posts/2011/10/install-git-flow-linux.html</link><description>&lt;div&gt;&lt;p&gt;One week ago, I started using &lt;strong&gt;git-flow&lt;/strong&gt; on eddic. This is a collection of Git extensions to easily follow a branching-model convention for a Git project. I will try to describe this project later on this blog.&lt;/p&gt;
&lt;p&gt;You can install git-flow using this simple command:&lt;/p&gt;
&lt;pre&gt;wget --no-check-certificate -q -O - https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | sudo sh&lt;/pre&gt;

&lt;p&gt;I recommend you to install a script to autocomplete the git-flow commands and params: &lt;/p&gt;
&lt;pre&gt;mkdir -p ~/src/external &amp;amp;&amp;amp; cd ~/src/external
git clone https://github.com/bobthecow/git-flow-completion.git git-flow-completion
mkdir -p ~/bin/ &amp;amp;&amp;amp; cd ~/bin
ln -s ~/src/external/git-flow-completion/git-flow-completion.bash ./git-flow-completion.sh&lt;/pre&gt;

&lt;p&gt;Then add a simple command in your .bashrc file:&lt;/p&gt;
&lt;pre&gt;source ~/bin/git-flow-completion.sh&lt;/pre&gt;

&lt;p&gt;If you want an introduction of git-flow, I recommend you this blog post : &lt;a href="http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/" title="Why aren't you using git-flow ?"&gt;Why aren't you using git-flow ?&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>EDDI</category><category>Git</category><category>Linux</category><guid>http://wichtounet.github.io/posts/2011/10/install-git-flow-linux.html</guid><pubDate>Thu, 06 Oct 2011 05:10:24 GMT</pubDate></item><item><title>Diploma Thesis : Inlining Assistance for large-scale object-oriented applications</title><link>http://wichtounet.github.io/posts/2011/10/diploma-thesis-inlining-assistance-for-large-scale-object-oriented-applications.html</link><description>&lt;div&gt;&lt;p&gt;One month ago, my diploma thesis has been accepted and I got my Bachelor of Science in Computer Science.&lt;/p&gt;
&lt;p&gt;I made my diploma thesis at Lawrence Berkeley National Laboratory, Berkeley, California. I was in the team responsible of the developmenet of the ATLAS Software for the LHC in Cern. The title of my thesis is &lt;strong&gt;Inlining Assistance for large-scale object-oriented applications&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The goal of this project was to create a C++ analyzer to find the best functions and call sites to inline. The input of the analyzer is a call graph generated by CallGrind of the Valgrind project.&lt;/p&gt;
&lt;p&gt;The functions and call sites to inline are computed using a heuristic, called the temperature. This heuristic is based on the cost of calling the given function, the frequency of calls and the size of the function. The cost of calling a function is based on the number of parameters, the virtuality of the function and the shared object the function is located in.&lt;/p&gt;
&lt;p&gt;The analyzer is also able to find clusters of call sites. A cluster is a set of hot call sites related to each other. It can also finds the functions that should be moved from one library to the other or the function that should not be virtual by testing the use of each function in a class hierarchy.&lt;/p&gt;
&lt;p&gt;To achieve this project, it has been necessary to study in details how a function is called on the Linux platform. The inlining optimization has also been studied to know what were the advantages and the problems of this technique.&lt;/p&gt;
&lt;p&gt;To retrieve the information about the sizes and the virtuality of the function, it has been necessary to read the shared libraries and executables files. For that, we used &lt;em&gt;libelf&lt;/em&gt;. The virtuality of a function is calculated by reading each virtual table and searching for the function in the virtual tables content.&lt;/p&gt;
&lt;p&gt;The graph manipulation is made by the &lt;em&gt;Boost Graph Library&lt;/em&gt;. As it was an advanced library, it has helped me improving my skills in specific topics like templates, traits or Template Metaprogramming.&lt;/p&gt;
&lt;p&gt;The analyzer is able to run on the Linux platform on any program that has been compiled using gcc.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://wichtounet.github.io/posts/2011/10/diploma-thesis-inlining-assistance-for-large-scale-object-oriented-applications.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Boost</category><category>C++</category><category>Compilers</category><category>gcc</category><category>Linux</category><category>Optimization</category><category>Performances</category><category>Personal</category><guid>http://wichtounet.github.io/posts/2011/10/diploma-thesis-inlining-assistance-for-large-scale-object-oriented-applications.html</guid><pubDate>Mon, 03 Oct 2011 06:44:17 GMT</pubDate></item><item><title>How to profile C++ application with Callgrind / KCacheGrind</title><link>http://wichtounet.github.io/posts/2011/09/profile-c-application-with-callgrind-kcachegrind.html</link><description>&lt;div&gt;&lt;p&gt;I have shown before how to &lt;a title="Profile a C++ application with the Linux perf tools" href="http://www.baptiste-wicht.com/2011/07/profile-applications-linux-perf-tools/"&gt;profile a C++ application using the Linux perf tools&lt;/a&gt;.  In this post, we will see how to profile the same kind of application using Callgrind. Callgrind is a tool in part of the Valgrind toolchain. It is running in Valgrind framework. The principle is not the same. When you use Callgrind to profile an application, your application is transformed in an intermediate language and then ran in a virtual processor emulated by valgrind. This has a huge run-time overhead, but the precision is really good and your profiling data is complete. An application running in Callgrind can be 10 to 50 times slower than normally.&lt;/p&gt;
&lt;p&gt;The output of Callgrind is flat cal graph that is not really usable directly. In this post, we will use KCachegrind to display the informations about the profiling of the analyzed application.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://wichtounet.github.io/posts/2011/09/profile-c-application-with-callgrind-kcachegrind.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Linux</category><category>Performances</category><category>Tools</category><guid>http://wichtounet.github.io/posts/2011/09/profile-c-application-with-callgrind-kcachegrind.html</guid><pubDate>Thu, 01 Sep 2011 06:25:10 GMT</pubDate></item><item><title>How to compute metrics of C++ project using CCCC</title><link>http://wichtounet.github.io/posts/2011/08/compute-metrics-of-c-project-using-cccc.html</link><description>&lt;div&gt;&lt;p&gt;CCCC (C and C++ Code Counter) is a little command-line tool that generates metrics from the source code of a C or C++ project. The output of the tool is a simple HTML website with information about all your sources.&lt;/p&gt;
&lt;p&gt;CCCC generates not only information about the number of lines of codes for each of your modules, but also complexity metrics like the McCabe Cyclomatic Complexity level of your modules and functions, design metrics like the coupling between the modules or object oriented metrics like the depth of inheritance tree for each of your classes, ...&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://wichtounet.github.io/posts/2011/08/compute-metrics-of-c-project-using-cccc.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Linux</category><category>Tools</category><guid>http://wichtounet.github.io/posts/2011/08/compute-metrics-of-c-project-using-cccc.html</guid><pubDate>Tue, 02 Aug 2011 07:18:53 GMT</pubDate></item><item><title>How to profile your applications using the Linux perf tools</title><link>http://wichtounet.github.io/posts/2011/07/profile-applications-linux-perf-tools.html</link><description>&lt;div&gt;&lt;p&gt;When an application encounters some performance issues, we have to find the code that causes the problem to optimize only what really matters. &lt;/p&gt;
&lt;p&gt;To find the code we have to optimize, the profilers are really useful. In this post, we'll use the Linux perf tools to profile a simple C++ application. &lt;/p&gt;
&lt;p&gt;The perf tools are integrated in the Linux kernel since the 2.6 version. The perf tools are based on the perf events subsystem. The perf profiler uses hardware counters to profile the application. The result of this profiler are really precise and because it is not doing instrumentation  of the code, it is really fast. &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://wichtounet.github.io/posts/2011/07/profile-applications-linux-perf-tools.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Linux</category><category>Performances</category><category>Tools</category><guid>http://wichtounet.github.io/posts/2011/07/profile-applications-linux-perf-tools.html</guid><pubDate>Mon, 18 Jul 2011 07:30:45 GMT</pubDate></item></channel></rss>