<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog blog("Baptiste Wicht"); (Posts about Git)</title><link>http://baptiste-wicht.com/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://baptiste-wicht.com/categories/git.xml"></atom:link><language>en</language><lastBuildDate>Tue, 22 Aug 2017 20:52:02 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>pm 0.1.1 - A simple workspace manager for Git projects</title><link>http://baptiste-wicht.com/posts/2014/07/pm-011-a-simple-workspace-manager-for-git-projects.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;In the last month, I've developped a very simple tool in Python: &lt;em&gt;pm&lt;/em&gt;. This tool
allows to check the status of all the Git repositories inside a repository. I've
just released the first version of this tool: pm-0.1.1&lt;/p&gt;
&lt;p&gt;Those who are following this blog will perhaps wonder why Python and not C++ :)
The reason is quite simple, I wanted to improve my skills in Python. And what is
better than to develop a project from scratch.&lt;/p&gt;
&lt;div class="section" id="features"&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;p&gt;The main feature of this application is to show the status of every projects in
a directory. The status of your projects can be queried by using &lt;code&gt;pm
status&lt;/code&gt;. On my computer this gives something like that:&lt;/p&gt;
&lt;img alt="/images/pm_status.png" src="http://baptiste-wicht.com/images/pm_status.png"&gt;
&lt;p&gt;The state of each branch of each project is shown. There different possible
status (they are cumulative):
* Behind remote: Commits are available on the remote repository
* Ahead of remote: Some local commits are no pushed
* Diverged: Behind and Ahead
* Uncomitted changes: Some changes are not committed
* Clean: Indicates that everything is committed, pushed and pull.&lt;/p&gt;
&lt;p&gt;By default, the directory is ~/dev/ but you can change it by passing the
repository to the command, if you pass a relative directory, it will be relative
to home. For instance, here is the status of my doc repositories:&lt;/p&gt;
&lt;img alt="/images/pm_status_2.png" src="http://baptiste-wicht.com/images/pm_status_2.png"&gt;
&lt;p&gt;Another feature that can be useful is that it is able to check the status of
submodules with the -s option:&lt;/p&gt;
&lt;img alt="/images/pm_status_sm.png" src="http://baptiste-wicht.com/images/pm_status_sm.png"&gt;
&lt;p&gt;As you can see it supports recursive submodules. For each submodule it will
indicate if there are new commits available or not.&lt;/p&gt;
&lt;p&gt;pm is not only able to show status of the projects, it can also fetch the status
of branches from remote by using &lt;code&gt;pm fetch&lt;/code&gt;. All the remote branches are
fetched from remote. It can also automatically update the projects that are
behind remote (equivalent of git pull) with &lt;code&gt;pm update&lt;/code&gt;. Only projects
that can be fast-forwarded are updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;em&gt;pip&lt;/em&gt;, installation of pm is quite simple:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install pm
&lt;/pre&gt;
&lt;p&gt;If you don't want to use pip, you can install it by hand:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
wget https://github.com/wichtounet/pm/archive/0.1.1.tar.gz
tar xf 0.1.1.tar.gz
cd 0.1.1
python setup.py install
&lt;/pre&gt;
&lt;p&gt;For those interested, source code is available &lt;a class="reference external" href="https://github.com/wichtounet/pm"&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any suggestion for the tool or on the source code, post a comment to
this post ;)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Git</category><category>Linux</category><category>Python</category><category>Releases</category><guid>http://baptiste-wicht.com/posts/2014/07/pm-011-a-simple-workspace-manager-for-git-projects.html</guid><pubDate>Sun, 20 Jul 2014 18:52:18 GMT</pubDate></item><item><title>budgetwarrior 0.4 - Enhanced wish list and aggregate</title><link>http://baptiste-wicht.com/posts/2014/07/budgetwarrior-04-enhanced-wish-list-and-aggregate.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;I've just released a new version of my command-line budget manager:
budgetwarrior 0.4.&lt;/p&gt;
&lt;div class="section" id="enhanced-aggregate-overview"&gt;
&lt;h2&gt;Enhanced aggregate overview&lt;/h2&gt;
&lt;p&gt;The aggregate overviews have been greatly improved. First, there is now a
&lt;em&gt;budget overview month&lt;/em&gt; command that groups all expenses of amonth together.
Here is a possible output:&lt;/p&gt;
&lt;img alt="/images/budget_04_aggregate_month.png" src="http://baptiste-wicht.com/images/budget_04_aggregate_month.png"&gt;
&lt;p&gt;It also possible to use &lt;em&gt;--full&lt;/em&gt; option to also aggregate together the different
accounts:&lt;/p&gt;
&lt;img alt="/images/budget_04_aggregate_month_full.png" src="http://baptiste-wicht.com/images/budget_04_aggregate_month_full.png"&gt;
&lt;p&gt;Another new option is &lt;em&gt;--no-group&lt;/em&gt; that disables the grouping by categories:&lt;/p&gt;
&lt;img alt="/images/budget_04_aggregate_month_full_ng.png" src="http://baptiste-wicht.com/images/budget_04_aggregate_month_full_ng.png"&gt;
&lt;p&gt;Moreover, the separator of categories can now be configured with &lt;em&gt;--separator=&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;All these options can also be set in the configuration with these options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;aggregate_full : If set to true, does the same as the --full option.&lt;/li&gt;
&lt;li&gt;aggregate_no_group : If set to true, does the same as the --no-group option.&lt;/li&gt;
&lt;li&gt;aggregate_separator : Sets the separator for grouping.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="enhanced-wish-list"&gt;
&lt;h2&gt;Enhanced wish list&lt;/h2&gt;
&lt;p&gt;The wishes management has also been improved.&lt;/p&gt;
&lt;p&gt;First, each wish can now be set an Urgency and Importance level. This is now
shown in wish status as simple indicators:&lt;/p&gt;
&lt;img alt="/images/budget_04_wish_status.png" src="http://baptiste-wicht.com/images/budget_04_wish_status.png"&gt;
&lt;p&gt;Moreover, the accuracy of the estimation compared to the paid amount is shown in
&lt;em&gt;wish list&lt;/em&gt;:&lt;/p&gt;
&lt;img alt="/images/budget_04_wish_list.png" src="http://baptiste-wicht.com/images/budget_04_wish_list.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="various-changes"&gt;
&lt;h2&gt;Various changes&lt;/h2&gt;
&lt;p&gt;Objective status now shows more information about the status of the objectives:&lt;/p&gt;
&lt;img alt="/images/budget_04_objective_status.png" src="http://baptiste-wicht.com/images/budget_04_objective_status.png"&gt;
&lt;p&gt;The versioning module has been improved. The &lt;em&gt;versioning sync&lt;/em&gt; does now perform
a commmit as well as pull/push. &lt;em&gt;versioning push&lt;/em&gt;, &lt;em&gt;versioning pull&lt;/em&gt; and
&lt;em&gt;versioning status&lt;/em&gt; commands have been added.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;budget version&lt;/em&gt; command shows the version of budgetwarrior.&lt;/p&gt;
&lt;p&gt;Aliases a now available to make shorted commands:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;budget sync -&amp;gt; budget versioning sync&lt;/li&gt;
&lt;li&gt;budget aggregate -&amp;gt; budget overview aggregate&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;If you are on Gentoo, you can install it using layman:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
layman -a wichtounet
emerge -a budgetwarrior
&lt;/pre&gt;
&lt;p&gt;If you are on Arch Linux, you can use this &lt;a class="reference external" href="https://github.com/StreakyCobra/aur"&gt;AUR repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For other systems, you'll have to install from sources:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone git://github.com/wichtounet/budgetwarrior.git
cd budgetwarrior
make
sudo make install
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you are interested by the sources, you can download them on Github:
&lt;a class="reference external" href="https://github.com/wichtounet/budgetwarrior"&gt;budgetwarrior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have a suggestion or you found a bug, please post an issue on Github.&lt;/p&gt;
&lt;p&gt;If you have any comment, don't hesitate to contact me, either by letting a
comment on this post or by email.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>budgetwarrior</category><category>C++</category><category>Gentoo</category><category>Git</category><category>Linux</category><category>Releases</category><guid>http://baptiste-wicht.com/posts/2014/07/budgetwarrior-04-enhanced-wish-list-and-aggregate.html</guid><pubDate>Sun, 06 Jul 2014 08:59:55 GMT</pubDate></item><item><title>budgetwarrior 0.3.1 - Git versioning and easier creation</title><link>http://baptiste-wicht.com/posts/2014/05/budgetwarrior-031-git-versioning-easier-creation.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;I've finished a new version of budgetwarrior: budgetwarrior 0.3.1&lt;/p&gt;
&lt;h3&gt;Changes&lt;/h3&gt;
&lt;p&gt;The most interesting change is the ability to estimate the date when it is a good time to buy something from the wish list. This is done with the &lt;em&gt;budget wish estimate&lt;/em&gt; command: &lt;/p&gt;
&lt;p&gt;&lt;img alt="budget wish estimate" src="http://baptiste-wicht.com/images/budget_031_wish_estimate.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This command gives you two dates for each wish in your list. The first is the date wating for each yearly objectives to be fullfilled. The second one considers only the monthly objectives. For now on, no estimation of expenses is made for the future months. It means that the estimation is made as if there were no expenses in the future months. I'll try to improve that by considering averages of expenses in the previous months to make it more reliable. &lt;/p&gt;
&lt;p&gt;Still on the wish module, you can now mark your wishes as paid instead of deleting them. This helps you keep track of the prices of your wishes. This is done with the &lt;em&gt;budget wish paid id&lt;/em&gt; command. Finally, the totals of the unpaid wishes and of the paid wishes is displayed in &lt;em&gt;budget wish list&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Another helpful change is the ability to set a date relative to today's date when creating an expense or an earning. For instance, you can create an expense one month before (-1m) or in one year ((+1y) or yesterday (-1d): &lt;/p&gt;
&lt;p&gt;&lt;img alt="new date selection mechanism" src="http://baptiste-wicht.com/images/budget_031_date_selection.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Of course, you can also still set the date manually. &lt;/p&gt;
&lt;p&gt;The last major change is the addition of a new module: &lt;em&gt;budget versioning&lt;/em&gt;. This module helps you manipulate you budget directory with Git. There are two new commands: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;budget versioning save&lt;/em&gt;: Commit the current changes with a default message (Update). &lt;/li&gt;
&lt;li&gt;&lt;em&gt;budget versioning sync&lt;/em&gt;: Pull the changes from the remote directory and push the local changes. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will only works if you have already configured your budget directory to use Git. &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I hope you'll found these changes interesting :)&lt;/p&gt;
&lt;p&gt;If you are interested by the tool, you can download it on Github: &lt;a href="https://github.com/wichtounet/budgetwarrior"&gt;budgetwarrior&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have a suggestion or you found a bug, please post an issue on the github project: &lt;a href="https://github.com/wichtounet/budgetwarrior"&gt;https://github.com/wichtounet/budgetwarrior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any comment, don't hesitate to contact me, either by letting a comment on this post or by email.&lt;/p&gt;&lt;/div&gt;</description><category>budgetwarrior</category><category>C++</category><category>Git</category><category>Linux</category><category>projects</category><guid>http://baptiste-wicht.com/posts/2014/05/budgetwarrior-031-git-versioning-easier-creation.html</guid><pubDate>Sat, 10 May 2014 14:45:43 GMT</pubDate></item><item><title>EDDIC 0.5 : Functions and foreach</title><link>http://baptiste-wicht.com/posts/2011/10/eddic-0-5-functions-foreach.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm pleased to release the version 0.5. of the EDDI Compiler.&lt;/p&gt;
&lt;p&gt;This new version introduced the first version of function calls. The function can take several parameters but cannot return anything at this moment. A version of foreach loop is now available in the language.&lt;/p&gt;
&lt;p&gt;You can also declare variables globally in the source code. The global variables are stored in the .data section of the ELF file and the local variables are stored on the stack.&lt;/p&gt;
&lt;p&gt;The error reporting of the compiler has been improved. Indeed, now the syntactical errors are reported with the exact location of the source.&lt;/p&gt;
&lt;p&gt;There are also a lot of improvements in the source code. The big header files have been splitted into several files. I replaced all the pointers by smart pointers that allowed me to remove all the memory leaks of the applications and to simplify the memory management. Finally, I started using some new features of C++11 to improve the source code of the application.&lt;/p&gt;
&lt;p&gt;The next version will certainly see return types for functions and perhaps a first version of switch case. Moreover, I have a lot of improvements to do at the assembly level. Indeed, the generated assembly is not efficient at all. Perhaps, I will consider adding arrays too to this version.&lt;/p&gt;
&lt;p&gt;You can find the compiler on the Github repository : &lt;a title="EDDI COmpiler Repository" href="http://github.com/wichtounet/eddic"&gt;https://github.com/wichtounet/eddic&lt;/a&gt;. If you watch the repository, you'll see that I followed a new branching model, the one proposed and enforced by the git-flow tool.&lt;/p&gt;
&lt;p&gt;The exact version I refer to is the v0.5 available in the github tags.&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>C++11</category><category>EDDI</category><category>Git</category><category>Releases</category><guid>http://baptiste-wicht.com/posts/2011/10/eddic-0-5-functions-foreach.html</guid><pubDate>Mon, 10 Oct 2011 00:38:50 GMT</pubDate></item><item><title>How to install git-flow on Linux</title><link>http://baptiste-wicht.com/posts/2011/10/install-git-flow-linux.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;One week ago, I started using &lt;strong&gt;git-flow&lt;/strong&gt; on eddic. This is a collection of Git extensions to easily follow a branching-model convention for a Git project. I will try to describe this project later on this blog.&lt;/p&gt;
&lt;p&gt;You can install git-flow using this simple command:&lt;/p&gt;
&lt;pre&gt;wget --no-check-certificate -q -O - https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | sudo sh&lt;/pre&gt;

&lt;p&gt;I recommend you to install a script to autocomplete the git-flow commands and params:&lt;/p&gt;
&lt;pre&gt;mkdir -p ~/src/external &amp;amp;&amp;amp; cd ~/src/external
git clone https://github.com/bobthecow/git-flow-completion.git git-flow-completion
mkdir -p ~/bin/ &amp;amp;&amp;amp; cd ~/bin
ln -s ~/src/external/git-flow-completion/git-flow-completion.bash ./git-flow-completion.bash&lt;/pre&gt;

&lt;p&gt;Then add a simple command in your .bashrc file:&lt;/p&gt;
&lt;pre&gt;source ~/bin/git-flow-completion.bash&lt;/pre&gt;

&lt;p&gt;If you want an introduction of git-flow, I recommend you this blog post : &lt;a href="http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/" title="Why aren't you using git-flow ?"&gt;Why aren't you using git-flow ?&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>EDDI</category><category>Git</category><category>Linux</category><guid>http://baptiste-wicht.com/posts/2011/10/install-git-flow-linux.html</guid><pubDate>Thu, 06 Oct 2011 05:10:24 GMT</pubDate></item><item><title>Git Tip : Restore a deleted tag</title><link>http://baptiste-wicht.com/posts/2011/06/git-tip-restore-a-deleted-tag.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;A little tip that can be very useful, how to restore a deleted Git tag. &lt;/p&gt;
&lt;p&gt;If you juste deleted a tag by error, you can easily restore it following these steps. First, use&lt;/p&gt;
&lt;pre&gt;git fsck --unreachable | grep tag&lt;/pre&gt;

&lt;p&gt;then, you will see the unreachable tag. If you have several tags on the list, use &lt;/p&gt;
&lt;pre&gt;git show KEY&lt;/pre&gt;

&lt;p&gt;to found the good tag and finally, when you know which tag to restore, use&lt;/p&gt;
&lt;pre&gt;git update-ref refs/tags/NAME KEY&lt;/pre&gt;

&lt;p&gt;and the previously deleted tag with restore with NAME. &lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://git.661346.n2.nabble.com/template/NamlServlet.jtp?macro=user_nodes&amp;amp;user=177109"&gt;Shawn Pearce&lt;/a&gt; for the tip.&lt;/p&gt;&lt;/div&gt;</description><category>Git</category><category>Others</category><category>Tips</category><guid>http://baptiste-wicht.com/posts/2011/06/git-tip-restore-a-deleted-tag.html</guid><pubDate>Wed, 15 Jun 2011 17:18:13 GMT</pubDate></item><item><title>My Java Benchmarks on GitHub</title><link>http://baptiste-wicht.com/posts/2010/09/my-java-benchmarks-on-github.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;I've created a new github repository for my &lt;strong&gt;Java Benchmarks&lt;/strong&gt; : &lt;a title="java-benchmarks github repository" href="http://github.com/wichtounet/java-benchmarks" target="_blank"&gt;java-benchmarks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From now all my benchmarks will be pushed to this repository. This is more simple for me to manage and more secure also.&lt;/p&gt;
&lt;p&gt;At this time, there is seven benchmarks on the repository :&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Closest Pair Search Benchmark : A benchmark to test two closest pair point search algorithms : the naive one and the &lt;strong&gt;sweeping plane&lt;/strong&gt; one. &lt;a title="Closest Pair Search Benchmark Results" href="http://www.baptiste-wicht.com/2010/04/closest-pair-of-point-plane-sweep-algorithm/" target="_blank"&gt;Results&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;File Copy Benchmark : A benchmark on the different ways to make &lt;strong&gt;file copy&lt;/strong&gt; in Java. &lt;a title="Java File Copy Benchmark Results" href="http://www.baptiste-wicht.com/2010/08/file-copy-in-java-benchmark/" target="_blank"&gt;Results&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Iteration Remove Benchmark : A simple benchmark to test if it's interesting to remove the read elements from a list when we make several iterations over the list.&lt;/li&gt;
    &lt;li&gt;Reflection Benchmark : A little benchmark to test the performances of &lt;strong&gt;reflection&lt;/strong&gt; versus switch cases and direct invocations.&lt;/li&gt;
    &lt;li&gt;Short Indexes Loop Benchmark : A benchmark to test which &lt;strong&gt;primitive type&lt;/strong&gt; is the most performing using as iteration index. &lt;a title="Short Indexes Loop Benchmark Results" href="http://www.baptiste-wicht.com/2010/01/dont-use-shorts-in-loop/" target="_blank"&gt;Results&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Synchronization Benchmark : A benchmark to test the performances of the different &lt;strong&gt;synchronization mechanisms&lt;/strong&gt; available in Java to provide mutual exclusion. &lt;a title="Synchronization Benchmark Results" href="http://www.baptiste-wicht.com/2010/09/java-synchronization-mutual-exclusion-benchmark/" target="_blank"&gt;Results&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Unmodifiable Benchmark : A benchmark to test the performances of &lt;strong&gt;unmodifiable collection&lt;/strong&gt; versus creating a copy of the list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope you'll find these sources interesting. If you found errors or improvements, don't hesitate to comment to tell me what.&lt;/p&gt;&lt;/div&gt;</description><category>Benchmarks</category><category>Git</category><category>Java</category><category>Performances</category><guid>http://baptiste-wicht.com/posts/2010/09/my-java-benchmarks-on-github.html</guid><pubDate>Fri, 03 Sep 2010 05:16:20 GMT</pubDate></item><item><title>Version Control with Git – Book Review</title><link>http://baptiste-wicht.com/posts/2010/07/version-control-with-git-book-review.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;After I had chosen to switch to Git, I thought the time has become to read a complete book on the subject to understand the concepts of Git from the base to further level.&lt;/p&gt;
&lt;p&gt;So I chose "Version control with Git", from Jon Loeliger&lt;/p&gt;
&lt;p&gt;I just finished to read it, so I will try to give my impressions about this book on this post.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://baptiste-wicht.com/wp-content/uploads/2010/07/oreilly_git.jpeg"&gt;&lt;img class="size-full wp-image-711" title="Version control with Git" src="http://baptiste-wicht.com/wp-content/uploads/2010/07/oreilly_git.jpeg" alt="Version control with Git" width="300" height="300"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/07/version-control-with-git-book-review.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Books</category><category>Git</category><category>Programming</category><guid>http://baptiste-wicht.com/posts/2010/07/version-control-with-git-book-review.html</guid><pubDate>Mon, 12 Jul 2010 04:56:53 GMT</pubDate></item><item><title>Tip : How to solve “agent admitted failure to sign using the key” error ?</title><link>http://baptiste-wicht.com/posts/2010/07/tip-how-to-solve-agent-admitted-failure-to-sign-using-the-key-error.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;A very simple tip that can save a lot of time. &lt;/p&gt;
&lt;p&gt;When i wanted to do a git clone, I had the given error : &lt;/p&gt;
&lt;pre&gt;Agent admitted failure to sign using the key.
Permission denied (publickey).&lt;/pre&gt;

&lt;p&gt;I found that this is an SSH error. &lt;/p&gt;
&lt;p&gt;One of the readers, Leonardo Hessel, pointed that out that ssh-add is also a solution: &lt;/p&gt;
&lt;pre&gt;ssh-add&lt;/pre&gt;

&lt;p&gt;Another solution is simply to login and logout and it should work.&lt;/p&gt;&lt;/div&gt;</description><category>Git</category><category>Linux</category><category>Tips</category><guid>http://baptiste-wicht.com/posts/2010/07/tip-how-to-solve-agent-admitted-failure-to-sign-using-the-key-error.html</guid><pubDate>Sun, 04 Jul 2010 14:59:41 GMT</pubDate></item><item><title>JTheque is migrating to Git</title><link>http://baptiste-wicht.com/posts/2010/06/jtheque-is-migrating-to-git.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;div&gt;&lt;p&gt;Some informations about the current state of JTheque. I'm currently migrating it from SVN to Git. Actually the projet is hosted at Developpez.com, a french community. For more visibility, i wanted to host it in an english website. After several days of comparative, I chosen Github has host. Because i chose Git, i think it's the best and easier community to share projects using Git.&lt;/p&gt;
&lt;p&gt;I will use a subdomain in this website (jtheque.baptiste-wicht.com) to host the Javadoc and maven reports, because it take too space to store it at GitHub. I will use GitHub for the sources, issues and Wiki.&lt;/p&gt;
&lt;p&gt;After only several days of work with Git, I found it really fun and comfortable to work with.&lt;/p&gt;
&lt;p&gt;Here are the already created projects on GitHub :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-utils" target="_blank"&gt;jtheque-utils&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-unit-utils" target="_blank"&gt;jtheque-unit-utils&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-xml-utils" target="_blank"&gt;jtheque-xml-utils&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-core" target="_blank"&gt;jtheque-core&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-primary-utils" target="_blank"&gt;jtheque-primary-utils&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-movies-module" target="_blank"&gt;jtheque-movies-module&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-memory-module" target="_blank"&gt;jtheque-memory-module&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://github.com/wichtounet/jtheque-osgi-wrap" target="_blank"&gt;jtheque-osgi-wrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of them are not completed at all. But the start is here. Don't hesitate to comment on how I did that. I've also already created a site for jtheque-xml-utils (&lt;a href="http://jtheque.baptiste-wicht.com/xml-utils/"&gt;http://jtheque.baptiste-wicht.com/xml-utils/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I will migrate all the projects into Git and complete the GitHub repositories and Maven Site the next few weeks.&lt;/p&gt;
&lt;p&gt;If I didn't post a lot these last weeks, it's because, it's the end of the semester, so it seems a lot of exams and projects to finish, so not a lot of time to post. I will do better the next month.&lt;/p&gt;&lt;/div&gt;</description><category>Git</category><category>Java</category><category>JTheque</category><guid>http://baptiste-wicht.com/posts/2010/06/jtheque-is-migrating-to-git.html</guid><pubDate>Tue, 15 Jun 2010 14:40:56 GMT</pubDate></item></channel></rss>