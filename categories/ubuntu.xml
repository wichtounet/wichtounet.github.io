<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>@Blog("Baptiste Wicht") (Ubuntu)</title><link>http://www.baptiste-wicht.com/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://www.baptiste-wicht.com/categories/ubuntu.xml"></atom:link><language>en</language><lastBuildDate>Sun, 16 Mar 2014 18:49:41 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Install the Insight Debugger on Linux Mint (works for Ubuntu too)</title><link>http://www.baptiste-wicht.com/posts/2012/01/install-insight-debugger-linux-mint-ubuntu.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Insight is a very good debugger based on gdb. I prefer it over ddd or kdbg as I find it clearer and easier to use. Moreover, this debugger is also the one used in the book &lt;strong&gt;Assembly language Step by Step, for Linux&lt;/strong&gt;. However, Insight has been removed from Debian packages already more than a year ago. &lt;/p&gt;
&lt;p&gt;But, thanks to SevenMachines, a PPA repository is available to install it on Linux Mint (works also on Ubuntu and Ubuntu-based Linux distributions). &lt;/p&gt;
&lt;p&gt;To add the repository to your apt sources, add the following lines to the /etc/apt/sources.list file:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;deb http://ppa.launchpad.net/sevenmachines/dev/ubuntu natty main 
&lt;p&gt;deb-src http://ppa.launchpad.net/sevenmachines/dev/ubuntu natty main &lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;and update your apt sources: &lt;/p&gt;
&lt;p&gt;[bash]sudo apt-get update[/bash]&lt;/p&gt;
&lt;p&gt;Then you can install insight: &lt;/p&gt;
&lt;p&gt;[bash]sudo apt-get install insight[/bash]&lt;/p&gt;
&lt;p&gt;And now you are ready to use Insight as your debugger. &lt;/p&gt;
&lt;p&gt;If you don't trust this PPA repository, you can also try it to install it from the sources (http://sources.redhat.com/insight/), but doesn't seem to very simple to install it. I wasn't able to build it on my Linux Mint 12. &lt;/p&gt;&lt;/div&gt;</description><category>Assembly</category><category>Assembly</category><category>C++</category><category>gcc</category><category>Linux</category><category>Mint</category><category>Tools</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2012/01/install-insight-debugger-linux-mint-ubuntu.html</guid><pubDate>Thu, 26 Jan 2012 09:28:41 GMT</pubDate></item><item><title>How to profile C++ application with Callgrind / KCacheGrind</title><link>http://www.baptiste-wicht.com/posts/2011/09/profile-c-application-with-callgrind-kcachegrind.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I have shown before how to &lt;a title="Profile a C++ application with the Linux perf tools" href="http://www.baptiste-wicht.com/2011/07/profile-applications-linux-perf-tools/"&gt;profile a C++ application using the Linux perf tools&lt;/a&gt;.  In this post, we will see how to profile the same kind of application using Callgrind. Callgrind is a tool in part of the Valgrind toolchain. It is running in Valgrind framework. The principle is not the same. When you use Callgrind to profile an application, your application is transformed in an intermediate language and then ran in a virtual processor emulated by valgrind. This has a huge run-time overhead, but the precision is really good and your profiling data is complete. An application running in Callgrind can be 10 to 50 times slower than normally.&lt;/p&gt;
&lt;p&gt;The output of Callgrind is flat cal graph that is not really usable directly. In this post, we will use KCachegrind to display the informations about the profiling of the analyzed application.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;First of all, you need to install Callgrind and KCachegrind. You also need to install graphviz in order to view the call graph in KCachegrind. The applications are already packaged for the most important Linux distributions. You can just use apt-get to install them:&lt;/p&gt;
&lt;p&gt;[bash]sudo apt-get install valgrind kcachegrind graphviz[/bash]&lt;/p&gt;
&lt;p&gt;or aptitude:&lt;/p&gt;
&lt;p&gt;[bash]sudo aptitude install valgrind kcachegrind graphviz[/bash]&lt;/p&gt;
&lt;p&gt;or whatever your favourite package manager is.&lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;

&lt;p&gt;We have to start by profiling the application with Callgrind. To profile an application with Callgrind, you just have to prepend the Callgrind invocation in front of your normal program invocation:&lt;/p&gt;
&lt;p&gt;[bash]valgrind --tool=callgrind program [program_options][/bash]&lt;/p&gt;
&lt;p&gt;The result will be stored in a callgrind.out.XXX file where XXX will be the process identifier. &lt;/p&gt;
&lt;p&gt;You can read this file using a text editor, but it won't be very useful because it's very cryptic. That's here that KCacheGrind will be useful. You can launch KCacheGrind using command line or in the program menu if your system installed it here. Then, you have to open your profile file. &lt;/p&gt;
&lt;p&gt;The first view present a list of all the profiled functions. You can see the inclusive and the self cost of each function and the location of each one. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/first-view2.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/first-view2-300x212.png" alt="" title="List of functions" width="300" height="212" class="size-medium wp-image-1322"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you click on a function, the other views are filled with information. The view in uppper right part of the window gives some information about the selected function. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/second-view.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/second-view-300x166.png" alt="Information about the function" title="Information about the function" width="300" height="166" class="size-medium wp-image-1323"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The view have several tabs presenting different information: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Types : Present the types of events that have been recorded. In our case, it's not really interesting, it's just the number of instructions fetch&lt;/li&gt;
    &lt;li&gt;Callers : List of the direct callers&lt;/li&gt;
    &lt;li&gt;All Callers : List of all the callers, it seems the callers and the callers of the callers&lt;/li&gt;
    &lt;li&gt;Callee Map : A map of the callee, personally, I do not really understand this view, but it's a kind of call graph representing the cost of the functions&lt;/li&gt;
    &lt;li&gt;Source code : The source code of the function if the application has been compiled with the debug symbol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, you have another view with data about the selected function. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/third-view.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/third-view-300x208.png" alt="Information about the function" title="Information about the function" width="300" height="208" class="size-medium wp-image-1324"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Again, several tabs: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Callees : The direct callees of the function&lt;/li&gt;
    &lt;li&gt;Call Graph : The call graph from the function to the end&lt;/li&gt;
    &lt;li&gt;All Callees : All the callees and the callees of the callees&lt;/li&gt;
    &lt;li&gt;Caller Map : The map of the caller, again not really understandable for me&lt;/li&gt;
    &lt;li&gt;Machine Code : The machine code of the function if the application has been profiled with --dump-instr=yes option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have also several display options and filter features to find exactly what you want and display it the way you want. &lt;/p&gt;
&lt;p&gt;The information provided by KCacheGrind can be very useful to find which functions takes too much time or which functions are called too much. &lt;/p&gt;
&lt;p&gt;I hope this article will be useful. &lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>C++</category><category>Linux</category><category>Performances</category><category>Tools</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2011/09/profile-c-application-with-callgrind-kcachegrind.html</guid><pubDate>Thu, 01 Sep 2011 08:25:10 GMT</pubDate></item><item><title>How to compute metrics of C++ project using CCCC</title><link>http://www.baptiste-wicht.com/posts/2011/08/compute-metrics-of-c-project-using-cccc.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CCCC (C and C++ Code Counter) is a little command-line tool that generates metrics from the source code of a C or C++ project. The output of the tool is a simple HTML website with information about all your sources.&lt;/p&gt;
&lt;p&gt;CCCC generates not only information about the number of lines of codes for each of your modules, but also complexity metrics like the McCabe Cyclomatic Complexity level of your modules and functions, design metrics like the coupling between the modules or object oriented metrics like the depth of inheritance tree for each of your classes, ...&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;On some Linux systems, cccc is already packaged, so you just have to use your favourite package manager to install it. On Ubuntu, I used :&lt;/p&gt;
&lt;p&gt;[bash]sudo apt-get install cccc[/bash]&lt;/p&gt;
&lt;p&gt;to install it. If the tool is not packaged for your system, you can download it &lt;a title="CCCC SourceForge page" href="http://sourceforge.net/projects/cccc/" target="_blank"&gt;here&lt;/a&gt;. Then, you have run the build script :&lt;/p&gt;
&lt;p&gt;[bash]sh build_posixgcc.sh[/bash]&lt;/p&gt;
&lt;p&gt;and you will find a &lt;em&gt;cccc&lt;/em&gt; executable in the &lt;em&gt;cccc&lt;/em&gt; folder. You can just put the executable in your path or use it using the absolute path. &lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;

&lt;p&gt;The usage of the tool is really easy. You just have to invoke it passing all the sources files you want to parse as arguments. For example: &lt;/p&gt;
&lt;p&gt;[bash]cccc src/&lt;em&gt;.cpp include/&lt;/em&gt;.hpp[/bash]&lt;/p&gt;
&lt;p&gt;And the site will be generated in a &lt;em&gt;.cccc&lt;/em&gt; folder in the current folder. You can also specify the output directory using the &lt;em&gt;--outdir=folder&lt;/em&gt; option. &lt;/p&gt;
&lt;p&gt;The main entry of the HTML generated website is the &lt;em&gt;cccc.html&lt;/em&gt; file. As an example, I uploaded the metrics of the compiler of the EDDI language &lt;a href="http://baptiste-wicht.com/cccc/eddic/cccc.html" title="Metrics for the EDDI Compiler" target="_blank"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;You can find more information about the tool on the official website : &lt;a href="http://cccc.sourceforge.net/" title="Official website of the CCCC project" target="_blank"&gt;http://cccc.sourceforge.net/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>C++</category><category>Linux</category><category>Tools</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2011/08/compute-metrics-of-c-project-using-cccc.html</guid><pubDate>Tue, 02 Aug 2011 09:18:53 GMT</pubDate></item><item><title>How to install a specific version of GCC on Ubuntu 11.04 (natty)</title><link>http://www.baptiste-wicht.com/posts/2011/06/install-specific-version-gcc-ubuntu.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Sometimes you need to install a specific version of gcc for some reasons, for example when you need to have the same compiler version as the one used by your team. &lt;/p&gt;
&lt;p&gt;In that, the package manager doesn't help because not every version of gcc is packaged in every version of Ubuntu. So you must install it by hand and it can take a little time and there is some things that has to be done in order to work. &lt;/p&gt;
&lt;p&gt;I'm talking here of Ubuntu 11.04 (natty), because this is the version I installed Ubuntu on. This procedure will certainly work but you could have a problem with some dependencies that are installed in natty and not in your version or in the contrary have a dependency already installed. &lt;/p&gt;
&lt;p&gt;So this article will detail every step to install a specific version of gcc &lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Personally, I've made the whole installation from the folder ~/dev/ . You can use this folder or use another one, but I recommend to you use an empty folder for that. When I will talk about the installation, I will refer to this folder.  &lt;/p&gt;
&lt;p&gt;Note 1 : Because I wanted this new gcc to be my main compiler, I've directly installed everything in /usr/local/. If you want to install it in a specific folder, you can use the --prefix=FOLDER option fo the ./configure command. If you make so, you don't have to use the sudo before the make install unless you choose another directory where you don't have the right to write in. &lt;/p&gt;
&lt;p&gt;Note 2 : If you have a multicore processor, you should use the -jX option with make where X is your number of core (you can make it +1). &lt;/p&gt;
&lt;p&gt;Building gcc requires several libraries that are not installed by default. Let's start with GNU Multiple Precision Library (GMP). You can download the latest version (5.0.2 now) here : http://gmplib.org/ . Decompress the library in your installation folder and then use the followings commands : &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;cd gmp_dir
&lt;p&gt;./configure&lt;/p&gt;
&lt;p&gt;make&lt;/p&gt;
&lt;p&gt;make check&lt;/p&gt;
&lt;p&gt;sudo make install&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;You should have a message indicating that the libraries have been installed in your folder. &lt;/p&gt;
&lt;p&gt;After that, you can install the GNU MPFR library (version 3.0.1 now), available here : http://www.mpfr.org/mpfr-current/#download . Unzip the file in your installation folder and type the following commands : &lt;/p&gt;
&lt;pre&gt;cd mpfr_dir

./configure

make

make check

sudo make install&lt;/pre&gt;

&lt;p&gt;You should see the same confirmation message than for the last installation. Then, you can install the last library, MPC (version 0.9 now), that you can download here : http://www.multiprecision.org/index.php?prog=mpc&amp;amp;page=download . Once again, unzip the file and your installation folder and launch the same commands : &lt;/p&gt;
&lt;pre&gt;cd mpfr_dir

./configure

make

make check

sudo make install&lt;/pre&gt;

&lt;p&gt;Same confirmation message. &lt;/p&gt;
&lt;p&gt;To prepare the installation of gcc, you have to type the given two commands : &lt;/p&gt;
&lt;pre&gt;export C_INCLUDE_PATH=/usr/include/x86_64-linux-gnu

export CPLUS_INCLUDE_PATH=/usr/include/x86_64-linux-gnu &lt;/pre&gt;

&lt;p&gt;Here we are, you are ready to install gcc. Download the version you want to install here : http://gcc.gnu.org/releases.html and extract it on your installation folder. &lt;/p&gt;
&lt;p&gt;Note : for those who have installed the first three libraries in different folder you have to indicate to ./configure where they are using the given command line options : --with-gmp=FOLDER, --with-mpfr=FOLDER and --with-mpg=FOLDER&lt;/p&gt;
&lt;p&gt;Note : I installed gcc for C and C++, if you want to select other languages just tune the --enable-languages option and if you want every language, just remove this option. &lt;/p&gt;
&lt;p&gt;Then create a directory on the same level as gcc sources dir : &lt;/p&gt;
&lt;pre&gt;cd installation_folder

mkdir build

cd build&lt;/pre&gt;

&lt;p&gt;and now from this folder, we can install everything : &lt;/p&gt;
&lt;pre&gt;../gcc_dir/configure --enable-languages=c,c++

make

sudo make install&lt;/pre&gt;

&lt;p&gt;Now it's time to take a coffee (or even two), because the full compilation can take a lot of time. &lt;/p&gt;
&lt;p&gt;When the compilation is finished, you can try it with this command &lt;/p&gt;
&lt;pre&gt;gcc --version&lt;/pre&gt;

&lt;p&gt;that should give you the version you just installed. If it is not the case, verify that you did every step and if it's the case, take a look at the &lt;a href="http://gcc.gnu.org/install/"&gt;official installation guide&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>C++</category><category>gcc</category><category>Ubuntu</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2011/06/install-specific-version-gcc-ubuntu.html</guid><pubDate>Fri, 17 Jun 2011 08:18:29 GMT</pubDate></item><item><title>How to solve scrolling problems in Kile when using Gnome</title><link>http://www.baptiste-wicht.com/posts/2011/05/avoid-scrolling-problems-in-kile-when-using-gnome.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;From this morning, I was encoutering problems when scrolling in Kile editor using Gnome. When I scrolled, not all the lines were moving and the text was only correct when I clicked on them... &lt;/p&gt;
&lt;p&gt;After some researches, I found that the solution was to use a different graphics system. You can do that in any Qt applicaitions using the graphics-system command line option. You can choose between raster and opengl. opengl is supposed to be the fastest one, but it is still experimental. In my case, I use raster that solve the scrolling problems and it doesn't change anything, which is fine. &lt;/p&gt;
&lt;p&gt;So you can use this command-line to start Kile : &lt;/p&gt;
&lt;p&gt;&lt;code&gt;kile --graphicssystem raster&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And that will solve your scrolling problems if you encounter some. You can also use this tip to improve performances of Kile if you need. If you do, test with opengl and if it's not stable on your system, choose raster, that will improve the performance compared to the default graphics system. &lt;/p&gt;&lt;/div&gt;</description><category>Latex</category><category>Tips</category><category>Ubuntu</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2011/05/avoid-scrolling-problems-in-kile-when-using-gnome.html</guid><pubDate>Tue, 31 May 2011 08:40:05 GMT</pubDate></item><item><title>Tip : Batch resize images on Ubuntu Linux</title><link>http://www.baptiste-wicht.com/posts/2010/09/tip-batch-resize-images-on-ubuntu-linux.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;After needing to &lt;a href="http://www.baptiste-wicht.com/2010/07/tip-optimize-images-on-ubuntu-linux/" target="_blank"&gt;optimize a lot of images at once&lt;/a&gt;, this weekend I needed to resize a lot of images to the same size because they were too big.&lt;/p&gt;
&lt;p&gt;Like every other thing in Linux, there is a really simple tool to automate that. I used imagemagick to do that. Of course, there is certainly a lot of other things to make that work, but this is the first I've found and it works well.&lt;/p&gt;
&lt;p&gt;So first, you need to install it if you don't have the tool :&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;sudo apt-get install imagemagick&lt;/pre&gt;
&lt;p&gt;And then, you can resize all the JPG images to a width of 640px of the current folder using the single command :&lt;/p&gt;
&lt;pre&gt;mogrify -resize 640 *.jpg&lt;/pre&gt;

&lt;p&gt;If you want the height, just add a x :&lt;/p&gt;
&lt;pre&gt;mogrify -resize x640 *.jpg&lt;/pre&gt;

&lt;p&gt;You can also specify maximum width and height, that can be useful if you have big images and you don't want a width larger than x and a height larger than y but you don't want to resize little images in the same folder. Here is an example resizing images if the width is larger than 1280 or height larger than 1024 :&lt;/p&gt;
&lt;pre&gt;mogrify -resize '1280x1024&amp;gt;' *.jpg&lt;/pre&gt;

&lt;p&gt;With all that commands, the ratio is preserved. If you want more informations on the possible resize options, you can consult the &lt;a href="http://www.imagemagick.org/www/command-line-processing.html#geometry" target="_blank"&gt;documentation of ImageMagick&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hope that will help someone.&lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>Tips</category><category>Ubuntu</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2010/09/tip-batch-resize-images-on-ubuntu-linux.html</guid><pubDate>Wed, 08 Sep 2010 07:26:01 GMT</pubDate></item><item><title>Discover Java VisualVM 1.3</title><link>http://www.baptiste-wicht.com/posts/2010/07/discover-java-visualvm-1-3.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2 days ago, &lt;strong&gt;Java VisualVM 1.3&lt;/strong&gt; has been released. We'll see what's new with this release. &lt;/p&gt;
&lt;p&gt;At this time, there is no package for Ubuntu, so we'll install it manually : &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;wget https://visualvm.dev.java.net/files/documents/7163/151728/visualvm_13.zip
&lt;p&gt;unzip visualvm_13.zip&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;And then we can directly launch it : &lt;/p&gt;
&lt;pre&gt;cd visualvm_13/bin

sh visualvm&lt;/pre&gt;

&lt;p&gt;You'll be asked for the license agreement and after that the tool is launched : &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Startup.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Startup-300x159.png" alt="VisualVM 1.3 Startup" title="VisualVM 1.3 Startup" width="300" height="159" class="size-medium wp-image-848"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Here there is nothing new, except for the change of version of course. So let's profile something. In my case, I profile IntelliJ Idea for the test, but this doesn't change anything. We immediately see that there is a new tab (Sampler). If we watch the three first tabs (Overview, Monitor and Threads), we see that there is no changes. &lt;/p&gt;
&lt;p&gt;The Sampler tab is simply a plugin (VisualVM Sampler Plugin) that has been integrated by default in VisualVM. Sampling is not like profiling. There is no instrumentation, so no setup time and almost no overhead, the application run at full speed. This is achieved by periodically polling the monitored application for thread dumps or memory histograms. So let's test to the Sampler tab : &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Sampler.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Sampler-300x196.png" alt="VisualVM 1.3 Sampler" title="VisualVM 1.3 Sampler" width="300" height="196" class="size-medium wp-image-843"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Like, int the Profiler tab, we can launch CPU or Memory sampling. So let's try CPU : &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Sampler-CPU.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Sampler-CPU-300x196.png" alt="VisualVM 1.3 CPU Sampling" title="VisualVM 1.3 CPU Sampling" width="300" height="196" class="size-medium wp-image-846"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You will immediately see the speed of the results, there is no time to wait, but the refreshes are slower of course, because, it's periodic. The results are like in the Profiler tab. If we start Memory Sampling : &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Sampler-Memory.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Sampler-Memory-300x206.png" alt="VisualVM 1.3 Memory Sampling" title="VisualVM 1.3 Memory Sampling" width="300" height="206" class="size-medium wp-image-845"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once again, the results are the same as with the Profiler, but we see a new feature, the PermGen histogram : &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Sampler-PermGen.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Sampler-PermGen-300x153.png" alt="VisualVM 1.3 PermGen Histogram" title="VisualVM 1.3 PermGen Histogram" width="300" height="153" class="size-medium wp-image-844"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That could be really useful to see why your application takes a lot of PermGen space or simply to see that there is not enough PermGen space. &lt;/p&gt;
&lt;p&gt;There is another new feature in this version. The Tracer Probes. But by default, there is no installed probes, so you must install plugins to see them : &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Plugins.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Plugins-300x77.png" alt="VisualVM 1.3 Probes Plugins" title="VisualVM 1.3 Probes Plugins" width="300" height="77" class="size-medium wp-image-847"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then, just click install, accept the license agreement and let the application restart. And then, if you launch the profiling of an application, you'll see the Tracer tab : &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Tracer.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Tracer-300x290.png" alt="VisualVM 1.3 Tracer" title="VisualVM 1.3 Tracer" width="300" height="290" class="size-medium wp-image-840"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You see that there is a lot of probes that we can enable. So let's enable some probes and Start the Tracer : &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Tracer-Graphs.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Tracer-Graphs-275x300.png" alt="VisualVM 1.3 Tracer Graphs" title="VisualVM 1.3 Tracer Graphs" width="275" height="300" class="size-medium wp-image-842"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Like the profiler, there is a needed time of instrumentation and after that, you will see some graphs. There is a graph for each probe you selected. Each probe display some specific data, by example, the Threads Probe display the number of threads and the number of Deamon threads and the JIT Compiler Probe display the activity of the JIT compiler. Here I've also enabled some Swing probes because IntelliJ Idea use Swing, but you have also Probes for JavaFX by example.  If you pass the mouse on the graphs, you will see the exact values at the time where the cursor is : &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Tracer-Mouse.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Tracer-Mouse-300x247.png" alt="VisualVM 1.3 Tracer Mouse Details" title="VisualVM 1.3 Tracer Mouse Details" width="300" height="247" class="size-medium wp-image-841"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's think this new Tracer is just awesome. It's really useful and really good-looking. &lt;/p&gt;
&lt;p&gt;So we've now covered the main new features of this new version. I think this version adds some great new features and improvements and that will make of VisualVM an essential profiler. &lt;/p&gt;
&lt;p&gt;For the complete information about this new version, read the &lt;a target="_blank" href="https://visualvm.dev.java.net/relnotes.html"&gt;release notes&lt;/a&gt;. &lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>Java</category><category>Performances</category><category>Releases</category><category>Tools</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2010/07/discover-java-visualvm-1-3.html</guid><pubDate>Wed, 28 Jul 2010 07:10:31 GMT</pubDate></item><item><title>Tip : Optimize images on Ubuntu Linux</title><link>http://www.baptiste-wicht.com/posts/2010/07/tip-optimize-images-on-ubuntu-linux.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;When working with a lot of images by example for galleries on a website, it could be really interesting to optimize the images to save a lot of space and directly improve the performances of the website and save some traffic if this is limited by your hosting. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;Optimize JPEG images with jpegoptim&lt;/h5&gt;
&lt;p&gt;A great tool to optimize JPEG images is jpegoptim. It's a simple command line tool available as Ubuntu package. You can install it easily : &lt;/p&gt;
&lt;pre&gt;sudo apt-get install jpegoptim&lt;/pre&gt;

&lt;p&gt;And it's also really simple to use. First, to optimize an image without loss : &lt;/p&gt;
&lt;pre&gt;jpegoptim image.jpg&lt;/pre&gt;

&lt;p&gt;Or with a loss of max 25% : &lt;/p&gt;
&lt;pre&gt;jpegoptim --max=75 image.jpg&lt;/pre&gt;

&lt;p&gt;More informations on &lt;a target="_blank" href="http://freshmeat.net/projects/jpegoptim/"&gt;the official site&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;Optimize PNG, BMP and GIF images with optipng&lt;/h5&gt;

&lt;p&gt;An other tool to optimize other types of images is optipng. Here again you can install it with apt-get : &lt;/p&gt;
&lt;pre&gt;sudo apt-get install optipng&lt;/pre&gt;

&lt;p&gt;It's as easy as the first tool : &lt;/p&gt;
&lt;pre&gt;optipng image.png&lt;/pre&gt;

&lt;p&gt;You can also configure the tool to use the best optimization level, but also the slowest : &lt;/p&gt;
&lt;pre&gt;optipng -o7 image.png&lt;/pre&gt;

&lt;p&gt;So here we are : You have now enough informations to optimize all you images on Ubuntu. I hope this will be useful to somebody. &lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>Tips</category><category>Tools</category><category>Ubuntu</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2010/07/tip-optimize-images-on-ubuntu-linux.html</guid><pubDate>Thu, 22 Jul 2010 07:15:16 GMT</pubDate></item><item><title>Tip : How to solve “agent admitted failure to sign using the key” error ?</title><link>http://www.baptiste-wicht.com/posts/2010/07/tip-how-to-solve-agent-admitted-failure-to-sign-using-the-key-error.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;A very simple tip that can save a lot of time. &lt;/p&gt;
&lt;p&gt;When i wanted to do a git clone, I had the given error : &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;Agent admitted failure to sign using the key.
&lt;p&gt;Permission denied (publickey).&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;I found that this is an SSH error. &lt;/p&gt;
&lt;p&gt;One of the readers, Leonardo Hessel, pointed that out that ssh-add is also a solution: &lt;/p&gt;
&lt;p&gt;[shell]ssh-add[/shell]&lt;/p&gt;
&lt;p&gt;Another solution is simply to login and logout and it should work. &lt;/p&gt;&lt;/div&gt;</description><category>Git</category><category>Linux</category><category>Tips</category><category>Ubuntu</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2010/07/tip-how-to-solve-agent-admitted-failure-to-sign-using-the-key-error.html</guid><pubDate>Sun, 04 Jul 2010 16:59:41 GMT</pubDate></item><item><title>Tip : How to switch from KUbuntu to Ubuntu</title><link>http://www.baptiste-wicht.com/posts/2010/05/switch-kubuntu-to-ubuntu.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;After installed the new version of &lt;strong&gt;KUbuntu Lucid Lynx&lt;/strong&gt;, I have changed the display manager from &lt;strong&gt;KDE&lt;/strong&gt; (KUbuntu) to &lt;strong&gt;Gnome&lt;/strong&gt; (Ubuntu).&lt;/p&gt;
&lt;p&gt;This is easier than we could think.&lt;/p&gt;
&lt;p&gt;The first thing to do is to install the Ubuntu desktop :&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;sudo apt-get install ubuntu-desktop&lt;/pre&gt;
&lt;p&gt;That will install the Ubuntu Display Manager. You'll be asked for the Display Manager to use, choose gdm (Gnome Display Manager).&lt;/p&gt;
&lt;p&gt;After that, you'll have the Gnome Display Manager, but you've also all the applications of the KUbuntu Desktop distribution.&lt;/p&gt;
&lt;p&gt;To remove them, you can use this command :&lt;/p&gt;
&lt;pre&gt;sudo apt-get remove akonadi-server akregator amarok amarok-common amarok-utils apport-kde apturl-kde ark cdrdao dolphin dragonplayer exiv2 foomatic-db-gutenprint freespacenotifier gdebi-kde gnupg-agent gtk2-engines-qtcurve gwenview hpijs-ppds ibus-qt4 icoutils ijsgutenprint install-package jockey-kde k3b k3b-data kaddressbook kamera kate kbluetooth kcalc kcm-gtk kcm-touchpad kde-window-manager kde-zeroconf kdebase-bin kdebase-data kdebase-plasma kdebase-runtime kdebase-runtime-data kdebase-workspace kdebase-workspace-bin kdebase-workspace-data kdebase-workspace-kgreet-plugins kdegraphics-strigi-plugins kdelibs-bin kdelibs5 kdelibs5-data kdemultimedia-kio-plugins kdepasswd kdepim-groupware kdepim-kresources kdepim-runtime kdepim-strigi-plugins kdepim-wizards kdepimlibs-data kdepimlibs5 kdesudo kdm kfind khelpcenter4 klipper kmag kmail kmix kmousetool knm-runtime knotes konqueror konqueror-nsplugins konqueror-plugin-searchbar konsole kontact kopete kopete-message-indicator korganizer kpackagekit kppp krdc krfb krosspython ksnapshot ksysguard ksysguardd ksystemlog ktimetracker ktorrent ktorrent-data kubuntu-debug-installer kubuntu-default-settings kubuntu-desktop kubuntu-docs kubuntu-firefox-installer kubuntu-konqueror-shortcuts kubuntu-notification-helper kvkbd kwalletmanager language-selector-qt libakonadiprivate1 libao2 libattica0 libaudio2 libboost-program-options1.40.0 libclucene0ldbl libdbusmenu-qt2 libepub0 libexiv2-6 libflac++6 libibus-qt1 libindicate-qt0 libiodbc2 libk3b6 libkcddb4 libkdcraw8 libkdecorations4 libkdepim4 libkephal4 libkexiv2-8 libkfontinst4 libkipi7 libkleo4 libkonq5 libkonq5-templates libkonqsidebarplugin4 libkopete4 libkpgp4 libkscreensaver5 libksgrd4 libksieve4 libksignalplotter4 libkwineffects1 libkworkspace4 liblastfm0 libmimelib4 libmng1 libmodplug0c2 libmpcdec3 libmsn0.3 libmysqlclient16 libokularcore1 libotr2 libpackagekit-glib2-12 libpackagekit-qt-12 libphonon4 libplasma-applet-system-monitor4 libplasma-geolocation-interface4 libplasma3 libplasmaclock4 libplasmagenericshell4 libpolkit-qt-1-0 libpoppler-qt4-3 libprocesscore4 libprocessui4 libqca2 libqca2-plugin-ossl libqimageblitz4 libqt4-assistant libqt4-dbus libqt4-designer libqt4-help libqt4-network libqt4-opengl libqt4-qt3support libqt4-script libqt4-scripttools libqt4-sql libqt4-sql-mysql libqt4-sql-sqlite libqt4-svg libqt4-test libqt4-webkit libqt4-xml libqt4-xmlpatterns libqtcore4 libqtgui4 libqtscript4-core libqtscript4-gui libqtscript4-network libqtscript4-sql libqtscript4-uitools libqtscript4-xml libsolidcontrol4 libsolidcontrolifaces4 libsoprano4 libssh-4 libstreamanalyzer0 libstreams0 libtag-extras1 libtaskmanager4 libvncserver0 libweather-ion4 libxcb-shape0 libxcb-shm0 libxcb-xv0 libxine1 libxine1-bin libxine1-console libxine1-misc-plugins libxine1-x libzip1 mysql-client-core-5.1 mysql-common mysql-server-core-5.1 network-manager-kde okular okular-extra-backends openoffice.org-kde openoffice.org-style-oxygen oxygen-cursor-theme oxygen-icon-theme oxygen-icon-theme-complete packagekit packagekit-backend-apt phonon phonon-backend-xine pinentry-gtk2 pinentry-qt4 plasma-dataengines-addons plasma-dataengines-workspace plasma-desktop plasma-scriptengine-javascript plasma-scriptengine-python plasma-widget-facebook plasma-widget-folderview plasma-widget-kimpanel plasma-widget-kimpanel-backend-ibus plasma-widget-kubuntu-feedback plasma-widget-message-indicator plasma-widget-quickaccess plasma-widgets-addons plasma-widgets-workspace plymouth-theme-kubuntu-logo polkit-kde-1 printer-applet python-kde4 python-packagekit python-qt4 python-qt4-dbus python-sip quassel quassel-data shared-desktop-ontologies software-properties-kde soprano-daemon system-config-printer-kde systemsettings ttf-dejavu ttf-dejavu-extra update-manager-kde usb-creator-kde userconfig virtuoso-nepomuk&lt;/pre&gt;

&lt;p&gt;If you're under Karmic Koala (9.10), you must use this command : &lt;/p&gt;
&lt;pre&gt;sudo apt-get remove akonadi-server akregator amarok amarok-common amarok-utils apport-kde apturl-kde ark cdrdao dolphin dragonplayer exiv2 foomatic-db-gutenprint gdebi-kde gnupg-agent gtk2-engines-qtcurve gwenview hpijs-ppds ibus-qt4 ijsgutenprint imagemagick install-package jockey-kde k3b k3b-data kaddressbook kamera kate kcm-gtk kde-icons-oxygen kde-style-qtcurve kde-window-manager kde-zeroconf kdebase-bin kdebase-data kdebase-plasma kdebase-runtime kdebase-runtime-bin-kde4 kdebase-runtime-data kdebase-runtime-data-common kdebase-workspace-bin kdebase-workspace-data kdebase-workspace-kgreet-plugins kdebase-workspace-libs4+5 kdebluetooth kdegraphics-strigi-plugins kdelibs-bin kdelibs5 kdelibs5-data kdemultimedia-kio-plugins kdepasswd kdepim-groupware kdepim-kresources kdepim-runtime kdepim-runtime-data kdepim-runtime-libs4 kdepim-strigi-plugins kdepim-wizards kdepimlibs-data kdepimlibs5 kdesudo kdm kfind khelpcenter4 kipi-plugins klipper kmag kmail kmix kmousetool knotes konq-plugins konq-plugins-l10n konqueror konqueror-nsplugins konqueror-plugin-searchbar konqueror-plugins konsole kontact kopete korganizer kpackagekit kppp krdc krfb ksnapshot ksysguard ksysguardd ksystemlog ktimetracker ktorrent ktorrent-data kubuntu-artwork-usplash kubuntu-default-settings kubuntu-desktop kubuntu-docs kubuntu-firefox-installer kubuntu-konqueror-shortcuts kvkbd kwalletmanager kwin-style-qtcurve language-selector-qt libakonadiprivate1 libao2 libaudio2 libboost-program-options1.38.0 libclucene0ldbl libepub0 libexiv2-5 libfftw3-3 libflac++6 libindicate-qt0 libjpeg-progs libk3b6 libkabcommon4 libkcddb4 libkdcraw7 libkdecorations4 libkdepim4 libkexiv2-7 libkipi6 libkleo4 libknotificationitem1 libkonq5 libkonq5-templates libkonqsidebarplugin4 libkontactinterfaces4 libkopete4 libkorundum4-ruby1.8 libkpgp4 libksane0 libksieve4 libkwineffects1 liblancelot0 liblastfm0 liblzma0 libmimelib4 libmodplug0c2 libmpcdec3 libmsn0.1 libokularcore1 libotr2 libpackagekit-glib11 libpackagekit-qt11 libplasma3 libpolkit-dbus2 libpolkit-grant2 libpolkit-qt0 libpolkit2 libpoppler-qt4-3 libqca2 libqca2-plugin-ossl libqimageblitz4 libqscintilla2-5 libqt4-assistant libqt4-dbus libqt4-designer libqt4-help libqt4-network libqt4-opengl libqt4-phonon libqt4-qt3support libqt4-ruby1.8 libqt4-script libqt4-scripttools libqt4-sql libqt4-sql-mysql libqt4-sql-sqlite libqt4-svg libqt4-test libqt4-webkit libqt4-xml libqt4-xmlpatterns libqtcore4 libqtgui4 libqtscript4-core libqtscript4-gui libqtscript4-network libqtscript4-sql libqtscript4-uitools libqtscript4-xml libruby1.8 libscim8c2a libsmokekde4-2 libsmokeqt4-2 libsoprano4 libstreamanalyzer0 libstreams0 libstrigiqtdbusclient0 libtag-extras1 libtidy-0.99-0 libvncserver0 libxcb-shape0 libxcb-shm0 libxcb-xv0 libxine1 libxine1-bin libxine1-console libxine1-misc-plugins libxine1-x libzip1 mysql-server-core-5.1 okular okular-extra-backends openoffice.org-kde openoffice.org-style-oxygen oxygen-cursor-theme packagekit packagekit-backend-apt phonon-backend-xine pinentry-gtk2 pinentry-qt4 plasma-dataengines-addons plasma-dataengines-workspace plasma-scriptengine-python plasma-widget-facebook plasma-widget-folderview plasma-widget-googlecalendar plasma-widget-indicatordisplay plasma-widget-kimpanel plasma-widget-kubuntu-qa-feedback plasma-widget-lancelot plasma-widget-networkmanagement plasma-widget-quickaccess plasma-widgets-addons plasma-widgets-workspace policykit printer-applet python-kde4 python-packagekit python-qt4 python-qt4-dbus python-sip4 quassel quassel-data ruby ruby1.8 software-properties-kde soprano-daemon speedcrunch system-config-printer-kde systemsettings ttf-arphic-uming ttf-dejavu ttf-dejavu-extra update-manager-kde update-notifier-kde usb-creator-kde userconfig&lt;/pre&gt;

&lt;p&gt;I hope that will be useful to someone :)&lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>Others</category><category>Tips</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2010/05/switch-kubuntu-to-ubuntu.html</guid><pubDate>Tue, 04 May 2010 06:32:38 GMT</pubDate></item></channel></rss>