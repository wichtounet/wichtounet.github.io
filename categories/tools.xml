<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>@Blog("Baptiste Wicht") (Tools)</title><link>http://baptiste-wicht.com/</link><description></description><language>en</language><lastBuildDate>Tue, 01 Jul 2014 23:12:34 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Software Reliability Presentation</title><link>http://baptiste-wicht.com/posts/2014/06/software-reliability-presentation.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;In behalf of my school (College of Engineering and Architecture of Fribourg), I
presented a shoft presentation about Software Reliability. In this presentation,
I outline the main issues about the subject and propose some solutions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Software Validation&lt;/li&gt;
&lt;li&gt;Defensive Programming&lt;/li&gt;
&lt;li&gt;Software Analysis Tools&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the Software Analysis Tools, I present three tools: cppcheck, Valgrind and
the Clang Static analyzer. Several examples are presented for each tools as well
as some recommendations for using them. A short presentation of SonarQube is
also performed.&lt;/p&gt;
&lt;p&gt;I thought that it could be of some interest to some of the readers, so here it
is:&lt;/p&gt;
&lt;div style="text-align:center;"&gt;&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/35576524" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;Don't hesitate if you have any comments or questions about the presentation ;)&lt;/p&gt;
&lt;p&gt;The source code for the examples is available &lt;a class="reference external" href="https://github.com/wichtounet/analysis-examples"&gt;on Github&lt;/a&gt;.&lt;/p&gt;</description><category>Gentoo</category><category>Linux</category><category>Programming</category><category>Reliability</category><category>Tools</category><category>clang</category><guid>http://baptiste-wicht.com/posts/2014/06/software-reliability-presentation.html</guid><pubDate>Sat, 07 Jun 2014 14:45:33 GMT</pubDate></item><item><title>Install and Use CLang Static Analyzer on a CMake project</title><link>http://baptiste-wicht.com/posts/2014/04/install-use-clang-static-analyzer-cmake.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;I recently started a bit of work on my compiler (eddic) again. I started by adapting it to build on CLang with libc++. There was some minor adaptions to make it compile, but nothing really fancy. It now compiles and runs fine on LLVM/Clang 3.4 with the last version of libc++. I'm gonna use some features of C++14 in it and I plan to refactor some parts to make it more &lt;em&gt;STL-correct&lt;/em&gt;. I also plan to use only CLang on eddic right now, since C++14 support of GCC is not released right now. &lt;/p&gt;
&lt;p&gt;I decided it was a good time to try again the CLang static analyzer. &lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;If, like me, you're using Gentoo, the static analyzer is directly installed with the &lt;em&gt;sys-devel/clang&lt;/em&gt; package, unless you disabled the &lt;em&gt;static-analyzer&lt;/em&gt; USE flag. &lt;/p&gt;
&lt;p&gt;If your distribution does not ship the static analyzer directly with CLang, you'll have to install it manually. To install it from sources, I advise you to follow the &lt;a href="http://clang-analyzer.llvm.org/installation.html"&gt;Official Installations instruction&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;The usage of CLang static analyzer can be a bit disturbing at first. Most static analysis tools generally takes the sources directly and do their stuff. But that is not how Clang Static Analyzer works. It works as a kind of monitor in top of building the program, using &lt;em&gt;scan-build&lt;/em&gt;. When you are analyzing a program, you are also building the program. &lt;/p&gt;
&lt;p&gt;For instance, if you are compiling a source file like that: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;clang&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clang&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;you can perform static analysis like that: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;clang&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clang&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;source_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;scan-build works by replacing calls to the compiler by calls to &lt;em&gt;ccc-analyzer &lt;/em&gt;. This works generally well, but there are some cases where that things get a bit more complicated. That is the case of CMake where the paths to the compiler are hardcoded in the generated makefiles. &lt;/p&gt;
&lt;p&gt;For that, you have to run &lt;em&gt;cmake&lt;/em&gt; and &lt;em&gt;make&lt;/em&gt; with &lt;em&gt;scan-build&lt;/em&gt;: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;CCC_CC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;clang&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;CCC_CXX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;clang&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;cmake&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DCMAKE_CXX_COMPILER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;clang&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DCMAKE_C_COMPILER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;clang&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This can take a very long time. On eddic, it is about three times slower than a normal compilation. An important point to note about performance, is that you can run compilations in parallel (-j option of make) and that it is supported by scan-build quite well. &lt;/p&gt;
&lt;p&gt;Once analysis is performed, the found bugs are put into an HTML report. By default, the HTML report is created in &lt;em&gt;/tmp/&lt;/em&gt;, but you can specificy the folder with -o option of scan-build. &lt;/p&gt;
&lt;p&gt;You can enable or disable checker with the -enable-checker and -disable-checker options of scan-build. &lt;/p&gt;
&lt;h3&gt;Results on eddic&lt;/h3&gt;
&lt;p&gt;Several versions of Clang ago, I tried the static analyzer on eddic, but it failed on several source files without producing any results. Moreover, at this time, I don't think there was any nice HTML report at this time. &lt;/p&gt;
&lt;p&gt;I ran it again on eddic with the last versions. Here is a picture of the generated report: &lt;/p&gt;
&lt;p&gt;&lt;img alt="CLang Static Analyzer eddic results" src="http://baptiste-wicht.com/images/eddic_results.png"&gt;&lt;/p&gt;
&lt;p&gt;As you can see, 14 bugs have been found. Unfortunately, none of them is a real bug on my code, but they are not all false positives neither. For instance, here is some unreachable code report: &lt;/p&gt;
&lt;p&gt;&lt;img alt="CLang Static Analyzer eddic bug" src="http://baptiste-wicht.com/images/eddic_results_bug.png"&gt;&lt;/p&gt;
&lt;p&gt;It is indeed an unreachable statement, but it is expected, since it is an assert to ensure that the code is unreachable. But that proves that the analysis works ;) &lt;/p&gt;
&lt;p&gt;Even if it didn't found anything, this time it worked much better than the last time I checked and the HTML results are just really good. &lt;/p&gt;
&lt;p&gt;I hope you found this article interesting. If you happen to have interesting results on your codebase with the CLang static analyzer, I'd be glad to hear about them ;)&lt;/p&gt;</description><category>C++11</category><category>C++14</category><category>C++</category><category>Tools</category><category>clang</category><category>eddic</category><category>llvm</category><guid>http://baptiste-wicht.com/posts/2014/04/install-use-clang-static-analyzer-cmake.html</guid><pubDate>Wed, 09 Apr 2014 14:39:11 GMT</pubDate></item><item><title>budgetwarrior 0.2.1 - Minor changes and Gentoo ebuild</title><link>http://baptiste-wicht.com/posts/2014/01/budgetwarrior-0-2-1-minor-changes-gentoo-ebuild.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;I've released a new version of budgetwarrior, the release 0.2.1. budgetwarrior is a simple command line application to manage a personal budget.&lt;/p&gt;
&lt;p&gt;The version 0.2.1 contains several bug fixes about archived accounts and bug fixes for budget across several years.&lt;/p&gt;
&lt;p&gt;The application as well as the source code is available online: &lt;a href="https://github.com/wichtounet/budgetwarrior"&gt;https://github.com/wichtounet/budgetwarrior&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've created Gentoo ebuilds for this application. They are available on my Portage overlay: &lt;a href="https://github.com/wichtounet/portage-overlay"&gt;https://github.com/wichtounet/portage-overlay&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Gentoo Installation&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;Edit overlays section of /etc/layman/layman.cfg. Here's an example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;overlays: http://www.gentoo.org/proj/en/overlays/repositories.xml
           http://github.com/wichtounet/portage-overlay/raw/master/repository.xml&lt;/code&gt;
&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;Sync layman&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;layman -S&lt;/pre&gt;

&lt;ul&gt;
    &lt;li&gt;Add the overlay:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;layman -a wichtounet&lt;/pre&gt;

&lt;ul&gt;
    &lt;li&gt;Install budgetwarrior&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;emerge budgetwarrior&lt;/pre&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;If you find any issues with the tool, don't hesitate to post an issue on Github. If you have comments about it, you can post a comment on this post or contact me by email.&lt;/p&gt;</description><category>Gentoo</category><category>Linux</category><category>Tools</category><category>budgetwarrior</category><guid>http://baptiste-wicht.com/posts/2014/01/budgetwarrior-0-2-1-minor-changes-gentoo-ebuild.html</guid><pubDate>Thu, 16 Jan 2014 11:41:00 GMT</pubDate></item><item><title>CMake Testing - Rerun the last failed tests with CTest</title><link>http://baptiste-wicht.com/posts/2012/12/cmake-rerun-last-failed-tests-ctest.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;Some time ago, we saw &lt;a href="http://www.baptiste-wicht.com/2012/10/run-boost-test-parallel-cmake/" title="Run your Boost Tests in parallel with CMake"&gt;how to use CMake to run Boost Tests in paralel&lt;/a&gt;, now it is time for another tip. &lt;/p&gt;
&lt;p&gt;A feature that I think is lacking in CMake/CTest is a way to launch only the last failed tests. As it is not possible to do that directly, I posted &lt;a href="http://stackoverflow.com/q/13547175/802362" title="How to rerun the failed tests with ctest?"&gt;the question on StackOverflow&lt;/a&gt; and got a great answer from &lt;a href="http://stackoverflow.com/users/424459/fraser" title="Fraser"&gt;Fraser&lt;/a&gt;. I wanted to share its answer. &lt;/p&gt;
&lt;p&gt;CTest has -I option to select a list of tests to run. The idea here is to convert the log of CTest in format readable by CTest. What I think is great in its answer is that the solution is a CMake script: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;FailedFileName&lt;/span&gt; &lt;span class="s"&gt;FailedTests.log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;EXISTS&lt;/span&gt; &lt;span class="s2"&gt;"Testing/Temporary/LastTestsFailed.log"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;STRINGS&lt;/span&gt; &lt;span class="s2"&gt;"Testing/Temporary/LastTestsFailed.log"&lt;/span&gt; &lt;span class="s"&gt;FailedTests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;REGEX&lt;/span&gt; &lt;span class="s"&gt;REPLACE&lt;/span&gt; &lt;span class="s2"&gt;"([0-9]+):[^;]*"&lt;/span&gt; &lt;span class="s2"&gt;"\\1"&lt;/span&gt; &lt;span class="s"&gt;FailedTests&lt;/span&gt; &lt;span class="s2"&gt;"${FailedTests}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;SORT&lt;/span&gt; &lt;span class="s"&gt;FailedTests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;GET&lt;/span&gt; &lt;span class="s"&gt;FailedTests&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt; &lt;span class="s"&gt;FirstTest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;FailedTests&lt;/span&gt; &lt;span class="s2"&gt;"${FirstTest};${FirstTest};;${FailedTests};"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;REPLACE&lt;/span&gt; &lt;span class="s2"&gt;";"&lt;/span&gt; &lt;span class="s2"&gt;","&lt;/span&gt; &lt;span class="s"&gt;FailedTests&lt;/span&gt; &lt;span class="s2"&gt;"${FailedTests}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;WRITE&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FailedFileName&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FailedTests&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;else&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;WRITE&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FailedFileName&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;endif&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This test just transforms one file into another. &lt;/p&gt;
&lt;p&gt;You can then run the last failing tests using: &lt;/p&gt;
&lt;pre&gt;cmake -P &lt;the script&gt;
ctest -I FailedTests.log&lt;/the&gt;&lt;/pre&gt;

&lt;p&gt;Very easy, isn't it ? &lt;/p&gt;
&lt;p&gt;There is a limitation to this solution. It won't work when CTest is running in dashboard mode, but it wouldn't take too long to adapt it for that. &lt;/p&gt;
&lt;p&gt;Hope you found that tip useful.&lt;/p&gt;</description><category>C++</category><category>Tests</category><category>Tools</category><category>cmake</category><guid>http://baptiste-wicht.com/posts/2012/12/cmake-rerun-last-failed-tests-ctest.html</guid><pubDate>Thu, 06 Dec 2012 07:47:12 GMT</pubDate></item><item><title>Use CMake to easily compiles Latex documents into PDF</title><link>http://baptiste-wicht.com/posts/2012/09/cmake-compile-latex-documents.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;Everyone who compiles Latex documents by hand knows that it is not a panacea. You have to compile the file several times to handle the references. Moreover, if you have a glossary or an index, you have to run others commands between Latex commands so that everything is correctly resolved. The better way to handle Latex compilation is to write a MakeFile compiling each part. However, writing a Latex MakeFile by hand is not easy and especially not interesting. &lt;/p&gt;
&lt;p&gt;Using CMake for most of my development projects, I tried to find a CMake script to generates a MakeFile easily. I did found a good script for that, but I wanted to add some features and change some things, so I forked it to Github: &lt;a href="https://github.com/wichtounet/CMakeLatex" title="CMakeLatex Github repository"&gt;The CMakeLatex repository&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;

&lt;p&gt;Here is an example using all the features of the script for one of my Latex documents. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;PROJECT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;master_project&lt;/span&gt; &lt;span class="s"&gt;NONE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;cmake_minimum_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;VERSION&lt;/span&gt; &lt;span class="s"&gt;2.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;SET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;LATEX_OUTPUT_PATH&lt;/span&gt; &lt;span class="s"&gt;build&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;INCLUDE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;UseLATEX.cmake&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;GLOB_RECURSE&lt;/span&gt; &lt;span class="s"&gt;contents_files&lt;/span&gt; &lt;span class="s"&gt;RELATIVE&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_SOURCE_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="s"&gt;contents/*.tex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;ADD_LATEX_DOCUMENT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;master.tex&lt;/span&gt;
    &lt;span class="s"&gt;INPUTS&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;contents_files&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="s"&gt;IMAGE_DIRS&lt;/span&gt; &lt;span class="s"&gt;images&lt;/span&gt;
    &lt;span class="s"&gt;BIBFILES&lt;/span&gt; &lt;span class="s"&gt;bibliography.bib&lt;/span&gt;
    &lt;span class="s"&gt;USE_INDEX&lt;/span&gt;
    &lt;span class="s"&gt;USE_GLOSSARY&lt;/span&gt;
    &lt;span class="s"&gt;FILTER_OUTPUT&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;To use it, you have to download the files of the repository and put them aside your Latex files (or just make symlinks to the files in a clone of the repository for easy update). Then, the &lt;em&gt;UseLATEX.cmake&lt;/em&gt; file has to be included in your CMakeLists.txt file. &lt;/p&gt;
&lt;p&gt;I think that it is a good practice to generates the Latex files in another directory. This directory can be set using the &lt;em&gt;LATEX_OUTPUT_PATH&lt;/em&gt; variable. &lt;/p&gt;
&lt;p&gt;Then, to add a latex document, you can use the &lt;em&gt;ADD_LATEX_DOCUMENT&lt;/em&gt; function. The first parameter is the name of the main Latex file. After that, you have to give several parameters: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;INPUTS: It needs the list of Latex files that are included in master file. I use the GLOB_RECURSE function to find all of them in a contents subfolder. &lt;/li&gt;
    &lt;li&gt;IMAGE_DIRS: The directory where the image are stored. They will be copied to the build folder and automatically converted if necessary. &lt;/li&gt;
    &lt;li&gt;BIBFILES: If you have a bibliography, you just have to list all the .bib files of your project. &lt;/li&gt;
    &lt;li&gt;USE_INDEX: Necessary only if your document use an index. &lt;/li&gt;
    &lt;li&gt;USE_GLOSSARY: Necessary only if your document use a glossary. &lt;/li&gt;
    &lt;li&gt;FILTER_OUTPUT: This option activates the filtering of pdflatex output to the console. For now, the option is quite limited, but it allows you to have a smoother output. It has to be taken into account that this option hides the overflow and underflow warnings. &lt;/li&gt;
    &lt;li&gt;CONFIGURE: You can use the CMake configuration feature on some of your files if you want CMake variables to be replaced in the documents. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once your Latex document is configured, you can just run cmake on your project. After that, you can use targets to generate pdf: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;make pdf: This will generate the Latex file using several passes and running all the necessary commands. &lt;/li&gt;
    &lt;li&gt;make fast: This will generate a pdf in only one pass. This can be useful if you want to see a rough draft of your document quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I already use this script for several of my documents. I hope that it will be useful for some of you. If you want any problem in the script or in the generate make file or if you have an idea for improvement, don't hesitate to let a command or to publish an Issue or a Pull Request in &lt;a href="https://github.com/wichtounet/CMakeLatex" title="CMakeLatex Github repository"&gt;the CMakeLatex repository&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This script only support pdflatex and can only generates pdf directly. If you want latex support with dvi/ps/pdf generation, you should take a look at the original project:  &lt;a href="http://public.kitware.com/Wiki/CMakeUserUseLATEX" title="CMakeUserUseLATEX"&gt;CMakeUserUseLATEX&lt;/a&gt;&lt;/p&gt;</description><category>Latex</category><category>Others</category><category>Tools</category><category>cmake</category><guid>http://baptiste-wicht.com/posts/2012/09/cmake-compile-latex-documents.html</guid><pubDate>Mon, 24 Sep 2012 07:07:33 GMT</pubDate></item><item><title>Architexa is available for free - Understand your code base</title><link>http://baptiste-wicht.com/posts/2012/08/architexa-free-understand-code-base.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;&lt;strong&gt;Architexa&lt;/strong&gt; is a tool suite that helps a team to document collaboratively a large Java code base. The tool is made for a whole team to understand a code base. The tool is available as an Eclipse plugin.&lt;/p&gt;
&lt;p&gt;When several developers are working on a large application, it is not always simple to have a whole view of the application. Even with some documentation of the application code. It is even harder for a new developer that joins the project to know what the code base is about. In all these cases, Architexa will help your team. It can also be useful when you inherit an application.&lt;/p&gt;
&lt;p&gt;Starting from today, &lt;strong&gt;Architexa is available for free&lt;/strong&gt; &lt;strong&gt;for individuals and for teams of up to three developers&lt;/strong&gt;. You can read the official announce at the end of the article.&lt;/p&gt;
&lt;h4&gt;My Review of Architexa&lt;/h4&gt;

&lt;p&gt;I tried Architexa on several of my current Java Projects, but never in team. So perhaps my point of view is not very accurate regarding to general users of the tool. I made my tests using Eclipse Juno.&lt;/p&gt;
&lt;p&gt;However, even when working alone on a project, I think that this tool is very useful.&lt;/p&gt;
&lt;p&gt;The installation is very straightforward, you just have to use the update site directly in Eclipse. Then, you have several new options in the EDI to use Architexa features.&lt;/p&gt;
&lt;p&gt;Three diagrams are available in the Architexa tool suite:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Class Diagram&lt;/strong&gt; : This diagram can be automatically generated for a package, or several packages.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Sequence Diagram&lt;/strong&gt; : You can create Sequence Diagrams for some of your program actions.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Layered Diagram&lt;/strong&gt; : This diagram allows you to represent the architecture of your application. The system allows you to represent several levels of details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can easily have several diagrams of each type in your project. You can store them as local files, in a server or in the community server to make them available for everyone.&lt;/p&gt;
&lt;p&gt;You can add comment in each diagram. In each diagram you can also access the Javadoc of each class. Of course, you can also access any piece of code from your diagrams.&lt;/p&gt;
&lt;h4&gt;Advantages&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;Architexa is very simple to use. The tool have access to very good guides directly inside the IDE.&lt;/li&gt;
    &lt;li&gt;The Real-Time Code analysis is awesome. Once something is in a diagram, it is always kept up to date.&lt;/li&gt;
    &lt;li&gt;The sharing features are also great.&lt;/li&gt;
    &lt;li&gt;Even if there are fews diagrams, I think that there are largely enough to have a very good understanding of a code base.&lt;/li&gt;
    &lt;li&gt;All the graphs looks very nice, there are very readable&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Drawbacks&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;No support for generics and enums.&lt;/li&gt;
    &lt;li&gt;The tool is only available as an Eclipse plugin. I'm especially using IntelliJ Idea and NetBeans.&lt;/li&gt;
    &lt;li&gt;The tool is only available for Java. There is a prototype for C/C++ that is available on demand, but I didn't tried it at the current time.&lt;/li&gt;
    &lt;li&gt;Sometimes, the creation of a very simple diagram takes a bit long time for my feeling. Creating a diagram with three elements can take several seconds. Perhaps, it is better with larger diagrams. I haven't had the occasion to test it with large code .&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;To conclude, Architexa is a great tool suite. It is useful for any Java developers that works in a large application. It allows them to have better understanding of its code base.&lt;/p&gt;
&lt;p&gt;The official announce: &lt;a title="Architexa Toolsuite is Now Available for Free" href="http://www.architexa.com/blog/architexa-toolsuite-is-now-available-for-free/"&gt;Architexa Tool suite is Now Available for Free&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More information on the official site: &lt;a href="http://www.architexa.com/"&gt;http://www.architexa.com/&lt;/a&gt;&lt;/p&gt;</description><category>Conception</category><category>Java</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2012/08/architexa-free-understand-code-base.html</guid><pubDate>Wed, 22 Aug 2012 03:00:37 GMT</pubDate></item><item><title>taskwarrior-php 0.1 : A simple PHP Frontend for Taskwarrior</title><link>http://baptiste-wicht.com/posts/2012/07/taskwarrior-php-frontend-0-1.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;I released the version 0.1 of &lt;strong&gt;taskwarrior-php&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This project is a simple PHP Frontend for Taskwarrior. For now, the frontend is quite basic. All the tasks are displayed and sorted by projects. The completion of each project is also computed.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/?attachment_id=2035" rel="attachment wp-att-2035"&gt;&lt;img class="size-medium wp-image-2035" title="taskwarrior-php Screenshot" src="http://baptiste-wicht.com/wp-content/uploads/2012/07/taskwarrior-php-1-300x271.png" alt="taskwarrior-php Screenshot" width="300" height="271"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also insert a new task. For now, only the project and the description of the task can be modified.&lt;/p&gt;
&lt;h3&gt;Download&lt;/h3&gt;

&lt;p&gt;The application is available on the Git repository : &lt;a href="https://github.com/wichtounet/taskwarrior-php"&gt;https://github.com/wichtounet/taskwarrior-php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The installation is simple, you just have to put all the files in a folder of a PHP server. Then, you have to edit the config.php to set the location of your Taskwarrior files.&lt;/p&gt;
&lt;p&gt;It is necessary that the Taskwarrior files are on the PHP server as well. For that, you can use the FTP pull and push commands of Taskwarrior.&lt;/p&gt;
&lt;p&gt;Don't hesitate to contact me if you have some ideas for this project or if you find some bugs.&lt;/p&gt;</description><category>Linux</category><category>Releases</category><category>Tools</category><category>Web</category><guid>http://baptiste-wicht.com/posts/2012/07/taskwarrior-php-frontend-0-1.html</guid><pubDate>Mon, 09 Jul 2012 07:21:14 GMT</pubDate></item><item><title>Install Valgrind on Gentoo Linux</title><link>http://baptiste-wicht.com/posts/2012/04/install-valgrind-on-gentoo-linux.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;&lt;strong&gt;Valgrind&lt;/strong&gt; is very powerful suite of software for dynamic analysis of binary programs. Valgrind is available in an ebuild on the Gentoo portage tree, but if you want to install valgrind on your Gentoo distribution, there is a problem with the build with the standard library. On Gentoo, the standard C library (glibc) is stripped and Valgrind needs the debug symbols to work. If you try to launch valgrind without the debug symbols, you will get the following error: &lt;/p&gt;
&lt;pre&gt;valgrind:  Fatal error at startup: a function redirection
valgrind:  which is mandatory for this platform-tool combination
valgrind:  cannot be set up.  Details of the redirection are:
valgrind:  
valgrind:  A must-be-redirected function
valgrind:  whose name matches the pattern:      strlen
valgrind:  in an object with soname matching:   ld-linux-x86-64.so.2
valgrind:  was not found whilst processing
valgrind:  symbols from the object with soname: ld-linux-x86-64.so.2
valgrind:  
valgrind:  Possible fixes: (1, short term): install glibc's debuginfo
valgrind:  package on this machine.  (2, longer term): ask the packagers
valgrind:  for your Linux distribution to please in future ship a non-
valgrind:  stripped ld.so (or whatever the dynamic linker .so is called)
valgrind:  that exports the above-named function using the standard
valgrind:  calling conventions for this platform.
valgrind:  
valgrind:  Cannot continue -- exiting now.  Sorry.&lt;/pre&gt;

&lt;p&gt;So first, you have to activate the debug symbols for the libraries in your &lt;em&gt;/etc/make.conf&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;FEATURES="splitdebug"&lt;/pre&gt;

&lt;p&gt;Then, you can emerge again the glibc: &lt;/p&gt;
&lt;pre&gt;sudo emerge glibc&lt;/pre&gt;

&lt;p&gt;If you already had emerged valgrind, there is no need to emerge it again, it should work now. &lt;/p&gt;
&lt;p&gt;And finally, you can emerge valgrind: &lt;/p&gt;
&lt;pre&gt;sudo emerge valgrind&lt;/pre&gt;

&lt;p&gt;And everything will work fine.&lt;/p&gt;</description><category>Gentoo</category><category>Linux</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2012/04/install-valgrind-on-gentoo-linux.html</guid><pubDate>Fri, 13 Apr 2012 06:57:38 GMT</pubDate></item><item><title>Install the Insight Debugger on Linux Mint (works for Ubuntu too)</title><link>http://baptiste-wicht.com/posts/2012/01/install-insight-debugger-linux-mint-ubuntu.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;Insight is a very good debugger based on gdb. I prefer it over ddd or kdbg as I find it clearer and easier to use. Moreover, this debugger is also the one used in the book &lt;strong&gt;Assembly language Step by Step, for Linux&lt;/strong&gt;. However, Insight has been removed from Debian packages already more than a year ago. &lt;/p&gt;
&lt;p&gt;But, thanks to SevenMachines, a PPA repository is available to install it on Linux Mint (works also on Ubuntu and Ubuntu-based Linux distributions). &lt;/p&gt;
&lt;p&gt;To add the repository to your apt sources, add the following lines to the /etc/apt/sources.list file:&lt;/p&gt;
&lt;pre&gt;deb http://ppa.launchpad.net/sevenmachines/dev/ubuntu natty main 
deb-src http://ppa.launchpad.net/sevenmachines/dev/ubuntu natty main &lt;/pre&gt;

&lt;p&gt;and update your apt sources: &lt;/p&gt;
&lt;pre&gt;sudo apt-get update&lt;/pre&gt;

&lt;p&gt;Then you can install insight: &lt;/p&gt;
&lt;pre&gt;sudo apt-get install insight&lt;/pre&gt;

&lt;p&gt;And now you are ready to use Insight as your debugger. &lt;/p&gt;
&lt;p&gt;If you don't trust this PPA repository, you can also try it to install it from the sources (http://sources.redhat.com/insight/), but doesn't seem to very simple to install it. I wasn't able to build it on my Linux Mint 12.&lt;/p&gt;</description><category>Assembly</category><category>C++</category><category>Linux</category><category>Mint</category><category>Tools</category><category>gcc</category><guid>http://baptiste-wicht.com/posts/2012/01/install-insight-debugger-linux-mint-ubuntu.html</guid><pubDate>Thu, 26 Jan 2012 08:28:41 GMT</pubDate></item><item><title>Google+ is now open to all</title><link>http://baptiste-wicht.com/posts/2011/09/google-is-open-to-all.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;After about 90 days of trial on invitation-only mode, &lt;a href="http://plus.google.com" title="Google+"&gt;Google+&lt;/a&gt; is now open to everybody. &lt;/p&gt;
&lt;p&gt;For those who don't know, Google+ is the social network platform of Google, with several interesting features like Circles, Hangouts, ...&lt;/p&gt;
&lt;p&gt;For example, you can &lt;a href="https://plus.google.com/103113673902796202116/" title="My Page on Google+"&gt;see my page on Google+&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Personally, I find this social network very interesting, but there are not enough people on it to concurrence really Facebook and the others networks. Don't hesitate to give it a try, it's worth it!&lt;/p&gt;</description><category>Google</category><category>Tools</category><category>Web</category><guid>http://baptiste-wicht.com/posts/2011/09/google-is-open-to-all.html</guid><pubDate>Thu, 22 Sep 2011 12:50:53 GMT</pubDate></item><item><title>How to profile C++ application with Callgrind / KCacheGrind</title><link>http://baptiste-wicht.com/posts/2011/09/profile-c-application-with-callgrind-kcachegrind.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;I have shown before how to &lt;a title="Profile a C++ application with the Linux perf tools" href="http://www.baptiste-wicht.com/2011/07/profile-applications-linux-perf-tools/"&gt;profile a C++ application using the Linux perf tools&lt;/a&gt;.  In this post, we will see how to profile the same kind of application using Callgrind. Callgrind is a tool in part of the Valgrind toolchain. It is running in Valgrind framework. The principle is not the same. When you use Callgrind to profile an application, your application is transformed in an intermediate language and then ran in a virtual processor emulated by valgrind. This has a huge run-time overhead, but the precision is really good and your profiling data is complete. An application running in Callgrind can be 10 to 50 times slower than normally.&lt;/p&gt;
&lt;p&gt;The output of Callgrind is flat cal graph that is not really usable directly. In this post, we will use KCachegrind to display the informations about the profiling of the analyzed application.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2011/09/profile-c-application-with-callgrind-kcachegrind.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;</description><category>C++</category><category>Linux</category><category>Performances</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2011/09/profile-c-application-with-callgrind-kcachegrind.html</guid><pubDate>Thu, 01 Sep 2011 06:25:10 GMT</pubDate></item><item><title>How to compute metrics of C++ project using CCCC</title><link>http://baptiste-wicht.com/posts/2011/08/compute-metrics-of-c-project-using-cccc.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;CCCC (C and C++ Code Counter) is a little command-line tool that generates metrics from the source code of a C or C++ project. The output of the tool is a simple HTML website with information about all your sources.&lt;/p&gt;
&lt;p&gt;CCCC generates not only information about the number of lines of codes for each of your modules, but also complexity metrics like the McCabe Cyclomatic Complexity level of your modules and functions, design metrics like the coupling between the modules or object oriented metrics like the depth of inheritance tree for each of your classes, ...&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2011/08/compute-metrics-of-c-project-using-cccc.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;</description><category>C++</category><category>Linux</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2011/08/compute-metrics-of-c-project-using-cccc.html</guid><pubDate>Tue, 02 Aug 2011 07:18:53 GMT</pubDate></item><item><title>How to profile your applications using the Linux perf tools</title><link>http://baptiste-wicht.com/posts/2011/07/profile-applications-linux-perf-tools.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;When an application encounters some performance issues, we have to find the code that causes the problem to optimize only what really matters. &lt;/p&gt;
&lt;p&gt;To find the code we have to optimize, the profilers are really useful. In this post, we'll use the Linux perf tools to profile a simple C++ application. &lt;/p&gt;
&lt;p&gt;The perf tools are integrated in the Linux kernel since the 2.6 version. The perf tools are based on the perf events subsystem. The perf profiler uses hardware counters to profile the application. The result of this profiler are really precise and because it is not doing instrumentation  of the code, it is really fast. &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2011/07/profile-applications-linux-perf-tools.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;</description><category>C++</category><category>Linux</category><category>Performances</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2011/07/profile-applications-linux-perf-tools.html</guid><pubDate>Mon, 18 Jul 2011 07:30:45 GMT</pubDate></item><item><title>IntelliJ Idea 10 Early Acces Program is here</title><link>http://baptiste-wicht.com/posts/2010/07/intellij-idea-10-eap-is-here.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;Today, the &lt;strong&gt;Early Access Program&lt;/strong&gt; (EAP) has been opened for &lt;strong&gt;IntelliJ Idea 10&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There is a lot of changes, here are some of them (the most interesting in my point of view) :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Faster indexing speed&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Java - &lt;strong&gt;Faster method usage search&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Spring Web Services support&lt;/li&gt;
    &lt;li&gt;Spring testing support&lt;/li&gt;
    &lt;li&gt;New Spring live templates (patterns and frameworks)&lt;/li&gt;
    &lt;li&gt;intelligent resources support (smart completion and warnings for resource types)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Maven Refactorings&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Maven pom.xml editor new features&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Maven Dependencies Diagram&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Discover &amp;amp; download libraries from maven repositories even in plain java projects&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;XML editing improvements&lt;/strong&gt; in IntelliJ IDEA X&lt;/li&gt;
    &lt;li&gt;Git support improvements, including &lt;strong&gt;'Git Log' view&lt;/strong&gt;.&lt;/li&gt;
    &lt;li&gt;Mercurial support&lt;/li&gt;
    &lt;li&gt;Hibernate Criteria API supported&lt;/li&gt;
    &lt;li&gt;JDBC Console UI revised&lt;/li&gt;
    &lt;li&gt;Initial support for AspectJ and Spring Roo frameworks&lt;/li&gt;
    &lt;li&gt;A lot of other interesting features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To consult the full list of new features, read &lt;a href="http://confluence.jetbrains.net/display/IDEADEV/IDEA+X+First+EAP+Release+Notes" target="_blank"&gt;the release notes&lt;/a&gt;. And if you want to test this version, &lt;a href="http://confluence.jetbrains.net/display/IDEADEV/IDEA+X+EAP" target="_blank"&gt;download it here&lt;/a&gt;.&lt;/p&gt;</description><category>IntelliJ Idea</category><category>Java</category><category>Releases</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/07/intellij-idea-10-eap-is-here.html</guid><pubDate>Wed, 28 Jul 2010 15:59:40 GMT</pubDate></item><item><title>Discover Java VisualVM 1.3</title><link>http://baptiste-wicht.com/posts/2010/07/discover-java-visualvm-1-3.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;2 days ago, &lt;strong&gt;Java VisualVM 1.3&lt;/strong&gt; has been released. We'll see what's new with this release. &lt;/p&gt;
&lt;p&gt;At this time, there is no package for Ubuntu, so we'll install it manually : &lt;/p&gt;
&lt;pre&gt;wget https://visualvm.dev.java.net/files/documents/7163/151728/visualvm_13.zip
unzip visualvm_13.zip&lt;/pre&gt;

&lt;p&gt;And then we can directly launch it : &lt;/p&gt;
&lt;pre&gt;cd visualvm_13/bin
sh visualvm&lt;/pre&gt;

&lt;p&gt;You'll be asked for the license agreement and after that the tool is launched : &lt;/p&gt;
&lt;p&gt;&lt;a href="http://baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Startup.png"&gt;&lt;img src="http://baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-1.3-Startup-300x159.png" alt="VisualVM 1.3 Startup" title="VisualVM 1.3 Startup" width="300" height="159" class="size-medium wp-image-848"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/07/discover-java-visualvm-1-3.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;</description><category>Java</category><category>Performances</category><category>Releases</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/07/discover-java-visualvm-1-3.html</guid><pubDate>Wed, 28 Jul 2010 05:10:31 GMT</pubDate></item><item><title>Tip : Optimize images on Ubuntu Linux</title><link>http://baptiste-wicht.com/posts/2010/07/tip-optimize-images-on-ubuntu-linux.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;When working with a lot of images by example for galleries on a website, it could be really interesting to optimize the images to save a lot of space and directly improve the performances of the website and save some traffic if this is limited by your hosting. &lt;/p&gt;
&lt;h5&gt;Optimize JPEG images with jpegoptim&lt;/h5&gt;

&lt;p&gt;A great tool to optimize JPEG images is jpegoptim. It's a simple command line tool available as Ubuntu package. You can install it easily : &lt;/p&gt;
&lt;pre&gt;sudo apt-get install jpegoptim&lt;/pre&gt;

&lt;p&gt;And it's also really simple to use. First, to optimize an image without loss : &lt;/p&gt;
&lt;pre&gt;jpegoptim image.jpg&lt;/pre&gt;

&lt;p&gt;Or with a loss of max 25% : &lt;/p&gt;
&lt;pre&gt;jpegoptim --max=75 image.jpg&lt;/pre&gt;

&lt;p&gt;More informations on &lt;a target="_blank" href="http://freshmeat.net/projects/jpegoptim/"&gt;the official site&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;Optimize PNG, BMP and GIF images with optipng&lt;/h5&gt;

&lt;p&gt;An other tool to optimize other types of images is optipng. Here again you can install it with apt-get : &lt;/p&gt;
&lt;pre&gt;sudo apt-get install optipng&lt;/pre&gt;

&lt;p&gt;It's as easy as the first tool : &lt;/p&gt;
&lt;pre&gt;optipng image.png&lt;/pre&gt;

&lt;p&gt;You can also configure the tool to use the best optimization level, but also the slowest : &lt;/p&gt;
&lt;pre&gt;optipng -o7 image.png&lt;/pre&gt;

&lt;p&gt;So here we are : You have now enough informations to optimize all you images on Ubuntu. I hope this will be useful to somebody.&lt;/p&gt;</description><category>Linux</category><category>Tips</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/07/tip-optimize-images-on-ubuntu-linux.html</guid><pubDate>Thu, 22 Jul 2010 05:15:16 GMT</pubDate></item><item><title>IntelliJ Idea 9.0.3 is here !</title><link>http://baptiste-wicht.com/posts/2010/07/intellij-idea-9-0-3-is-here.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;A new version of IntelliJ Idea is available : &lt;strong&gt;IntelliJ Idea 9.0.3&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;A new UI for merging Subversion branches&lt;/li&gt;
    &lt;li&gt;A new tool to store encrypted passwords for VCS, proxy server etc.&lt;/li&gt;
    &lt;li&gt;A lot of bugfixes, more than 350&lt;/li&gt;
    &lt;li&gt;The HTML editor comes with initial support for HTML 5&lt;/li&gt;
    &lt;li&gt;The Flex debugger has been improved a lot&lt;/li&gt;
    &lt;li&gt;This version supports now Grails 1.3.x&lt;/li&gt;
    &lt;li&gt;Several little performance improvements in specific part (XHTML editing by example)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a title="Idea 9.0.3 change notes" href="http://confluence.jetbrains.net/display/IDEADEV/IDEA+9.0.3+Release+Notes" target="_blank"&gt;change notes&lt;/a&gt; are available on the site of JetBrains.&lt;/p&gt;
&lt;p&gt;You can &lt;a title="Download Idea 9.0.3" href="http://www.jetbrains.com/idea/download/" target="_blank"&gt;download it&lt;/a&gt; from now and install it manually or just launch Idea and the patch will be downloaded and applied.&lt;/p&gt;</description><category>IntelliJ Idea</category><category>Java</category><category>Releases</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/07/intellij-idea-9-0-3-is-here.html</guid><pubDate>Thu, 22 Jul 2010 03:04:42 GMT</pubDate></item><item><title>Tip : Profile an OSGi application with VisualVM</title><link>http://baptiste-wicht.com/posts/2010/07/tip-profile-osgi-application-visualvm.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;When you develop applications and you've performance problems, it's really interesting to see what can cause this problems. And it that case, the profilers are the most useful tool. By example, we can use VisualVM, packed by default with the Java Virtual Machine. For more information, you can read &lt;a href="http://www.baptiste-wicht.com/2010/07/profile-applications-java-visualvm/"&gt;this introduction to Java VisualVM&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;But, when you work with OSGi application, it's not as simple as a normal application. The profiler needs that its class can be found by the profiled classes, but with OSGi, the classloader are restricted by the framework and the classes of the profiler cannot be found. &lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/07/tip-profile-osgi-application-visualvm.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;</description><category>Java</category><category>OSGi</category><category>Performances</category><category>Tips</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/07/tip-profile-osgi-application-visualvm.html</guid><pubDate>Tue, 20 Jul 2010 05:01:28 GMT</pubDate></item><item><title>Profile your applications with Java VisualVM</title><link>http://baptiste-wicht.com/posts/2010/07/profile-applications-java-visualvm.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;When you need to discover what part of an application consume the more CPU or Memory, you must use a profiler to do that.&lt;/p&gt;
&lt;p&gt;One profiler, packed by default with the Sun JDK is Java VisualVM. This profiler is really simple to use and really powerful.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-Startup.png"&gt;&lt;img class="size-medium wp-image-718 " title="VisualVM start logo" src="http://baptiste-wicht.com/wp-content/uploads/2010/07/VisualVM-Startup-300x175.png" alt="VisualVM start logo" width="300" height="175"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this post, we'll see how to install it and use it to profile an application.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://baptiste-wicht.com/posts/2010/07/profile-applications-java-visualvm.html"&gt;Read more…&lt;/a&gt;&lt;/p&gt;</description><category>Java</category><category>Performances</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/07/profile-applications-java-visualvm.html</guid><pubDate>Mon, 12 Jul 2010 23:08:22 GMT</pubDate></item><item><title>Tip Replace an old copyright by a new one</title><link>http://baptiste-wicht.com/posts/2010/07/replace-an-old-copyright-by-a-new-one.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;Today, I searched a tool to &lt;strong&gt;replace&lt;/strong&gt; the old copyright of the GNU GPL V3 license by the copyright of the Apache License 2.0. But I've not found a simple tool to do a &lt;strong&gt;multi-line replacement&lt;/strong&gt; in a complete set of files. So like the developer I'm, I decided to do it myself. And because it can be useful to someone else and because open source is good, I also decided to give it to everything that want :)&lt;/p&gt;
&lt;p&gt;The usage is quite simple :&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;java -jar RCR.jar old_file new_file file&lt;/pre&gt;
&lt;ul&gt;
    &lt;li&gt;old_file is the path to a file containing the old copyright&lt;/li&gt;
    &lt;li&gt;new_file is the path to the file containing the new copyright&lt;/li&gt;
    &lt;li&gt;file is a folder to make the replacements in. If it's a folder, all the files and sub-folders will be searched for replacements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, I'm talking about a copyright, but it of course also works for any other multi-line replacement you want. &lt;/p&gt;
&lt;p&gt;The jar is available here : &lt;a href="http://baptiste-wicht.com/wp-content/uploads/2010/07/RCR.jar"&gt;RCR.jar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The sources is available here : &lt;a href="http://baptiste-wicht.com/wp-content/uploads/2010/07/RCR.java"&gt;RCR.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope that will be useful to someone.&lt;/p&gt;</description><category>Java</category><category>Tips</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/07/replace-an-old-copyright-by-a-new-one.html</guid><pubDate>Mon, 05 Jul 2010 11:29:14 GMT</pubDate></item><item><title>Improve the performance of your Maven builds with maven-cli-plugin</title><link>http://baptiste-wicht.com/posts/2010/05/improve-performance-builds-maven-cli-plugin.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;When you makes a lot of build using &lt;strong&gt;Maven&lt;/strong&gt;, this is quickly a pain to wait for the end of the build. So this is always good to have solutions to improve the &lt;strong&gt;performances&lt;/strong&gt; of the builds.&lt;/p&gt;
&lt;p&gt;The better improvement i found until now is the &lt;strong&gt;maven-cli-plugin&lt;/strong&gt;. This plugin provides an &lt;strong&gt;interactive command line&lt;/strong&gt; interface to launch builds. The improvement is that the first phases of the build are made only once. So multiple builds are really &lt;strong&gt;faster&lt;/strong&gt;. We loose a little time at the first build to make some &lt;strong&gt;caching&lt;/strong&gt; improvements.&lt;/p&gt;
&lt;p&gt;With these features, I save a lot of time when I made a lot of builds. For example a simple clean takes sometimes 20 seconds on a big multimodule project. When using the cli, it takes 20 seconds including the time to load the shell for the first time and then it takes only 1 second the make the following cleans. The effect is the same on other phases like install, package, compile, ...&lt;/p&gt;
&lt;p&gt;The installation is quite simple. First you must add a plugin group to the settings.xml file :&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pluginGroups&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;pluginGroup&amp;gt;&lt;/span&gt;org.twdata.maven&lt;span class="nt"&gt;&amp;lt;/pluginGroup&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/pluginGroups&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;And then add a new repository for the manve-cli-plugin : &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;&amp;lt;pluginRepositories&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;pluginRepository&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;twdata-m2-repository&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;twdata.org Maven 2 Repository&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://twdata-m2-repository.googlecode.com/svn/&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/pluginRepository&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pluginRepositories&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;And you just have to use the following command on a Maven project : &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;mvn cli:execute-phase&lt;/pre&gt;
&lt;p&gt;With that the plugin will be downloaded automatically and the next commands will be executed directly. &lt;/p&gt;
&lt;p&gt;The usage is very easy. This plugin has 2 useful goals : &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;execute : Open a shell and allows you to execute goals of plugins. &lt;/li&gt;
    &lt;li&gt;execute-phase : Open a shell and allows you to execute phases of the maven build. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main difference is that if you launch install from the execute-phase, all the preceding phases will be executed, but that's not the case with execute, only install will be executed. &lt;/p&gt;
&lt;p&gt;Personally, I only execute phases, so I always use the execute-phase of the cli plugin. &lt;/p&gt;
&lt;p&gt;When you're in the shell, you can launch several phases or goals : &lt;/p&gt;
&lt;pre&gt;maven&amp;gt; clean install&lt;/pre&gt;

&lt;p&gt;And you can directly add arguments in the command : &lt;/p&gt;
&lt;pre&gt;maven&amp;gt; clean install -Dmaven.test.skip=true&lt;/pre&gt;

&lt;p&gt;And when you are building a multimodule projects, you can also execute phases only on several modules : &lt;/p&gt;
&lt;pre&gt;maven&amp;gt; module1 module2 module3 clean install&lt;/pre&gt;

&lt;p&gt;You can use the ls command in a multi module project to list all the modules of the project. You can use the "Tab" key to auto complete the goals, phases and modules name. &lt;/p&gt;
&lt;p&gt;When you've finished your builds, you can simply use the "exit" command to exit from the command line. &lt;/p&gt;
&lt;p&gt;I think it's really a great essential plugin for each person who make Maven builds.  &lt;/p&gt;
&lt;p&gt;More information &lt;a href="http://wiki.github.com/mrdon/maven-cli-plugin/" target="_blank"&gt;on the official site&lt;/a&gt;.&lt;/p&gt;</description><category>Java</category><category>Maven</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/05/improve-performance-builds-maven-cli-plugin.html</guid><pubDate>Wed, 26 May 2010 01:09:22 GMT</pubDate></item><item><title>Evernote : A very smart note-book</title><link>http://baptiste-wicht.com/posts/2010/05/evernote-a-very-smart-note-book.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;Like any developer, I write a lot of notes with different tools :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;A lot of paper&lt;/li&gt;
    &lt;li&gt;Office Word&lt;/li&gt;
    &lt;li&gt;My iPhone&lt;/li&gt;
    &lt;li&gt;My emails&lt;/li&gt;
    &lt;li&gt;Web applications like RememberTheMilk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use them depending on what I do and  where I am. But this not a really good way to manage notes. The notes are not centralized and I've not always them when I need them.&lt;/p&gt;
&lt;p&gt;Some days ago, I discovered a new web application than can perhaps solve my problem. This web tool is &lt;a href="http://www.evernote.com/" target="_blank"&gt;Evernote&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The site allows you to store elements on the web or offline in your storage space and organize all the elements like you want. With Evernote, you can :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Write TODO List&lt;/li&gt;
    &lt;li&gt;Write some notes&lt;/li&gt;
    &lt;li&gt;Send them by email&lt;/li&gt;
    &lt;li&gt;Take screenshot&lt;/li&gt;
    &lt;li&gt;Add photo&lt;/li&gt;
    &lt;li&gt;Capture contents of web pages&lt;/li&gt;
    &lt;li&gt;Record audio records&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But there is more, this service make also Optical Character Recognition (OCR) in your images. So when you take a picture and send them in the Evernote account, the text in the photo is indexed and taken for your next searches. All the text of the other documents is of course also indexed. So with that you can search documents easily.&lt;/p&gt;
&lt;p&gt;Evernote is also more than an web application, it's also a desktop client for Windows and Mac OS. There is also Windows Mobile, Java and soon iPhone versions. With the client versions, you can directly drag and drop content to your account.&lt;/p&gt;
&lt;p&gt;So to resume, Evernote is a kind of aggregator for your content. So after writing something on paper, you can take a picture and add it to your Evernote and then make searches in your content. With the free registration, you have 40MB of upload monthly. To have more upload capacity, you can pay the premium account for 5$/month.&lt;/p&gt;
&lt;p&gt;For more informations, you can consult the &lt;a href="http://www.evernote.com/" target="_blank"&gt;Official site&lt;/a&gt;&lt;/p&gt;</description><category>Others</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/05/evernote-a-very-smart-note-book.html</guid><pubDate>Wed, 19 May 2010 04:32:54 GMT</pubDate></item><item><title>How to write correct benchmarks</title><link>http://baptiste-wicht.com/posts/2010/04/write-corrects-benchmarks.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;Several months ago, I wrote an article to &lt;a href="http://www.baptiste-wicht.com/2010/01/dont-use-shorts-in-loop/"&gt;compare the performances of short indexes for loops&lt;/a&gt;. I wrote that code to achieve my goal :&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wicht&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;old&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestShortInt&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nanoTime&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;resultInt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;32760&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
                &lt;span class="n"&gt;resultInt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Temp pour int : "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nanoTime&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" ms"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nanoTime&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;resultShort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;32760&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
                &lt;span class="n"&gt;resultShort&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Temp pour short : "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nanoTime&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" ms"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultInt&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultShort&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;And i found as a result that short was two times slower than int and I was convinced of these results until a week ago.&lt;/p&gt;
&lt;p&gt;At this time, a reader (Jean) criticized the results of my tests and gave me links to several articles about &lt;strong&gt;micro-benchmarking&lt;/strong&gt;. I've read these articles and understand why my results were incorrect.&lt;/p&gt;
&lt;p&gt;In fact, my test doesn't pay attention to several things that can change results of tests :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;JVM warmup&lt;/strong&gt; : Due to several parameters, the code is first often slow and becomes faster and faster when the execution time grows until it goes to steady-state.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Class loading&lt;/strong&gt; : The first time you launch a benchmark, all the used classes must be loaded, increasing the execution time.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Just In Time Compiler&lt;/strong&gt; : When the JVM identify a hot part of the code&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Garbage Collector&lt;/strong&gt; : A garbage collection can happen during the benchmark and with that the time can increase a lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Due to all these factors, the first runs (perhaps 10 seconds of run) are slower than the other and than can make your benchmarks completely false.&lt;/p&gt;
&lt;p&gt;So, how can we do to have good benchmarks results ?&lt;/p&gt;
&lt;p&gt;It's really difficult, but we can have help using a benchmark framework introduced by Brent Boyer, a software developer from Elliptic Group. This framework take care of all the previously introduced factors and made good benchmarks.&lt;/p&gt;
&lt;p&gt;The use of this framework is really simple, you just have to create a new instance of the Benchmark class passing to it a Callable or a Runnable and the test is directly launched. Here is the example with the test of short and int in loop indexes :&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShortIndexesLoop&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Callable&lt;/span&gt; &lt;span class="n"&gt;callableInt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;32760&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
                      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;444&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                  &lt;span class="o"&gt;}&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;Callable&lt;/span&gt; &lt;span class="n"&gt;callableShort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;32760&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
                      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;444&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                  &lt;span class="o"&gt;}&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Benchmark&lt;/span&gt; &lt;span class="n"&gt;intBenchmark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Benchmark&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callableInt&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Result with int "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intBenchmark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

            &lt;span class="n"&gt;Benchmark&lt;/span&gt; &lt;span class="n"&gt;shortBenchmark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Benchmark&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callableShort&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Result short "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shortBenchmark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;To get the results, you can use Benchmark.toString() or Benchmark.toStringFull() for more statistics. You can also directly access some stats like standard deviation using Benchmark.getSd() or directly with Benchmark.getStats() to get all the stats.&lt;/p&gt;
&lt;p&gt;Here is the result with the preceding code :&lt;/p&gt;
&lt;pre&gt;Result int
first = 807.056 us, mean = 46.032 us (CI deltas: -261.393 ns, +408.932 ns), sd = 230.929 us (CI deltas: -68.201 us, +105.262 us)
Result short
first = 721.912 us, mean = 48.234 us (CI deltas: -198.625 ns, +254.774 ns), sd = 160.196 us (CI deltas: -32.764 us, +37.882 us)&lt;/pre&gt;

&lt;p&gt;As you can see, the short version is only 104.78% slower than the int. That show that the first results were completely false.&lt;/p&gt;
&lt;p&gt;Here is the full results of the int version :&lt;/p&gt;
&lt;pre&gt;action statistics: first = 807.056 us, mean = 46.032 us (CI deltas: -261.393 ns, +408.932 ns), sd = 230.929 us (CI deltas: -68.201 us, +105.262 us) WARNING: EXECUTION TIMES HAVE EXTREME OUTLIERS, SD VALUES MAY BE INACCURATE
    ----------
    --the action statistics were calculated from block statistics
    --each block measured 32768 task executions
    --the user says that task internally performs m = 1 actions
    --then the number of actions per block measurement is a = 32768
    --block statistics: mean = 1.508 s (CI deltas: -8.565 ms, +13.400 ms), sd = 41.803 ms (CI deltas: -12.346 ms, +19.054 ms)
    --the forumla used to convert block statistics to action statistics (mean scales as 1/a, sd scales as 1/sqrt(a)) assumes that the action execution times are iid
    ----------
    --each confidence interval (CI) is reported as either +- deltas from the point estimate, or as a closed interval ([x, y])
    --each confidence interval has confidence level = 0.95
    ----------
    --EXECUTION TIMES APPEAR TO HAVE OUTLIERS
    --this was determined using the boxplot algorithm with median = 1.498 s, interquantileRange = 34.127 ms
    --3 are EXTREME (on the high side): #57 = 1.621 s, #58 = 1.647 s, #59 = 1.688 s
    --2 are mild (on the high side): #55 = 1.570 s, #56 = 1.582 s
    ----------
    --block sd values MAY NOT REFLECT TASK'S INTRINSIC VARIATION
    --guesstimate: environmental noise explains at least 55.89418621876822% of the measured sd
    ----------
    --action sd values ALMOST CERTAINLY GROSSLY INFLATED by outliers
    --they cause at least 98.95646276911543% of the measured VARIANCE according to a equi-valued outlier model
    --model quantities: a = 32768.0, muB = 1.5083895562166663, sigmaB = 0.04180264914581472, muA = 4.603239612477619E-5, sigmaA = 2.3092919283255957E-4, tMin = 0.0, muGMin = 2.3016198062388096E-5, sigmaG = 5.754049515597024E-6, cMax1 = 1252, cMax2 = 322, cMax = 322, cOutMin = 322, varOutMin = 0.0017292260645147487, muG(cOutMin) = 2.3034259031465023E-5, U(cOutMin) = 0.002363416110812895&lt;/pre&gt;

&lt;p&gt;Like you can perhaps see when you use this framework, it gives you some warnings when by example you have extreme outliers that can make the standard deviation completely false.&lt;/p&gt;
&lt;p&gt;You can download this framework on &lt;a href="http://www.ellipticgroup.com/html/benchmarkingArticle.html"&gt;the web page of the Elliptic Group&lt;/a&gt;. I found it really powerful and easy to use and I'll use it everytime I have to do a benchmark.&lt;/p&gt;
&lt;p&gt;To conclude, I must also say that even if you use that kind of framework, you can make very bad benchmarks if you don't test the right part of the code. Here are two really interesting articles from Brent Boyer :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/java/library/j-benchmark1.html" target="_blank"&gt;Robust Java benchmarking, Part 1: Issues&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/java/library/j-benchmark2/index.html" target="_blank"&gt;Robust Java benchmarking, Part 2: Statistics and solutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>Benchmarks</category><category>Java</category><category>Libraries</category><category>Performances</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/04/write-corrects-benchmarks.html</guid><pubDate>Mon, 26 Apr 2010 04:49:45 GMT</pubDate></item><item><title>Maven 3.0 Beta 1 is here !</title><link>http://baptiste-wicht.com/posts/2010/04/maven-3-0-beta-1-is-here.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;The Maven team has just announced the release of &lt;strong&gt;Maven 3.0-beta-1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There is still several things to do for the final releases, but Maven 3 is now ready to go from Alpha to Beta.&lt;/p&gt;
&lt;p&gt;If you're interested on migrating to this new version, you should have a look at this page from the Maven site : &lt;a href="http://cwiki.apache.org/MAVEN/maven-3x-compatibility-notes.html" target="_blank"&gt;Maven 3 Compatibility Notes&lt;/a&gt;. This page lists all the known differences between Maven 2 and Maven 3 for compatibility purpose.&lt;/p&gt;
&lt;p&gt;Some news of Maven 3 :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Complete Kernel Rewriting&lt;/li&gt;
    &lt;li&gt;New languages for POM : YAML and Groovy&lt;/li&gt;
    &lt;li&gt;POM Composition&lt;/li&gt;
    &lt;li&gt;Extensibility : Easier to create plugins extending an other plugin&lt;/li&gt;
    &lt;li&gt;Create the build at start and not step by step&lt;/li&gt;
    &lt;li&gt;Mercury for repositories and dependencies access&lt;/li&gt;
    &lt;li&gt;Maven Shell : Shell environment to execute Maven commands&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can download it &lt;a href="http://maven.apache.org/download.html" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><category>Apache</category><category>Java</category><category>Maven</category><category>Releases</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/04/maven-3-0-beta-1-is-here.html</guid><pubDate>Sat, 24 Apr 2010 02:16:08 GMT</pubDate></item><item><title>JetBrains has released IntelliJ IDEA 9.0.2</title><link>http://baptiste-wicht.com/posts/2010/04/jetbrains-released-intellij-idea-9-0-2.html</link><dc:creator>Baptiste Wicht</dc:creator><description>&lt;p&gt;IntelliJ Idea 9.0.2&lt;span style="font-weight: normal;"&gt; has just been released. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This version includes these new features and improvements : &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;View vertical indent guides&lt;/li&gt;
    &lt;li&gt;New action "Show in Explorer" from the contextual menu&lt;/li&gt;
    &lt;li&gt;The detection of the necessity of rebuild project indexes has been improved&lt;/li&gt;
    &lt;li&gt;Some code samples have been added for Java, JavaScript and PHP&lt;/li&gt;
    &lt;li&gt;The source can be directly attached to decompiled class file from the edit window&lt;/li&gt;
    &lt;li&gt;The Java debugger supports autoboxing&lt;/li&gt;
    &lt;li&gt;A diff tool for UML&lt;/li&gt;
    &lt;li&gt;New consoles for SQL and HQL&lt;/li&gt;
    &lt;li&gt;Improvements of the Spring configuration file editor view&lt;/li&gt;
    &lt;li&gt;Improvements of the remote projects support&lt;/li&gt;
    &lt;li&gt;Stacktrace folding for Groovy code&lt;/li&gt;
    &lt;li&gt;Support of GWT 2.0 UIBinder&lt;/li&gt;
    &lt;li&gt;Package Adobe AIR applications&lt;/li&gt;
    &lt;li&gt;Better support of CSS3&lt;/li&gt;
    &lt;li&gt;Tracking of Grails 1.2 Ivy dependencies&lt;/li&gt;
    &lt;li&gt;Flex
&lt;ul&gt;
    &lt;li&gt;Live templates for Flex&lt;/li&gt;
    &lt;li&gt;Parralel compilation of indenpendent Flex modules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;PHP
&lt;ul&gt;
    &lt;li&gt;New options for code style programming&lt;/li&gt;
    &lt;li&gt;New inspections&lt;/li&gt;
    &lt;li&gt;New quickfixes and intentions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;You can view the&lt;a href="http://confluence.jetbrains.net/display/IDEADEV/IDEA+9.0.2+Release+Notes"&gt; complete release notes  of this new version&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is no great new features, but the bug fixes and little enhancements make that version really interesting (like all new versions of IntelliJ IDEA).&lt;/p&gt;</description><category>IntelliJ Idea</category><category>Java</category><category>Releases</category><category>Tools</category><guid>http://baptiste-wicht.com/posts/2010/04/jetbrains-released-intellij-idea-9-0-2.html</guid><pubDate>Wed, 21 Apr 2010 14:34:30 GMT</pubDate></item></channel></rss>