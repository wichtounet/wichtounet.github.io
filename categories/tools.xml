<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>@Blog("Baptiste Wicht") (Tools)</title><link>http://www.baptiste-wicht.com/</link><description></description><atom:link href="http://www.baptiste-wicht.com/categories/tools.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 16 Mar 2014 17:07:38 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>budgetwarrior 0.2.1 - Minor changes and Gentoo ebuild</title><link>http://www.baptiste-wicht.com/posts/2014/01/budgetwarrior-0-2-1-minor-changes-gentoo-ebuild.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I've released a new version of budgetwarrior, the release 0.2.1. budgetwarrior is a simple command line application to manage a personal budget.&lt;/p&gt;
&lt;p&gt;The version 0.2.1 contains several bug fixes about archived accounts and bug fixes for budget across several years.&lt;/p&gt;
&lt;p&gt;The application as well as the source code is available online: &lt;a href="https://github.com/wichtounet/budgetwarrior"&gt;https://github.com/wichtounet/budgetwarrior&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've created Gentoo ebuilds for this application. They are available on my Portage overlay: &lt;a href="https://github.com/wichtounet/portage-overlay"&gt;https://github.com/wichtounet/portage-overlay&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Gentoo Installation&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Edit overlays section of /etc/layman/layman.cfg. Here's an example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;overlays: http://www.gentoo.org/proj/en/overlays/repositories.xml
           http://github.com/wichtounet/portage-overlay/raw/master/repository.xml&lt;/code&gt;
&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;Sync layman&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;layman -S&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Add the overlay:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;layman -a wichtounet&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Install budgetwarrior&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;emerge budgetwarrior&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;If you find any issues with the tool, don't hesitate to post an issue on Github. If you have comments about it, you can post a comment on this post or contact me by email. &lt;/p&gt;&lt;/div&gt;</description><category>budgetwarrior</category><category>Gentoo</category><category>Linux</category><category>Linux</category><category>Tools</category><guid>http://www.baptiste-wicht.com/posts/2014/01/budgetwarrior-0-2-1-minor-changes-gentoo-ebuild.html</guid><pubDate>Thu, 16 Jan 2014 12:41:00 GMT</pubDate></item><item><title>CMake Testing - Rerun the last failed tests with CTest</title><link>http://www.baptiste-wicht.com/posts/2012/12/cmake-rerun-last-failed-tests-ctest.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Some time ago, we saw &lt;a href="http://www.baptiste-wicht.com/2012/10/run-boost-test-parallel-cmake/" title="Run your Boost Tests in parallel with CMake"&gt;how to use CMake to run Boost Tests in paralel&lt;/a&gt;, now it is time for another tip. &lt;/p&gt;
&lt;p&gt;A feature that I think is lacking in CMake/CTest is a way to launch only the last failed tests. As it is not possible to do that directly, I posted &lt;a href="http://stackoverflow.com/q/13547175/802362" title="How to rerun the failed tests with ctest?"&gt;the question on StackOverflow&lt;/a&gt; and got a great answer from &lt;a href="http://stackoverflow.com/users/424459/fraser" title="Fraser"&gt;Fraser&lt;/a&gt;. I wanted to share its answer. &lt;/p&gt;
&lt;p&gt;CTest has -I option to select a list of tests to run. The idea here is to convert the log of CTest in format readable by CTest. What I think is great in its answer is that the solution is a CMake script: &lt;/p&gt;
&lt;p&gt;[code]set(FailedFileName FailedTests.log)&lt;/p&gt;
&lt;p&gt;if(EXISTS "Testing/Temporary/LastTestsFailed.log")
  file(STRINGS "Testing/Temporary/LastTestsFailed.log" FailedTests)
  string(REGEX REPLACE "([0-9]+):[^;]*" "\1" FailedTests "${FailedTests}")
  list(SORT FailedTests)
  list(GET FailedTests 0 FirstTest)
  set(FailedTests "${FirstTest};${FirstTest};;${FailedTests};")
  string(REPLACE ";" "," FailedTests "${FailedTests}")
  file(WRITE ${FailedFileName} ${FailedTests})
else()
  file(WRITE ${FailedFileName} "")
endif()[/code]&lt;/p&gt;
&lt;p&gt;This test just transforms one file into another. &lt;/p&gt;
&lt;p&gt;You can then run the last failing tests using: &lt;/p&gt;
&lt;p&gt;[bash]cmake -P &amp;lt;the script&amp;gt;&lt;/p&gt;
&lt;p&gt;ctest -I FailedTests.log[/bash]&lt;/p&gt;
&lt;p&gt;Very easy, isn't it ? &lt;/p&gt;
&lt;p&gt;There is a limitation to this solution. It won't work when CTest is running in dashboard mode, but it wouldn't take too long to adapt it for that. &lt;/p&gt;
&lt;p&gt;Hope you found that tip useful. &lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>cmake</category><category>Tests</category><category>Tools</category><guid>http://www.baptiste-wicht.com/posts/2012/12/cmake-rerun-last-failed-tests-ctest.html</guid><pubDate>Thu, 06 Dec 2012 08:47:12 GMT</pubDate></item><item><title>Use CMake to easily compiles Latex documents into PDF</title><link>http://www.baptiste-wicht.com/posts/2012/09/cmake-compile-latex-documents.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Everyone who compiles Latex documents by hand knows that it is not a panacea. You have to compile the file several times to handle the references. Moreover, if you have a glossary or an index, you have to run others commands between Latex commands so that everything is correctly resolved. The better way to handle Latex compilation is to write a MakeFile compiling each part. However, writing a Latex MakeFile by hand is not easy and especially not interesting. &lt;/p&gt;
&lt;p&gt;Using CMake for most of my development projects, I tried to find a CMake script to generates a MakeFile easily. I did found a good script for that, but I wanted to add some features and change some things, so I forked it to Github: &lt;a href="https://github.com/wichtounet/CMakeLatex" title="CMakeLatex Github repository"&gt;The CMakeLatex repository&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Here is an example using all the features of the script for one of my Latex documents. &lt;/p&gt;
&lt;p&gt;[bash]PROJECT(master_project NONE)&lt;/p&gt;
&lt;p&gt;cmake_minimum_required(VERSION 2.8)&lt;/p&gt;
&lt;p&gt;SET(LATEX_OUTPUT_PATH build)&lt;/p&gt;
&lt;p&gt;INCLUDE(UseLATEX.cmake)&lt;/p&gt;
&lt;p&gt;file(GLOB_RECURSE contents_files RELATIVE ${CMAKE_SOURCE_DIR} contents/*.tex)&lt;/p&gt;
&lt;p&gt;ADD_LATEX_DOCUMENT(
    master.tex
    INPUTS ${contents_files}
    IMAGE_DIRS images
    BIBFILES bibliography.bib
    USE_INDEX
    USE_GLOSSARY
    FILTER_OUTPUT
    )
[/bash]&lt;/p&gt;
&lt;p&gt;To use it, you have to download the files of the repository and put them aside your Latex files (or just make symlinks to the files in a clone of the repository for easy update). Then, the &lt;em&gt;UseLATEX.cmake&lt;/em&gt; file has to be included in your CMakeLists.txt file. &lt;/p&gt;
&lt;p&gt;I think that it is a good practice to generates the Latex files in another directory. This directory can be set using the &lt;em&gt;LATEX_OUTPUT_PATH&lt;/em&gt; variable. &lt;/p&gt;
&lt;p&gt;Then, to add a latex document, you can use the &lt;em&gt;ADD_LATEX_DOCUMENT&lt;/em&gt; function. The first parameter is the name of the main Latex file. After that, you have to give several parameters: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;INPUTS: It needs the list of Latex files that are included in master file. I use the GLOB_RECURSE function to find all of them in a contents subfolder. &lt;/li&gt;
    &lt;li&gt;IMAGE_DIRS: The directory where the image are stored. They will be copied to the build folder and automatically converted if necessary. &lt;/li&gt;
    &lt;li&gt;BIBFILES: If you have a bibliography, you just have to list all the .bib files of your project. &lt;/li&gt;
    &lt;li&gt;USE_INDEX: Necessary only if your document use an index. &lt;/li&gt;
    &lt;li&gt;USE_GLOSSARY: Necessary only if your document use a glossary. &lt;/li&gt;
    &lt;li&gt;FILTER_OUTPUT: This option activates the filtering of pdflatex output to the console. For now, the option is quite limited, but it allows you to have a smoother output. It has to be taken into account that this option hides the overflow and underflow warnings. &lt;/li&gt;
    &lt;li&gt;CONFIGURE: You can use the CMake configuration feature on some of your files if you want CMake variables to be replaced in the documents. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once your Latex document is configured, you can just run cmake on your project. After that, you can use targets to generate pdf: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;make pdf: This will generate the Latex file using several passes and running all the necessary commands. &lt;/li&gt;
    &lt;li&gt;make fast: This will generate a pdf in only one pass. This can be useful if you want to see a rough draft of your document quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I already use this script for several of my documents. I hope that it will be useful for some of you. If you want any problem in the script or in the generate make file or if you have an idea for improvement, don't hesitate to let a command or to publish an Issue or a Pull Request in &lt;a href="https://github.com/wichtounet/CMakeLatex" title="CMakeLatex Github repository"&gt;the CMakeLatex repository&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This script only support pdflatex and can only generates pdf directly. If you want latex support with dvi/ps/pdf generation, you should take a look at the original project:  &lt;a href="http://public.kitware.com/Wiki/CMakeUserUseLATEX" title="CMakeUserUseLATEX"&gt;CMakeUserUseLATEX&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>cmake</category><category>Latex</category><category>Others</category><category>Tools</category><guid>http://www.baptiste-wicht.com/posts/2012/09/cmake-compile-latex-documents.html</guid><pubDate>Mon, 24 Sep 2012 09:07:33 GMT</pubDate></item><item><title>Architexa is available for free - Understand your code base</title><link>http://www.baptiste-wicht.com/posts/2012/08/architexa-free-understand-code-base.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;strong&gt;Architexa&lt;/strong&gt; is a tool suite that helps a team to document collaboratively a large Java code base. The tool is made for a whole team to understand a code base. The tool is available as an Eclipse plugin.
&lt;p&gt;When several developers are working on a large application, it is not always simple to have a whole view of the application. Even with some documentation of the application code. It is even harder for a new developer that joins the project to know what the code base is about. In all these cases, Architexa will help your team. It can also be useful when you inherit an application.&lt;/p&gt;
&lt;p&gt;Starting from today, &lt;strong&gt;Architexa is available for free&lt;/strong&gt; &lt;strong&gt;for individuals and for teams of up to three developers&lt;/strong&gt;. You can read the official announce at the end of the article.&lt;/p&gt;
&lt;h4&gt;My Review of Architexa&lt;/h4&gt;

&lt;p&gt;I tried Architexa on several of my current Java Projects, but never in team. So perhaps my point of view is not very accurate regarding to general users of the tool. I made my tests using Eclipse Juno.&lt;/p&gt;
&lt;p&gt;However, even when working alone on a project, I think that this tool is very useful.&lt;/p&gt;
&lt;p&gt;The installation is very straightforward, you just have to use the update site directly in Eclipse. Then, you have several new options in the EDI to use Architexa features.&lt;/p&gt;
&lt;p&gt;Three diagrams are available in the Architexa tool suite:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Class Diagram&lt;/strong&gt; : This diagram can be automatically generated for a package, or several packages.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Sequence Diagram&lt;/strong&gt; : You can create Sequence Diagrams for some of your program actions.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Layered Diagram&lt;/strong&gt; : This diagram allows you to represent the architecture of your application. The system allows you to represent several levels of details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can easily have several diagrams of each type in your project. You can store them as local files, in a server or in the community server to make them available for everyone.&lt;/p&gt;
&lt;p&gt;You can add comment in each diagram. In each diagram you can also access the Javadoc of each class. Of course, you can also access any piece of code from your diagrams.&lt;/p&gt;
&lt;h4&gt;Advantages&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;Architexa is very simple to use. The tool have access to very good guides directly inside the IDE.&lt;/li&gt;
    &lt;li&gt;The Real-Time Code analysis is awesome. Once something is in a diagram, it is always kept up to date.&lt;/li&gt;
    &lt;li&gt;The sharing features are also great.&lt;/li&gt;
    &lt;li&gt;Even if there are fews diagrams, I think that there are largely enough to have a very good understanding of a code base.&lt;/li&gt;
    &lt;li&gt;All the graphs looks very nice, there are very readable&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Drawbacks&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;No support for generics and enums.&lt;/li&gt;
    &lt;li&gt;The tool is only available as an Eclipse plugin. I'm especially using IntelliJ Idea and NetBeans.&lt;/li&gt;
    &lt;li&gt;The tool is only available for Java. There is a prototype for C/C++ that is available on demand, but I didn't tried it at the current time.&lt;/li&gt;
    &lt;li&gt;Sometimes, the creation of a very simple diagram takes a bit long time for my feeling. Creating a diagram with three elements can take several seconds. Perhaps, it is better with larger diagrams. I haven't had the occasion to test it with large code .&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;To conclude, Architexa is a great tool suite. It is useful for any Java developers that works in a large application. It allows them to have better understanding of its code base.&lt;/p&gt;
&lt;p&gt;The official announce: &lt;a title="Architexa Toolsuite is Now Available for Free" href="http://www.architexa.com/blog/architexa-toolsuite-is-now-available-for-free/"&gt;Architexa Tool suite is Now Available for Free&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More information on the official site: &lt;a href="http://www.architexa.com/"&gt;http://www.architexa.com/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Conception</category><category>Java</category><category>Java</category><category>Tools</category><guid>http://www.baptiste-wicht.com/posts/2012/08/architexa-free-understand-code-base.html</guid><pubDate>Wed, 22 Aug 2012 05:00:37 GMT</pubDate></item><item><title>taskwarrior-php 0.1 : A simple PHP Frontend for Taskwarrior</title><link>http://www.baptiste-wicht.com/posts/2012/07/taskwarrior-php-frontend-0-1.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I released the version 0.1 of &lt;strong&gt;taskwarrior-php&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This project is a simple PHP Frontend for Taskwarrior. For now, the frontend is quite basic. All the tasks are displayed and sorted by projects. The completion of each project is also computed.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/?attachment_id=2035" rel="attachment wp-att-2035"&gt;&lt;img class="size-medium wp-image-2035" title="taskwarrior-php Screenshot" src="http://www.baptiste-wicht.com/wp-content/uploads/2012/07/taskwarrior-php-1-300x271.png" alt="taskwarrior-php Screenshot" width="300" height="271"&gt;&lt;/a&gt; taskwarrior-php Screenshot&lt;/p&gt;
&lt;p&gt;You can also insert a new task. For now, only the project and the description of the task can be modified.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Download&lt;/h3&gt;
&lt;p&gt;The application is available on the Git repository : &lt;a href="https://github.com/wichtounet/taskwarrior-php"&gt;https://github.com/wichtounet/taskwarrior-php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The installation is simple, you just have to put all the files in a folder of a PHP server. Then, you have to edit the config.php to set the location of your Taskwarrior files.&lt;/p&gt;
&lt;p&gt;It is necessary that the Taskwarrior files are on the PHP server as well. For that, you can use the FTP pull and push commands of Taskwarrior.&lt;/p&gt;
&lt;p&gt;Don't hesitate to contact me if you have some ideas for this project or if you find some bugs.&lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>Releases</category><category>Tools</category><category>Web</category><category>Web</category><guid>http://www.baptiste-wicht.com/posts/2012/07/taskwarrior-php-frontend-0-1.html</guid><pubDate>Mon, 09 Jul 2012 09:21:14 GMT</pubDate></item><item><title>Install Valgrind on Gentoo Linux</title><link>http://www.baptiste-wicht.com/posts/2012/04/install-valgrind-on-gentoo-linux.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;strong&gt;Valgrind&lt;/strong&gt; is very powerful suite of software for dynamic analysis of binary programs. Valgrind is available in an ebuild on the Gentoo portage tree, but if you want to install valgrind on your Gentoo distribution, there is a problem with the build with the standard library. On Gentoo, the standard C library (glibc) is stripped and Valgrind needs the debug symbols to work. If you try to launch valgrind without the debug symbols, you will get the following error: 
&lt;blockquote&gt;valgrind:  Fatal error at startup: a function redirection

valgrind:  which is mandatory for this platform-tool combination

valgrind:  cannot be set up.  Details of the redirection are:

valgrind:  

valgrind:  A must-be-redirected function

valgrind:  whose name matches the pattern:      strlen

valgrind:  in an object with soname matching:   ld-linux-x86-64.so.2

valgrind:  was not found whilst processing

valgrind:  symbols from the object with soname: ld-linux-x86-64.so.2

valgrind:  

valgrind:  Possible fixes: (1, short term): install glibc's debuginfo

valgrind:  package on this machine.  (2, longer term): ask the packagers

valgrind:  for your Linux distribution to please in future ship a non-

valgrind:  stripped ld.so (or whatever the dynamic linker .so is called)

valgrind:  that exports the above-named function using the standard

valgrind:  calling conventions for this platform.

valgrind:  

valgrind:  Cannot continue -- exiting now.  Sorry.&lt;/blockquote&gt;

&lt;p&gt;So first, you have to activate the debug symbols for the libraries in your &lt;em&gt;/etc/make.conf&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;[bash]FEATURES="splitdebug"[/bash]&lt;/p&gt;
&lt;p&gt;Then, you can emerge again the glibc: &lt;/p&gt;
&lt;p&gt;[bash]sudo emerge glibc[/bash]&lt;/p&gt;
&lt;p&gt;If you already had emerged valgrind, there is no need to emerge it again, it should work now. &lt;/p&gt;
&lt;p&gt;And finally, you can emerge valgrind: &lt;/p&gt;
&lt;p&gt;[bash]sudo emerge valgrind[/bash]&lt;/p&gt;
&lt;p&gt;And everything will work fine. &lt;/p&gt;&lt;/div&gt;</description><category>Gentoo</category><category>Gentoo</category><category>Linux</category><category>Tools</category><guid>http://www.baptiste-wicht.com/posts/2012/04/install-valgrind-on-gentoo-linux.html</guid><pubDate>Fri, 13 Apr 2012 08:57:38 GMT</pubDate></item><item><title>Install the Insight Debugger on Linux Mint (works for Ubuntu too)</title><link>http://www.baptiste-wicht.com/posts/2012/01/install-insight-debugger-linux-mint-ubuntu.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Insight is a very good debugger based on gdb. I prefer it over ddd or kdbg as I find it clearer and easier to use. Moreover, this debugger is also the one used in the book &lt;strong&gt;Assembly language Step by Step, for Linux&lt;/strong&gt;. However, Insight has been removed from Debian packages already more than a year ago. &lt;/p&gt;
&lt;p&gt;But, thanks to SevenMachines, a PPA repository is available to install it on Linux Mint (works also on Ubuntu and Ubuntu-based Linux distributions). &lt;/p&gt;
&lt;p&gt;To add the repository to your apt sources, add the following lines to the /etc/apt/sources.list file:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;deb http://ppa.launchpad.net/sevenmachines/dev/ubuntu natty main 
&lt;p&gt;deb-src http://ppa.launchpad.net/sevenmachines/dev/ubuntu natty main &lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;and update your apt sources: &lt;/p&gt;
&lt;p&gt;[bash]sudo apt-get update[/bash]&lt;/p&gt;
&lt;p&gt;Then you can install insight: &lt;/p&gt;
&lt;p&gt;[bash]sudo apt-get install insight[/bash]&lt;/p&gt;
&lt;p&gt;And now you are ready to use Insight as your debugger. &lt;/p&gt;
&lt;p&gt;If you don't trust this PPA repository, you can also try it to install it from the sources (http://sources.redhat.com/insight/), but doesn't seem to very simple to install it. I wasn't able to build it on my Linux Mint 12. &lt;/p&gt;&lt;/div&gt;</description><category>Assembly</category><category>Assembly</category><category>C++</category><category>gcc</category><category>Linux</category><category>Mint</category><category>Tools</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2012/01/install-insight-debugger-linux-mint-ubuntu.html</guid><pubDate>Thu, 26 Jan 2012 09:28:41 GMT</pubDate></item><item><title>Google+ is now open to all</title><link>http://www.baptiste-wicht.com/posts/2011/09/google-is-open-to-all.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;After about 90 days of trial on invitation-only mode, &lt;a href="http://plus.google.com" title="Google+"&gt;Google+&lt;/a&gt; is now open to everybody. &lt;/p&gt;
&lt;p&gt;For those who don't know, Google+ is the social network platform of Google, with several interesting features like Circles, Hangouts, ...&lt;/p&gt;
&lt;p&gt;For example, you can &lt;a href="https://plus.google.com/103113673902796202116/" title="My Page on Google+"&gt;see my page on Google+&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Personally, I find this social network very interesting, but there are not enough people on it to concurrence really Facebook and the others networks. Don't hesitate to give it a try, it's worth it!&lt;/p&gt;&lt;/div&gt;</description><category>Google</category><category>Tools</category><category>Web</category><category>Web</category><guid>http://www.baptiste-wicht.com/posts/2011/09/google-is-open-to-all.html</guid><pubDate>Thu, 22 Sep 2011 14:50:53 GMT</pubDate></item><item><title>How to profile C++ application with Callgrind / KCacheGrind</title><link>http://www.baptiste-wicht.com/posts/2011/09/profile-c-application-with-callgrind-kcachegrind.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I have shown before how to &lt;a title="Profile a C++ application with the Linux perf tools" href="http://www.baptiste-wicht.com/2011/07/profile-applications-linux-perf-tools/"&gt;profile a C++ application using the Linux perf tools&lt;/a&gt;.  In this post, we will see how to profile the same kind of application using Callgrind. Callgrind is a tool in part of the Valgrind toolchain. It is running in Valgrind framework. The principle is not the same. When you use Callgrind to profile an application, your application is transformed in an intermediate language and then ran in a virtual processor emulated by valgrind. This has a huge run-time overhead, but the precision is really good and your profiling data is complete. An application running in Callgrind can be 10 to 50 times slower than normally.&lt;/p&gt;
&lt;p&gt;The output of Callgrind is flat cal graph that is not really usable directly. In this post, we will use KCachegrind to display the informations about the profiling of the analyzed application.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;First of all, you need to install Callgrind and KCachegrind. You also need to install graphviz in order to view the call graph in KCachegrind. The applications are already packaged for the most important Linux distributions. You can just use apt-get to install them:&lt;/p&gt;
&lt;p&gt;[bash]sudo apt-get install valgrind kcachegrind graphviz[/bash]&lt;/p&gt;
&lt;p&gt;or aptitude:&lt;/p&gt;
&lt;p&gt;[bash]sudo aptitude install valgrind kcachegrind graphviz[/bash]&lt;/p&gt;
&lt;p&gt;or whatever your favourite package manager is.&lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;

&lt;p&gt;We have to start by profiling the application with Callgrind. To profile an application with Callgrind, you just have to prepend the Callgrind invocation in front of your normal program invocation:&lt;/p&gt;
&lt;p&gt;[bash]valgrind --tool=callgrind program [program_options][/bash]&lt;/p&gt;
&lt;p&gt;The result will be stored in a callgrind.out.XXX file where XXX will be the process identifier. &lt;/p&gt;
&lt;p&gt;You can read this file using a text editor, but it won't be very useful because it's very cryptic. That's here that KCacheGrind will be useful. You can launch KCacheGrind using command line or in the program menu if your system installed it here. Then, you have to open your profile file. &lt;/p&gt;
&lt;p&gt;The first view present a list of all the profiled functions. You can see the inclusive and the self cost of each function and the location of each one. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/first-view2.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/first-view2-300x212.png" alt="" title="List of functions" width="300" height="212" class="size-medium wp-image-1322"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you click on a function, the other views are filled with information. The view in uppper right part of the window gives some information about the selected function. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/second-view.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/second-view-300x166.png" alt="Information about the function" title="Information about the function" width="300" height="166" class="size-medium wp-image-1323"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The view have several tabs presenting different information: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Types : Present the types of events that have been recorded. In our case, it's not really interesting, it's just the number of instructions fetch&lt;/li&gt;
    &lt;li&gt;Callers : List of the direct callers&lt;/li&gt;
    &lt;li&gt;All Callers : List of all the callers, it seems the callers and the callers of the callers&lt;/li&gt;
    &lt;li&gt;Callee Map : A map of the callee, personally, I do not really understand this view, but it's a kind of call graph representing the cost of the functions&lt;/li&gt;
    &lt;li&gt;Source code : The source code of the function if the application has been compiled with the debug symbol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, you have another view with data about the selected function. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/third-view.png"&gt;&lt;img src="http://www.baptiste-wicht.com/wp-content/uploads/2011/09/third-view-300x208.png" alt="Information about the function" title="Information about the function" width="300" height="208" class="size-medium wp-image-1324"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Again, several tabs: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Callees : The direct callees of the function&lt;/li&gt;
    &lt;li&gt;Call Graph : The call graph from the function to the end&lt;/li&gt;
    &lt;li&gt;All Callees : All the callees and the callees of the callees&lt;/li&gt;
    &lt;li&gt;Caller Map : The map of the caller, again not really understandable for me&lt;/li&gt;
    &lt;li&gt;Machine Code : The machine code of the function if the application has been profiled with --dump-instr=yes option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have also several display options and filter features to find exactly what you want and display it the way you want. &lt;/p&gt;
&lt;p&gt;The information provided by KCacheGrind can be very useful to find which functions takes too much time or which functions are called too much. &lt;/p&gt;
&lt;p&gt;I hope this article will be useful. &lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>C++</category><category>Linux</category><category>Performances</category><category>Tools</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2011/09/profile-c-application-with-callgrind-kcachegrind.html</guid><pubDate>Thu, 01 Sep 2011 08:25:10 GMT</pubDate></item><item><title>How to compute metrics of C++ project using CCCC</title><link>http://www.baptiste-wicht.com/posts/2011/08/compute-metrics-of-c-project-using-cccc.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CCCC (C and C++ Code Counter) is a little command-line tool that generates metrics from the source code of a C or C++ project. The output of the tool is a simple HTML website with information about all your sources.&lt;/p&gt;
&lt;p&gt;CCCC generates not only information about the number of lines of codes for each of your modules, but also complexity metrics like the McCabe Cyclomatic Complexity level of your modules and functions, design metrics like the coupling between the modules or object oriented metrics like the depth of inheritance tree for each of your classes, ...&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;On some Linux systems, cccc is already packaged, so you just have to use your favourite package manager to install it. On Ubuntu, I used :&lt;/p&gt;
&lt;p&gt;[bash]sudo apt-get install cccc[/bash]&lt;/p&gt;
&lt;p&gt;to install it. If the tool is not packaged for your system, you can download it &lt;a title="CCCC SourceForge page" href="http://sourceforge.net/projects/cccc/" target="_blank"&gt;here&lt;/a&gt;. Then, you have run the build script :&lt;/p&gt;
&lt;p&gt;[bash]sh build_posixgcc.sh[/bash]&lt;/p&gt;
&lt;p&gt;and you will find a &lt;em&gt;cccc&lt;/em&gt; executable in the &lt;em&gt;cccc&lt;/em&gt; folder. You can just put the executable in your path or use it using the absolute path. &lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;

&lt;p&gt;The usage of the tool is really easy. You just have to invoke it passing all the sources files you want to parse as arguments. For example: &lt;/p&gt;
&lt;p&gt;[bash]cccc src/&lt;em&gt;.cpp include/&lt;/em&gt;.hpp[/bash]&lt;/p&gt;
&lt;p&gt;And the site will be generated in a &lt;em&gt;.cccc&lt;/em&gt; folder in the current folder. You can also specify the output directory using the &lt;em&gt;--outdir=folder&lt;/em&gt; option. &lt;/p&gt;
&lt;p&gt;The main entry of the HTML generated website is the &lt;em&gt;cccc.html&lt;/em&gt; file. As an example, I uploaded the metrics of the compiler of the EDDI language &lt;a href="http://baptiste-wicht.com/cccc/eddic/cccc.html" title="Metrics for the EDDI Compiler" target="_blank"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;You can find more information about the tool on the official website : &lt;a href="http://cccc.sourceforge.net/" title="Official website of the CCCC project" target="_blank"&gt;http://cccc.sourceforge.net/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>C++</category><category>Linux</category><category>Tools</category><category>Ubuntu</category><guid>http://www.baptiste-wicht.com/posts/2011/08/compute-metrics-of-c-project-using-cccc.html</guid><pubDate>Tue, 02 Aug 2011 09:18:53 GMT</pubDate></item></channel></rss>