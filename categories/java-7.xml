<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>@Blog("Baptiste Wicht") (Java 7)</title><link>http://wichtounet.github.io/</link><description></description><atom:link type="application/rss+xml" href="http://wichtounet.github.io/categories/java-7.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 16 Mar 2014 20:01:17 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Java 7 has been released!</title><link>http://wichtounet.github.io/posts/2011/07/java-7-has-been-released.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Five years after Java 6, Oracle has just released Java 7!&lt;/p&gt;
&lt;p&gt;This is the first release of Java since Oracle bought Sun Microsystems.&lt;/p&gt;
&lt;p&gt;This new version of Java introduces a lot of new features, but some of the languages new features will be introduced in Java 8 &lt;a title="Java 7 delays and Plan B" href="http://www.baptiste-wicht.com/2010/09/java-7-delays-and-plan-b/"&gt;as stated by the "Plan B"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this version, there some great new language features, as stated by the JSR 334 :&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;Strings in switch&lt;/li&gt;
    &lt;li&gt;Binary integral literals and underscores in numeric literals&lt;/li&gt;
    &lt;li&gt;&lt;a title="Better exception handling in Java 7 : Multicatch and precise rethrow" href="http://www.baptiste-wicht.com/2010/05/better-exception-handling-in-java-7-multicatch-and-final-rethrow/"&gt;Multi-catch and more precise rethrow&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Improved Type Inference for Generic Instance Creation (diamond)&lt;/li&gt;
    &lt;li&gt;&lt;a title="Java 7 : try with resources statement" href="http://www.baptiste-wicht.com/2010/08/java-7-try-with-resources-statement/"&gt;try-with-resources statement&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Simplified Varargs Method Invocation&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;We will also see &lt;a title="Java 7 : New I/O Features with NIO.2" href="http://www.baptiste-wicht.com/2010/04/java-7-new-io-features-asynchronous-operations-multicasting-random-access-with-jsr-203-nio-2/"&gt;the new NIO.2 API &lt;/a&gt;(specified by the JSR 203).&lt;/div&gt;

&lt;p&gt;A new bytecode instruction has been added to the virtual machine, &lt;a title="Java 7 : More dynamics" href="http://www.baptiste-wicht.com/2010/04/java-7-more-dynamics/"&gt;InvokeDynamic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can &lt;a title="Download Java 7 on Oracle website" href="http://www.oracle.com/technetwork/java/javase/downloads/index.html"&gt;download Java SE 7&lt;/a&gt; on the Oracle website.&lt;/p&gt;
&lt;p&gt;I think it was time now for Java to have a new version with some refreshing, and it's IMO a good new version that we have now. I just hope that the next version,  Java 8, will be here in less than five years to &lt;a title="Oracle pushes a first version of the closures" href="http://www.baptiste-wicht.com/2010/05/oracle-pushes-a-first-version-of-closures/"&gt;give us the closures&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>Java</category><category>Java 7</category><guid>http://wichtounet.github.io/posts/2011/07/java-7-has-been-released.html</guid><pubDate>Thu, 28 Jul 2011 13:46:53 GMT</pubDate></item><item><title>JDK 7 Features updated ! Plan B has apparently been approved</title><link>http://wichtounet.github.io/posts/2010/09/jdk-7-features-updated-plan-b-is-apparently-here.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I was presenting the &lt;strong&gt;Plan B&lt;/strong&gt; of &lt;strong&gt;JDK 7&lt;/strong&gt; the last week and apparently, this plan has been approved.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://openjdk.java.net/projects/jdk7/features/" target="_blank"&gt;JDK 7 Features page&lt;/a&gt; has been updated on the site of &lt;strong&gt;Oracle&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So here are the (definitive ?) list of features for JDK 7 :&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;JSR 292: Support for dynamically-typed languages (InvokeDynamic)&lt;/li&gt;
    &lt;li&gt;Languages update of the project Coin&lt;/li&gt;
    &lt;li&gt;Concurrency and collections updates (jsr166y)&lt;/li&gt;
    &lt;li&gt;ionet   JSR 203: More new I/O APIs for the Java platform (NIO.2)&lt;/li&gt;
    &lt;li&gt;SCTP (Stream Control Transmission Protocol)&lt;/li&gt;
    &lt;li&gt;SDP (Sockets Direct Protocol)&lt;/li&gt;
    &lt;li&gt;Elliptic-curve cryptography (ECC)&lt;/li&gt;
    &lt;li&gt;client  XRender pipeline for Java 2D&lt;/li&gt;
    &lt;li&gt;Create new platform APIs for 6u10 graphics features&lt;/li&gt;
    &lt;li&gt;Nimbus look-and-feel for Swing&lt;/li&gt;
    &lt;li&gt;Swing JLayer component&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we can also see that there is some new features that we doesn't have seen before:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;TLS 1.2&lt;/li&gt;
    &lt;li&gt;JDBC 4.1&lt;/li&gt;
    &lt;li&gt;Unicode 6.0&lt;/li&gt;
    &lt;li&gt;Locale enhancement&lt;/li&gt;
    &lt;li&gt;Separate user locale and user-interface locale&lt;/li&gt;
    &lt;li&gt;NIO.2 filesystem provider for zip/jar archives&lt;/li&gt;
    &lt;li&gt;Use the Windows Vista IPv6 stack when available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And after all that informations, we can see the features delayed to JDK 8 :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;JSR 294: Language and VM support for modular programming&lt;/li&gt;
    &lt;li&gt;JSR 308: Annotations on Java types&lt;/li&gt;
    &lt;li&gt;JSR TBD: Language support for collections [NEW]&lt;/li&gt;
    &lt;li&gt;JSR TBD: Project Lambda&lt;/li&gt;
    &lt;li&gt;Modularization (Project Jigsaw)&lt;/li&gt;
    &lt;li&gt;JSR 296: Swing application framework&lt;/li&gt;
    &lt;li&gt;Swing JDatePicker component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more informations and the complete list of features for the two versions of JDK, you can consult the &lt;a title="JDK 7 Features" href="http://openjdk.java.net/projects/jdk7/features/" target="_blank"&gt;JDK 7 Features&lt;/a&gt; page. There will certainly be some additional informations at JavaOne this week.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>Java</category><category>Java 7</category><category>Releases</category><guid>http://wichtounet.github.io/posts/2010/09/jdk-7-features-updated-plan-b-is-apparently-here.html</guid><pubDate>Mon, 20 Sep 2010 06:15:28 GMT</pubDate></item><item><title>Java 7 Delays and Plan B</title><link>http://wichtounet.github.io/posts/2010/09/java-7-delays-and-plan-b.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Mark Reinhold has posted a message about the planning of &lt;strong&gt;Java &lt;/strong&gt;7. In this message, he explains that the current schedule of the JDK 7 is completely unrealistic. This delay is due to the add of new projects (lambda, Coin, Jigsaw) and the acquisition of Sun by Oracle. &lt;/p&gt;
&lt;p&gt;The current estimate by the team is that the JDK7 can be complete for a release around the middle of 2012. &lt;/p&gt;
&lt;p&gt;But, Mark indicates a new option, the "Plan B". With this plan, the JDK7 will be available at mid 2011 without Jigsaw and Lambda and with only a portion of the Coin Project. And JDK8 will be released in late 2012 with the complete set of features scheduled actually for JDK7. &lt;/p&gt;
&lt;p&gt;Personnally, I think it's a good idea to separate the two releases and have a first release soon. Like Mark says, it makes a very long time that we don't have had a new Java release, so it will be interesting to have a light JDK7 before 2012. &lt;/p&gt;
&lt;p&gt;And you, what do you think ? &lt;/p&gt;
&lt;p&gt;Source : &lt;a target="_blank" href="http://blogs.sun.com/mr/entry/rethinking_jdk7"&gt;Re-thinking JDK7&lt;/a&gt;, by Mark Reinhold&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>Java</category><category>Java 7</category><category>Releases</category><guid>http://wichtounet.github.io/posts/2010/09/java-7-delays-and-plan-b.html</guid><pubDate>Thu, 09 Sep 2010 07:17:29 GMT</pubDate></item><item><title>Java File Copy Benchmark Updates (once again)</title><link>http://wichtounet.github.io/posts/2010/08/file-copy-benchmark-updates-once-again.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I've made another updates to my file copy benchmark.&lt;/p&gt;
&lt;p&gt;First of all, I used my &lt;a title="Utility class to create graphs of benchmark results" href="http://www.baptiste-wicht.com/2010/08/generate-graphs-benchmarks-easily/" target="_blank"&gt;little utility class to automatically create the graphs&lt;/a&gt;. The graph are a little less clean, but I spare a lot of time not creating them myself.&lt;/p&gt;
&lt;p&gt;Then, I've also made some corrections on the code :&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;I''ve used a buffer size of 8192 instead of 4096&lt;/li&gt;
    &lt;li&gt;I've made some corrections using the channels because the old code can forgot to write some portions of the file&lt;/li&gt;
    &lt;li&gt;I used allocateDirect() instead of allocate() for the ByteBuffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I've added a new method using Java 7 : Path.copyTo(Path path).&lt;/p&gt;
&lt;p&gt;So the new results are all based on a Java 7 Virtual Machine.&lt;/p&gt;
&lt;p&gt;You'll find all the new informations and result, on the original post : &lt;a title="Java File Copy Benchmark" href="http://www.baptiste-wicht.com/2010/08/file-copy-in-java-benchmark/" target="_self"&gt;File Copy in Java - Benchmark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope this new informations will interest you.&lt;/p&gt;&lt;/div&gt;</description><category>Benchmarks</category><category>I/O</category><category>Java</category><category>Java</category><category>Java 7</category><category>Performances</category><guid>http://wichtounet.github.io/posts/2010/08/file-copy-benchmark-updates-once-again.html</guid><pubDate>Wed, 25 Aug 2010 07:26:11 GMT</pubDate></item><item><title>Java 7 : The new try-with-resources statement</title><link>http://wichtounet.github.io/posts/2010/08/java-7-try-with-resources-statement.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;From the build 105, the compiler and runtime of Java 7 Releases have support for the new form of try : try-with-resources, also called ARM (Automatic Resource Management) blocks. &lt;/p&gt;
&lt;p&gt;This new statement make working with streams and all kind of closeable resources easier. By example, in Java, you can have this kind of code : &lt;/p&gt;
&lt;p&gt;[java]private static void customBufferStreamCopy(File source, File target) {
    InputStream fis = null;
    OutputStream fos = null;
    try {
        fis = new FileInputStream(source);
        fos = new FileOutputStream(target);&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;    &lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8192&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fis&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;private static void close(Closeable closable) {
    if (closable != null) {
        try {
            closable.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}[/java]&lt;/p&gt;
&lt;p&gt;A little bit heavy, isn't it ? This is only an example, here the management of exceptions is not good. &lt;/p&gt;
&lt;p&gt;So let's use try-with-resources statement to simplify this code, who becomes : &lt;/p&gt;
&lt;p&gt;[java]private static void customBufferStreamCopy(File source, File target) {
    try (InputStream fis = new FileInputStream(source);
        OutputStream fos = new FileOutputStream(target)){&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;    &lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8192&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}[/java]&lt;/p&gt;
&lt;p&gt;A lot cleaner, no ? With that code, the resources are automatically closed after the try. In the try resources list, you can declare several resources, but all these resources must implement the java.lang.AutoCloseable interface. &lt;/p&gt;
&lt;p&gt;If you want more informations, about this new statement read &lt;a target="_blank" href="http://blogs.sun.com/darcy/entry/project_coin_updated_arm_spec"&gt;try-with-resources specifications&lt;/a&gt;. &lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>Java 7</category><category>Others</category><category>Releases</category><guid>http://wichtounet.github.io/posts/2010/08/java-7-try-with-resources-statement.html</guid><pubDate>Tue, 24 Aug 2010 07:30:53 GMT</pubDate></item><item><title>State of the Lambda</title><link>http://wichtounet.github.io/posts/2010/07/state-of-the-lambda.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;strong&gt;Brian Goetz&lt;/strong&gt;, from Oracle, has posted an updated proposal for the &lt;strong&gt;lambda expressions&lt;/strong&gt; : &lt;a target="_blank" href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-2.html"&gt;State of the Lambda&lt;/a&gt;
&lt;p&gt;Here are some examples of closures taken from the proposal : &lt;/p&gt;
&lt;p&gt;We can use lambda expressions to replace the heavy usage of Single Abstract Method (SAM) interfaces : &lt;/p&gt;
&lt;p&gt;[java]public interface CallbackHandler { 
    public void callback(Context c);
}&lt;/p&gt;
&lt;p&gt;CallbackHandler cb = { c -&amp;gt; System.out.println("pippo") };[/java]&lt;/p&gt;
&lt;p&gt;We can make references to methods to use it as SAM interfaces : &lt;/p&gt;
&lt;p&gt;[java]class Person { 
    private final String name;
    private final int age;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;compareByAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;compareByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Person[] people = ...&lt;/p&gt;
&lt;p&gt;Arrays.sort(people, #Person.compareByAge);[/java]&lt;/p&gt;&lt;/div&gt;</description><category>Closures</category><category>Java</category><category>Java 7</category><guid>http://wichtounet.github.io/posts/2010/07/state-of-the-lambda.html</guid><pubDate>Thu, 15 Jul 2010 01:52:02 GMT</pubDate></item><item><title>Java 7 : Translucency and shaped windows</title><link>http://wichtounet.github.io/posts/2010/06/java-7-translucency-shaped-windows.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Java 7 introduces very interesting features for desktop windows :
&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Transclucency for windows&lt;/strong&gt; : Make a full window translucent with a specified alpha level&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Per pixel translucency&lt;/strong&gt; : Make a part of the window translucent.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Shaped windows&lt;/strong&gt; : You can now create windows with a certain shape, like circle, ovale, triangle, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll see all this features in that post. All the examples are tested in Windows Seven 64 bits, because the transclucency isn't supported in Ubuntu 10.04 at the time I write the article.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;First of all, you can now set the opacity of the window with the setOpacity(float opacity) of the Window class. With that, the entire window is made translucent. There is some limitations with that new method. An opacity less than 1.0 isn't supported if the window use full-screen mode or if the simple translucency isn't supported. You can test if the window transclucency is supported with the isWindowTranslucencySupported() method added to the GraphicsDevice class :&lt;/p&gt;
&lt;p&gt;[java]GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();&lt;/p&gt;
&lt;p&gt;if (ge.getDefaultScreenDevice().isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency.TRANSLUCENT)) {
    System.out.println("Window translucency isn't supported on your system. ");
}[/java]&lt;/p&gt;
&lt;p&gt;We know enough to write a first translucent window :&lt;/p&gt;
&lt;p&gt;[java]package com.wicht.java7.swing;&lt;/p&gt;
&lt;p&gt;import javax.swing.*;&lt;/p&gt;
&lt;p&gt;import javax.swing.event.ChangeEvent;&lt;/p&gt;
&lt;p&gt;import javax.swing.event.ChangeListener;&lt;/p&gt;
&lt;p&gt;import java.awt.*;&lt;/p&gt;
&lt;p&gt;public class TranslucentWindow extends JFrame {
    public TranslucentWindow() {
        super("Simple Translucency Demo");&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;    &lt;span class="n"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;setDefaultCloseOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_ON_CLOSE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;getRootPane&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setDoubleBuffered&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;setOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;setLocationRelativeTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SwingUtilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invokeLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;GraphicsEnvironment&lt;/span&gt; &lt;span class="n"&gt;ge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GraphicsEnvironment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLocalGraphicsEnvironment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDefaultScreenDevice&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;isWindowTranslucencySupported&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GraphicsDevice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowTranslucency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TRANSLUCENT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TranslucentWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}[/java]&lt;/p&gt;
&lt;p&gt;Note : We disable double buffering to remove artifacts that come when double buffer a translucent window.&lt;/p&gt;
&lt;p&gt;That produce this result on my computer :&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/05/TranslucentWindow.png"&gt;&lt;img class="size-full wp-image-610" title="Java 7 Translucent Window" src="http://wichtounet.github.io/wp-content/uploads/2010/05/TranslucentWindow.png" alt="Java 7 Translucent Window" width="300" height="200"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, it's really simple to make a window translucent. But there is more you can do. You can also make only a set of pixel translucent using their background color. Like the translucent window, there is some limitations, the window must not be in full-screen and the system must support the per pixel translucency. You can test it the same way as the first time :&lt;/p&gt;
&lt;p&gt;[java]GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();&lt;/p&gt;
&lt;p&gt;if (ge.getDefaultScreenDevice().isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSLUCENT)) {
    System.out.println("Window translucency isn't supported on your system. ");
}[/java]&lt;/p&gt;
&lt;p&gt;A simple making a grid of 16 panels more and more translucent :&lt;/p&gt;
&lt;p&gt;[java]package com.wicht.java7.swing;&lt;/p&gt;
&lt;p&gt;import javax.swing.*;&lt;/p&gt;
&lt;p&gt;import java.awt.*;&lt;/p&gt;
&lt;p&gt;import java.awt.event.ActionEvent;&lt;/p&gt;
&lt;p&gt;import java.awt.event.ActionListener;&lt;/p&gt;
&lt;p&gt;public class GriddedTranslucentWindow extends JFrame {
    public GriddedTranslucentWindow() {
        super("Java 7 Per Pixel Translucency");&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;    &lt;span class="n"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;320&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;getContentPane&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GridLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AlphaPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;setBackground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;setLocationRelativeTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SwingUtilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invokeLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;GraphicsEnvironment&lt;/span&gt; &lt;span class="n"&gt;ge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GraphicsEnvironment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLocalGraphicsEnvironment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDefaultScreenDevice&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;isWindowTranslucencySupported&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GraphicsDevice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowTranslucency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PERPIXEL_TRANSLUCENT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GriddedTranslucentWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;AlphaPanel&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;JPanel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;AlphaPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;setBackground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}[/java]&lt;/p&gt;
&lt;p&gt;That give me this kind of result :&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/05/PerPixelTranslucency1.png"&gt;&lt;img class="size-full wp-image-612" title="Java 7 : Per Pixel Translucency" src="http://wichtounet.github.io/wp-content/uploads/2010/05/PerPixelTranslucency1.png" alt="Java 7 : Per Pixel Translucency" width="284" height="279"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The example is very simple of course, but you can imagine doing a lot of things using that feature.&lt;/p&gt;
&lt;p&gt;And now a crazy new feature : shaped windows !&lt;/p&gt;
&lt;p&gt;Java 7 allows you to create Window of whatever shape you want. You can create circle, triangle, elliptic windows or more complex shape, a smiley by example. To do that, you have now access to the setShape(Shape shape)  method in the Window class. Like the other two, full screen mode is not allowed and the per pixel transparency must be supported by your computer :&lt;/p&gt;
&lt;p&gt;[java]GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();&lt;/p&gt;
&lt;p&gt;if (ge.getDefaultScreenDevice().isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSPARENT )) {
    System.out.println("Window translucency isn't supported on your system. ")[/java]pre&amp;gt;
Here is a little example combining a triangle and a circle :&lt;/p&gt;
&lt;p&gt;[java]package com.wicht.java7.swing;&lt;/p&gt;
&lt;p&gt;import javax.swing.*;&lt;/p&gt;
&lt;p&gt;import java.awt.*;&lt;/p&gt;
&lt;p&gt;import java.awt.geom.Ellipse2D;&lt;/p&gt;
&lt;p&gt;import java.awt.geom.GeneralPath;&lt;/p&gt;
&lt;p&gt;public class ShapedWindow extends JFrame {
    public ShapedWindow() {
        super("Shaped Window");&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;    &lt;span class="n"&gt;setUndecorated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dimension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;Polygon&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Polygon&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Ellipse2D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="n"&gt;theCircle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Ellipse2D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;GeneralPath&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GeneralPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;setShape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;getContentPane&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BoxLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContentPane&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;BoxLayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X_AXIS&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createHorizontalGlue&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;JLabel&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Shaped window"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setForeground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createHorizontalGlue&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="n"&gt;getContentPane&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setBackground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;setLocationRelativeTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SwingUtilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invokeLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;GraphicsEnvironment&lt;/span&gt; &lt;span class="n"&gt;ge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GraphicsEnvironment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLocalGraphicsEnvironment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDefaultScreenDevice&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;isWindowTranslucencySupported&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GraphicsDevice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowTranslucency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PERPIXEL_TRANSPARENT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TranslucentShapedWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}[/java]&lt;/p&gt;
&lt;p&gt;This produce that sort of window :&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/06/ShapedWindow.png"&gt;&lt;img class="size-full wp-image-615" title="Java 7 : Shaped Windows" src="http://wichtounet.github.io/wp-content/uploads/2010/06/ShapedWindow.png" alt="Java 7 : Shaped Windows" width="231" height="322"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And of course you can combine translucency and shaped windows adding setOpacity(0.5f) to your frame. For that the Per Pixel Translucency and the Per Pixel Transparency must be supported. That give us this kind of window :&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wichtounet.github.io/wp-content/uploads/2010/06/TranslucentShapedWindow.png"&gt;&lt;img class="size-full wp-image-616" title="Java 7 : Translucent Shaped Window" src="http://wichtounet.github.io/wp-content/uploads/2010/06/TranslucentShapedWindow.png" alt="Java 7 : Translucent Shaped Window" width="200" height="300"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here we are. We've now covered the new translucency features of Java 7. I think it's really interesting and make Java Desktop Applications more competitive. But I think there is still work to do in Swing before doing that kind of fun stuff.&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>Java</category><category>Java 7</category><category>Swing</category><guid>http://wichtounet.github.io/posts/2010/06/java-7-translucency-shaped-windows.html</guid><pubDate>Wed, 02 Jun 2010 06:32:11 GMT</pubDate></item><item><title>Java 7 : Add "public defender methods" to Java interfaces</title><link>http://wichtounet.github.io/posts/2010/05/java-7-add-public-defender-methods-to-java-interfaces.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;At this time, we aren't sure that the closures will be included in the Java 7 release. But these doubts have generated a new project : &lt;a href="http://cr.openjdk.java.net/~darcy/DefenderMethods.pdf" target="_blank"&gt;The "public defender methods" proposal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This new proposal for Java 7 wants to improve the interfaces allowing to add new methods to existing interfaces. The classes implementing the interfaces doesn't need implements these methods. The implementation of these methods are provided using static methods. This could be called virtual extension method.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;To illustrate the problem the proposal want to solve, let's take the example of reversing a List. When you have a List and you want to reverse it, you have to use the Collections.reverse() method :&lt;/p&gt;
&lt;p&gt;[java]List strings = new ArrayList();&lt;/p&gt;
&lt;p&gt;//...&lt;/p&gt;
&lt;p&gt;Collections.reverse(strings);[/java]&lt;/p&gt;
&lt;p&gt;But there is some problems with that code. Because it's a static method, there is no way to override it. We could imagine data structures where the reverse must be made using special algorithms to be efficient. An other problem is that the reverse() method is not in the List interface, so must learn two classes to make a simple thing as reversing a list.&lt;/p&gt;
&lt;p&gt;The "public defender methods" give an other way to do that extending the List interface :&lt;/p&gt;
&lt;p&gt;[java]public interface List extends Collection {
  ...&lt;/p&gt;
&lt;p&gt;extension void reverse() default Collections.reverse;
}[/java]&lt;/p&gt;
&lt;p&gt;This add a new method to the List with a default implement that use the Collections.reverse(List list) static method. The list will be passed as the first argument of the static method. So, now that you have a method reverse on the List, you can do that :&lt;/p&gt;
&lt;p&gt;[java]List strings = new ArrayList();&lt;/p&gt;
&lt;p&gt;//...&lt;/p&gt;
&lt;p&gt;strings.reverse();&lt;/p&gt;
&lt;p&gt;[/java]&lt;/p&gt;
&lt;p&gt;This code is a lot better than the other, isn't it ?&lt;/p&gt;
&lt;p&gt;You can now override the reverse method providing an implementation specific to your class. But the implementation is now optional. That solve all the problems we see earlier.&lt;/p&gt;
&lt;p&gt;To solve multiple inheritance issue a class implementing two interfaces providing a default implementation for the same method name and signature must provide an implementation of the method.&lt;/p&gt;
&lt;p&gt;An other objective of this proposal is to "closur-ize" the Java 7 librairies. By example, we could think of a filter() method to the List interface :&lt;/p&gt;
&lt;p&gt;[java]public interface List extends Collection {
  ...&lt;/p&gt;
&lt;p&gt;extension void filter(Predicate predicate) default Collections.filter;
}[/java]&lt;/p&gt;
&lt;p&gt;And a predicate like that :&lt;/p&gt;
&lt;p&gt;[java]public interface Predicate {
   boolean accept(E object);
}[/java]&lt;/p&gt;
&lt;p&gt;That type of method can take advantage of closures. We can also imagine reduce, forEach, expand, ....&lt;/p&gt;
&lt;p&gt;At this time, this is only a proposal, so we aren't sure it'll be included in Java 7 and the syntax is not definitive.&lt;/p&gt;
&lt;p&gt;Personally, i think this is a great improvement and that will make the closures (if we have them a day) more interesting for the Java language.&lt;/p&gt;
&lt;p&gt;If you want more information on the implementation, you could &lt;a href="http://cr.openjdk.java.net/~darcy/DefenderMethods.pdf" target="_blank"&gt;read the proposal in PDF&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Closures</category><category>Java</category><category>Java</category><category>Java 7</category><guid>http://wichtounet.github.io/posts/2010/05/java-7-add-public-defender-methods-to-java-interfaces.html</guid><pubDate>Mon, 31 May 2010 06:29:54 GMT</pubDate></item><item><title>Java 7 : Oracle pushes a first version of closures</title><link>http://wichtounet.github.io/posts/2010/05/oracle-pushes-a-first-version-of-closures.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2 days ago, Oracle pushed a first version of the closures implementation. We can see the evolving syntax in the test cases they made for the Java compiler. You can see these test cases &lt;a href="http://hg.openjdk.java.net/lambda/lambda/langtools/file/7704dcd17e0b/test/tools/javac/lambda/" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This revision supports the following features (copied from revision) :&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;Function types syntax&lt;/li&gt;
    &lt;li&gt;Function types subtyping&lt;/li&gt;
    &lt;li&gt;Full support for lambda expression of type 1 and 2&lt;/li&gt;
    &lt;li&gt;Inference of thrown types/return type in a lambda&lt;/li&gt;
    &lt;li&gt;Lambda conversion using rules specified in v0.1.5 draft&lt;/li&gt;
    &lt;li&gt;Support references to 'this' (both explicit and implicit)&lt;/li&gt;
    &lt;li&gt;Translation using method handles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The function types aren't enabled by default, so you have to use  -XDallowFunctionTypes to enable it.&lt;/p&gt;
&lt;p&gt;Here are some examples of lambda expression of type 1 taken from the test cases : &lt;/p&gt;
&lt;p&gt;[java]int i1 = #()(3).(); //i1 = 3&lt;/p&gt;
&lt;p&gt;Integer i2 = #()(3).(); //i2 = 3&lt;/p&gt;
&lt;p&gt;int i3 = #(int x)( x + 1 ).(3); //i3 = 4&lt;/p&gt;
&lt;p&gt;int i4 = #(Number x)(x.intValue()).(new Float(3.0f)); //i4 = 3[/java]&lt;/p&gt;
&lt;p&gt;And with type 2 : &lt;/p&gt;
&lt;p&gt;[java]int i1 = #(){ return 3; }.(); //i1 = 3&lt;/p&gt;
&lt;p&gt;Integer i2 = #(){ return 3; }.(); //i2 = 3&lt;/p&gt;
&lt;p&gt;int i3 = #(int x){ return x + 1; }.(3); //i3 = 4&lt;/p&gt;
&lt;p&gt;int i4 = #(Number x){ return x.intValue(); }.(new Float(3.0f)); //i4 = 3[/java]&lt;/p&gt;
&lt;p&gt;For those who didn't understand the syntax, #(int x)( x + 1 ) declares a lambda expression that takes a int and return this int plus 1. And the . (dot) is used to invoke the lambda expression. So #(int x)( x + 1 ).(3) declares the lambda expression and invoke it with 3 as parameter. &lt;/p&gt;
&lt;p&gt;This syntax is a little bit shocking, but I think we'll get used. &lt;/p&gt;&lt;/div&gt;</description><category>Closures</category><category>Java</category><category>Java</category><category>Java 7</category><guid>http://wichtounet.github.io/posts/2010/05/oracle-pushes-a-first-version-of-closures.html</guid><pubDate>Sat, 29 May 2010 13:31:16 GMT</pubDate></item><item><title>Better exception handling in Java 7 : Multicatch and final rethrow</title><link>http://wichtounet.github.io/posts/2010/05/better-exception-handling-in-java-7-multicatch-and-final-rethrow.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I'm happy to announce that an other improvement from the Project Coin has be marked for inclusion in Java 7 : Improved Exception Handling for Java, from Neal Gafter. This has been announced by Joe Darcy on &lt;a href="http://blogs.sun.com/darcy/entry/project_coin_multi_catch_rethrow" target="_blank"&gt;his blog&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This improvement add two litlte improvements to exception handling :&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;Multicatch : You'll now be able to catch multi exceptions type in one catch block&lt;/li&gt;
    &lt;li&gt;Final Rethow : Allows you to catch an exception type and it's subtype and rethrow it without having to add a throws clause to the method signature.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Often, we have that kind of code :&lt;/p&gt;
&lt;p&gt;[java]} catch (FirstException ex) {
     logger.error(ex);
     throw ex;
} catch (SecondException ex) {
     logger.error(ex);
     throw ex;
}[/java]&lt;/p&gt;
&lt;p&gt;But that code is heavy for nothing really interesting. A solution is to find a common supertype of these two exceptions type and catch just that type and rethrow it. But that can catch more exceptions than you want. &lt;/p&gt;
&lt;p&gt;So now, with that new feature, you can do : &lt;/p&gt;
&lt;p&gt;[java]} catch (FirstException | SecondException ex) {
     logger.error(ex);
    throw ex;
}[/java]&lt;/p&gt;
&lt;p&gt;A lot more cleaner, isn't it ?&lt;/p&gt;
&lt;p&gt;And the second improvement is a little more complicated. Imagine that you want to catch all exceptions, make several operations and then rethrow it. The code isn't hard to make, but the big problem is that you must add a throws clause to your method signature to manage the new exception launched by your code and this is not the objective. Now, you can do that without adding an exception throws clause : &lt;/p&gt;
&lt;p&gt;[java]try {
     // some code
} catch (final Throwable ex) {
     // some more code
    throw ex;
}[/java]&lt;/p&gt;
&lt;p&gt;Using the final keyword it allows you to throw an exception of the exact dynamic type that will be throwed. So if an IOException occurs, an IOException will be throwed. Of course, you have to declare the exceptions not caught. You throws clauses will exactly the same if you use the code (in //some code) without catching anything but now you can do something if that happens. &lt;/p&gt;
&lt;p&gt;I think multi-catch is a great feature, but for me the final rethrow is not often useful for programmers and perhaps a little weird using the final keyword. &lt;/p&gt;&lt;/div&gt;</description><category>Java</category><category>Java</category><category>Java 7</category><guid>http://wichtounet.github.io/posts/2010/05/better-exception-handling-in-java-7-multicatch-and-final-rethrow.html</guid><pubDate>Wed, 05 May 2010 06:08:53 GMT</pubDate></item></channel></rss>